# This makes the coordinate polar instead of cartesian.
coord_polar(start = 0) +
scale_fill_discrete(name = "Nucleotide", labels = c("G", "A"))
shortTC = as.data.frame(cbind(cCount, tCount))
shortTC$cCount = - shortTC$cCount
a = as.data.frame(matrix(0, ncol = 2, nrow = 40))
names(a) = names(shortTC)
shortTC = rbind(shortTC, a)
num = 1:nrow(shortTC)
shortTC = cbind(shortTC, num)
longTC = as.data.frame(cbind(cCountlong, tCountlong))
longTC$cCountlong = - longTC$cCountlong
a = as.data.frame(matrix(0, ncol = 2, nrow = 42))
names(a) = names(longTC)
longTC = rbind(longTC, a)
num = 1:nrow(longTC)
longTC = cbind(longTC, num)
p <- ggplot(shortTC, aes(x=num, y=tCount)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
# This add the bars with a blue color
geom_bar(stat="identity", fill = ColA, color = 'white') +
geom_bar(aes(num, cCount), fill = ColG, color = 'white', stat = "identity") +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
ylim(-20, 20) +
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
#plot.title = element_text('Tarsipes rostratus, 341.275')
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank()
# plot.margin = unit(rep(-1,4), "cm")     # This remove unnecessary margin around plot
) +
# This makes the coordinate polar instead of cartesian.
coord_polar(start = 3*pi/4, direction = -1) +
scale_fill_discrete(name = "Nucleotide", labels = c("G", "A"))
print(p + labs(title = 'Tarsipes rostratus, 341 days'))
p <- ggplot(longTC, aes(x=num, y=tCountlong)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
# This add the bars with a blue color
geom_bar(stat="identity", fill = ColA, color = 'white') +
geom_bar(aes(num, cCountlong), fill = ColG, color = 'white', stat = "identity") +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
ylim(-20, 20) +
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank()
# plot.margin = unit(rep(-2,4), "cm")     # This remove unnecessary margin around plot
) +
# This makes the coordinate polar instead of cartesian.
coord_polar(start = 3*pi/4, direction = -1) +
scale_fill_discrete(name = "Nucleotide", labels = c("G", "A"))
p + ggtitle('Balaena mysticetus, 18980 days')
shortTC = as.data.frame(cbind(cCount, tCount))
shortTC$cCount = - shortTC$cCount
a = as.data.frame(matrix(0, ncol = 2, nrow = 40))
names(a) = names(shortTC)
shortTC = rbind(shortTC, a)
num = 1:nrow(shortTC)
shortTC = cbind(shortTC, num)
longTC = as.data.frame(cbind(cCountlong, tCountlong))
longTC$cCountlong = - longTC$cCountlong
a = as.data.frame(matrix(0, ncol = 2, nrow = 35))
names(a) = names(longTC)
longTC = rbind(longTC, a)
num = 1:nrow(longTC)
longTC = cbind(longTC, num)
shortTC = as.data.frame(cbind(cCount, tCount))
shortTC$cCount = - shortTC$cCount
a = as.data.frame(matrix(0, ncol = 2, nrow = 40))
names(a) = names(shortTC)
shortTC = rbind(shortTC, a)
num = 1:nrow(shortTC)
shortTC = cbind(shortTC, num)
longTC = as.data.frame(cbind(cCountlong, tCountlong))
longTC$cCountlong = - longTC$cCountlong
a = as.data.frame(matrix(0, ncol = 2, nrow = 35))
names(a) = names(longTC)
longTC = rbind(longTC, a)
num = 1:nrow(longTC)
longTC = cbind(longTC, num)
p <- ggplot(shortTC, aes(x=num, y=tCount)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
# This add the bars with a blue color
geom_bar(stat="identity", fill = ColA, color = 'white') +
geom_bar(aes(num, cCount), fill = ColG, color = 'white', stat = "identity") +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
ylim(-20, 20) +
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
#plot.title = element_text('Tarsipes rostratus, 341.275')
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank()
# plot.margin = unit(rep(-1,4), "cm")     # This remove unnecessary margin around plot
) +
# This makes the coordinate polar instead of cartesian.
coord_polar(start = 3*pi/4, direction = -1) +
scale_fill_discrete(name = "Nucleotide", labels = c("G", "A"))
print(p + labs(title = 'Tarsipes rostratus, 341 days'))
p <- ggplot(longTC, aes(x=num, y=tCountlong)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
# This add the bars with a blue color
geom_bar(stat="identity", fill = ColA, color = 'white') +
geom_bar(aes(num, cCountlong), fill = ColG, color = 'white', stat = "identity") +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
ylim(-20, 20) +
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank()
# plot.margin = unit(rep(-2,4), "cm")     # This remove unnecessary margin around plot
) +
# This makes the coordinate polar instead of cartesian.
coord_polar(start = 3*pi/4, direction = -1) +
scale_fill_discrete(name = "Nucleotide", labels = c("G", "A"))
p + ggtitle('Balaena mysticetus, 18980 days')
shortTC = as.data.frame(cbind(cCount, tCount))
shortTC$cCount = - shortTC$cCount
num = 1:nrow(shortTC)
shortTC = cbind(shortTC, num)
longTC = as.data.frame(cbind(cCountlong, tCountlong))
longTC$cCountlong = - longTC$cCountlong
num = 1:nrow(longTC)
longTC = cbind(longTC, num)
pdf('../../Body/4Figures/WholeGenomeAnalyses.NoOverlapAgAlongGenome.pdf')
ColG = rgb(0.1,0.1,0.1,0.5)
ColA = rgb(1,0.1,0.1,0.5)
a = ggplot(shortTC, aes(num, tCount)) +
geom_bar(fill = ColA, color = 'white', stat = "identity") +
geom_bar(aes(num, cCount), fill = ColG, color = 'white', stat = "identity") +
ggtitle('low Generation time') + xlab('Position') + ylab('') +
scale_fill_discrete(name = "Nucleotide", labels = c("G", "A")) +
theme_classic(); a
a = ggplot(longTC, aes(num, tCountlong)) +
geom_bar(fill = ColA, color = 'white', stat = "identity") +
geom_bar(aes(num, cCountlong), fill = ColG, color = 'white', stat = "identity") +
ggtitle('high Generation time') + xlab('Position') + ylab('') +
scale_fill_discrete(name = "Nucleotide", labels = c("G", "A")) +
theme_classic(); a
# dev.off()
shortTC = as.data.frame(cbind(cCount, tCount))
shortTC$cCount = - shortTC$cCount
num = 1:nrow(shortTC)
shortTC = cbind(shortTC, num)
longTC = as.data.frame(cbind(cCountlong, tCountlong))
longTC$cCountlong = - longTC$cCountlong
num = 1:nrow(longTC)
longTC = cbind(longTC, num)
p <- ggplot(shortTC, aes(x=num, y=tCount)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
# This add the bars with a blue color
geom_bar(fill = ColA, color = 'white', stat="identity") +
geom_bar(aes(num, cCount), fill = ColG, color = 'white', stat = "identity") +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
ylim(-20, 20) +
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-2,4), "cm")     # This remove unnecessary margin around plot
) +
# This makes the coordinate polar instead of cartesian.
coord_polar(start = 0) + scale_fill_discrete(name = "Nucleotide", labels = c("G", "A"))
# p
p <- ggplot(longTC, aes(x=num, y=tCountlong)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
# This add the bars with a blue color
geom_bar(stat="identity", fill = ColA, color = 'white') +
geom_bar(aes(num, cCountlong), fill = ColG, color = 'white', stat = "identity") +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
ylim(-20, 20) +
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-2,4), "cm")     # This remove unnecessary margin around plot
) +
# This makes the coordinate polar instead of cartesian.
coord_polar(start = 0) +
scale_fill_discrete(name = "Nucleotide", labels = c("G", "A"))
# p
############################################################
### add zeros
shortTC = as.data.frame(cbind(cCount, tCount))
shortTC$cCount = - shortTC$cCount
a = as.data.frame(matrix(0, ncol = 2, nrow = 40))
names(a) = names(shortTC)
shortTC = rbind(shortTC, a)
num = 1:nrow(shortTC)
shortTC = cbind(shortTC, num)
longTC = as.data.frame(cbind(cCountlong, tCountlong))
longTC$cCountlong = - longTC$cCountlong
a = as.data.frame(matrix(0, ncol = 2, nrow = 35))
names(a) = names(longTC)
longTC = rbind(longTC, a)
num = 1:nrow(longTC)
longTC = cbind(longTC, num)
p <- ggplot(shortTC, aes(x=num, y=tCount)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
# This add the bars with a blue color
geom_bar(stat="identity", fill = ColA, color = 'white') +
geom_bar(aes(num, cCount), fill = ColG, color = 'white', stat = "identity") +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
ylim(-20, 20) +
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
#plot.title = element_text('Tarsipes rostratus, 341.275')
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank()
# plot.margin = unit(rep(-1,4), "cm")     # This remove unnecessary margin around plot
) +
# This makes the coordinate polar instead of cartesian.
coord_polar(start = 3*pi/4, direction = -1) +
scale_fill_discrete(name = "Nucleotide", labels = c("G", "A"))
print(p + labs(title = 'Tarsipes rostratus, 341 days'))
p <- ggplot(longTC, aes(x=num, y=tCountlong)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
# This add the bars with a blue color
geom_bar(stat="identity", fill = ColA, color = 'white') +
geom_bar(aes(num, cCountlong), fill = ColG, color = 'white', stat = "identity") +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
ylim(-20, 20) +
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank()
# plot.margin = unit(rep(-2,4), "cm")     # This remove unnecessary margin around plot
) +
# This makes the coordinate polar instead of cartesian.
coord_polar(start = 3*pi/4, direction = -1) +
scale_fill_discrete(name = "Nucleotide", labels = c("G", "A"))
p + ggtitle('Balaena mysticetus, 18980 days')
dev.off()
rm(list=ls(all=TRUE))
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip", exdir = "../../Body/3Results/")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")){ file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")}
View(SynNuc)
# SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE)
names(SynNuc)
VecOfTaxa = unique(SynNuc$Class)
VecOfTaxa
table(SynNuc$Class)/13
View(SynNuc)
table(SynNuc$Class)/13
table(SynNuc$Class)
names(SynNuc)
############ AnAge
AA = read.table("../../Body/1Raw/anage_data.txt", header = TRUE, sep = '\t')
AA$Species = paste(AA$Genus,AA$Species,sep = '_')
View(AA)
View(SynNuc)
View(AA)
View(AA)
Alldata =  merge(SynNuc, AA, by = 'Species')
View(Alldata)
View(Alldata)
names(Alldata)
table(Alldata$Class.x)
table(Alldata$Class.y)
Mammalia = Alldata[Alldata$Class.y == "Mammalia",]
table(Mammalia)
table(Mammalia$Order)
names(Alldata)
table(Mammalia$Phylum)
names(Mammalia$Order)
table(Mammalia$Order)
Marsupials = Mammalia[Mammalia$Order %in% vec_of_Marsupials_orders,]
vec_of_Marsupials_orders = c("Dasyuromorphia", 'Didelphimorphia', "Diprotodontia", "Microbiotheria", "Notoryctemorphia", "Paucituberculata", "Peramelemorphia")
Marsupials = Mammalia[Mammalia$Order %in% vec_of_Marsupials_orders,]
table(Marsupials$Order)
Marsupials
View(Marsupials)
names(Marsupials)
table(Marsupials$Order)
rm(list=ls(all=TRUE))
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip", exdir = "../../Body/3Results/")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.zip", exdir = "../../Body/3Results/")
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.zip")
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.rar")
rm(list=ls(all=TRUE))
############ Syn mut
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
############ Syn mut
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")){file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")}
names(SynNuc)
############ AnAge
AA = read.table("../../Body/1Raw/anage_data.txt", header = TRUE, sep = '\t')
AA$Species = paste(AA$Genus,AA$Species,sep = '_')
Alldata =  merge(SynNuc, AA, by = 'Species')
names(Alldata)
Mammalia = Alldata[Alldata$Class.y == "Mammalia",]
vec_of_Marsupials_orders = c("Dasyuromorphia", 'Didelphimorphia', "Diprotodontia", "Microbiotheria", "Notoryctemorphia", "Paucituberculata", "Peramelemorphia")
Marsupials = Mammalia[Mammalia$Order %in% vec_of_Marsupials_orders,]
table(Marsupials$Order)
Monotremata = Mammalia[Mammalia$Order == "Monotremata",]
Monotremata
table(Monotremata$Order)
for (i in 1:nrows(Mammalia)){
if (Mammalia$Order[i] %in% vec_of_Marsupials_orders){
Mammalia$Subdivision[i] = "Marsupials"
}else{
Mammalia$Subdivision[i] = "nonMarsupials"
}
}
for (i in 1:nrow(Mammalia)){
if (Mammalia$Order[i] %in% vec_of_Marsupials_orders){
Mammalia$Subdivision[i] = "Marsupials"
}else{
Mammalia$Subdivision[i] = "nonMarsupials"
}
}
names(Mammalia)
table(Mammalia$Subdivision)
for (i in 1:nrow(Mammalia)){
if (Mammalia$Subdivision[i] == "nonMarsupials"){
if (Mammalia$Order[i] == "Monotremata"){
Mammalia$Subdivision[i] = "Monotremata"
}else{
Mammalia$Subdivision[i] = "Placentals"
}
}
}
table(Mammalia$Subdivision)
library(ggpubr)
ggboxplot(Mammalia, "Subdivision", "NeutralA",
fill = "Subdivision", palette =c("#00AFBB", "#E7B800", "#FC4E07"))
ggboxplot(Mammalia, "Subdivision", "NeutralC",
fill = "Subdivision", palette =c("#00AFBB", "#E7B800", "#FC4E07"))
ggboxplot(Mammalia, "Subdivision", "NeutralT",
fill = "Subdivision", palette =c("#00AFBB", "#E7B800", "#FC4E07"))
ggboxplot(Mammalia, "Subdivision", "NeutralC",
fill = "Subdivision", palette =c("#00AFBB", "#E7B800", "#FC4E07"))
ggboxplot(Mammalia, "Subdivision", "Maximum.longevity..yrs.",
fill = "Subdivision", palette =c("#00AFBB", "#E7B800", "#FC4E07"))
ggboxplot(Mammalia, "Subdivision", "Maximum.longevity..yrs.",
ggboxplot(Mammalia, "Subdivision", "Maximum.longevity..yrs.",
ggboxplot(Mammalia, "Subdivision", "Maximum.longevity..yrs.",
ggboxplot(Mammalia, "Subdivision", "Maximum.longevity..yrs.",
fill = "Subdivision", palette =c("#e34a33", "#fdbb84", "#fee8c8"))
ggboxplot(Mammalia, "Subdivision", "NeutralT",
fill = "Subdivision", palette =c("#2b8cbe", "#a6bddb", "#ece7f2"))
ggboxplot(Mammalia, "Subdivision", "NeutralC",
ggboxplot(Mammalia, "Subdivision", "NeutralC", fill = "Subdivision", palette =c("#2ca25f", "#99d8c9", "#e5f5f9"))
ggboxplot(Mammalia, "Subdivision", "Maximum.longevity..yrs.", fill = "Subdivision", palette =c("#e34a33", "#fdbb84", "#fee8c8"))
pdf("../../Body/4Figures/WholeGenomeAnalyses.NoOverlap.Placentals_Monotremata_Marsupials_A_G_Longevity.pdf", height = 20, width = 40)
ggboxplot(Mammalia, "Subdivision", "NeutralT",
fill = "Subdivision", palette =c("#2b8cbe", "#a6bddb", "#ece7f2"))
ggboxplot(Mammalia, "Subdivision", "NeutralC", fill = "Subdivision", palette =c("#2ca25f", "#99d8c9", "#e5f5f9"))
ggboxplot(Mammalia, "Subdivision", "Maximum.longevity..yrs.", fill = "Subdivision", palette =c("#e34a33", "#fdbb84", "#fee8c8"))
dev.off()
ggboxplot(Mammalia, "Subdivision", "Maximum.longevity..yrs.", fill = "Subdivision", palette =c("#e34a33", "#fdbb84", "#fee8c8"))
table(Mammalia$Subdivision)
Mammalia$
library(ggpubr)
Mammalia$Maximum.longevity..yrs.
Mammalia= Mammalia[!is.na(Mammalia$Maximum.longevity..yrs.),]
ggboxplot(Mammalia, "Subdivision", "Maximum.longevity..yrs.", fill = "Subdivision", palette =c("#e34a33", "#fdbb84", "#fee8c8"))
rm(list=ls(all=TRUE))
setwd("../../Body/3Results")
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) {file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")}
# SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE)
names(SynNuc)
### make ND6 complementary:
NotND6 = SynNuc[SynNuc$Gene != 'ND6',]
ND6 = SynNuc[SynNuc$Gene == 'ND6',]
A = ND6$NeutralT
T = ND6$NeutralA
G = ND6$NeutralC
C = ND6$NeutralG
ND6$NeutralA = A
ND6$NeutralT = T
ND6$NeutralG = G
ND6$NeutralC = C
SynNuc = rbind(NotND6,ND6)
### count fraction of nucleotides
SynNuc$FrA = SynNuc$NeutralA / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrT = SynNuc$NeutralT / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrG = SynNuc$NeutralG / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrC = SynNuc$NeutralC / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$TAXON = SynNuc$Class
SynNucAll = SynNuc
VecOfTaxa = unique(SynNuc$TAXON)
VecOfTaxaShort = c('Actinopterygii','Reptilia','Aves','Mammalia','Amphibia')
i = 1
VecOfTaxaShort[i]
SynNuc = SynNucAll
SynNuc = SynNuc[SynNuc$TAXON == VecOfTaxaShort[i],]
###merge with temperature
TEMPE = read.table('../../Body/1Raw/FishBaseTemperature.txt', header = TRUE)
class(TEMPE$Temperature)
class(TEMPE$Species)
TEMPE = aggregate(Temperature ~ ., median, data = TEMPE)
SynNucTEMPE = merge(TEMPE,SynNuc)
class(SynNucTEMPE$Temperature)
######merge with fishbase maturation
MATULM = read.table('../../Body/1Raw/FishBaseMaturity_Lm.txt',  header = TRUE, stringsAsFactors=FALSE)
MATUTM = read.table('../../Body/1Raw/FishBaseMaturity_Tm.txt',  header = TRUE)
class(MATULM$Lm)
MATULM$Lm = as.numeric(MATULM$Lm)
MATUTM = aggregate(Tm ~ ., median, data = MATUTM)
MATULM = aggregate(Lm ~ ., median, data = MATULM)
SynNucTM = merge(MATUTM,SynNuc)
SynNucLM = merge(MATULM,SynNuc)
############# mult reg
SynNucTMTEMPE = merge(SynNucTM,TEMPE)
SynNucLMTEMPE = merge(SynNucLM,TEMPE)
rm(list=ls(all=TRUE))
setwd("../../Body/3Results")
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) {file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")}
# SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE)
names(SynNuc)
### make ND6 complementary:
NotND6 = SynNuc[SynNuc$Gene != 'ND6',]
ND6 = SynNuc[SynNuc$Gene == 'ND6',]
A = ND6$NeutralT
T = ND6$NeutralA
G = ND6$NeutralC
C = ND6$NeutralG
ND6$NeutralA = A
ND6$NeutralT = T
ND6$NeutralG = G
ND6$NeutralC = C
SynNuc = rbind(NotND6,ND6)
### count fraction of nucleotides
SynNuc$FrA = SynNuc$NeutralA / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrT = SynNuc$NeutralT / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrG = SynNuc$NeutralG / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrC = SynNuc$NeutralC / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$TAXON = SynNuc$Class
SynNucAll = SynNuc
VecOfTaxa = unique(SynNuc$TAXON)
VecOfTaxaShort = c('Actinopterygii','Reptilia','Aves','Mammalia','Amphibia')
i = 1
VecOfTaxaShort[i]
SynNuc = SynNucAll
SynNuc = SynNuc[SynNuc$TAXON == VecOfTaxaShort[i],]
###merge with temperature
TEMPE = read.table('../../Body/1Raw/FishBaseTemperature.txt', header = TRUE)
class(TEMPE$Temperature)
class(TEMPE$Species)
TEMPE = aggregate(Temperature ~ ., median, data = TEMPE)
SynNucTEMPE = merge(TEMPE,SynNuc)
class(SynNucTEMPE$Temperature)
######merge with fishbase maturation
MATULM = read.table('../../Body/1Raw/FishBaseMaturity_Lm.txt',  header = TRUE, stringsAsFactors=FALSE)
MATUTM = read.table('../../Body/1Raw/FishBaseMaturity_Tm.txt',  header = TRUE)
class(MATULM$Lm)
MATULM$Lm = as.numeric(MATULM$Lm)
MATUTM = aggregate(Tm ~ ., median, data = MATUTM)
MATULM = aggregate(Lm ~ ., median, data = MATULM)
SynNucTM = merge(MATUTM,SynNuc)
SynNucLM = merge(MATULM,SynNuc)
AGG = aggregate(list(SynNucTM$FrA,SynNucTM$FrT,SynNucTM$FrG,SynNucTM$FrC), by = list(SynNucTM$Species,SynNucTM$Tm), FUN = mean)
names(AGG) = c('Species','FemaleMaturityDays','FrA','FrT','FrG','FrC')
nrow(AGG) # 188
############# mult reg
AGGTEMPE = merge(AGG,TEMPE)
View(AGGTEMPE)
names(AGGTEMPE) = c('Species','Maturity','FrA','FrT','FrG','FrC', "Temperature")
##Tm
ltest = lm(formula = FrA ~ scale(Temperature)*scale(Maturity), data = AGGTEMPE)
summary(ltest)
ltest = lm(formula = FrT ~ scale(Temperature)*scale(Maturity), data = AGGTEMPE)
summary(ltest)
ltest = lm(formula = FrG ~ scale(Temperature)*scale(Maturity), data = AGGTEMPE)
summary(ltest)
ltest = lm(formula = FrC ~ scale(Temperature)*scale(Maturity), data = AGGTEMPE)
summary(ltest)
ltest = lm(formula = FrA ~ scale(Temperature)*scale(Maturity), data = AGGTEMPE)
summary(ltest)
ltest = lm(formula = FrT ~ scale(Temperature)*scale(Maturity), data = AGGTEMPE)
summary(ltest)
############# mult reg Lm
AGG = aggregate(list(SynNucLM$FrA,SynNucLM$FrT,SynNucLM$FrG,SynNucLM$FrC), by = list(SynNucLM$Species,SynNucLM$Tm), FUN = mean)
############# mult reg Lm
AGG = aggregate(list(SynNucLM$FrA,SynNucLM$FrT,SynNucLM$FrG,SynNucLM$FrC), by = list(SynNucLM$Species,SynNucLM$Lm), FUN = mean)
names(AGG) = c('Species','FemaleMaturityDays','FrA','FrT','FrG','FrC')
nrow(AGG)
AGGTEMPE = merge(AGG,TEMPE)
names(AGGTEMPE) = c('Species','Maturity','FrA','FrT','FrG','FrC', "Temperature")
nrow(AGG)
nrow(AGGTEMPE)
ltest = lm(formula = FrA ~ scale(Temperature)*scale(Maturity), data = AGGTEMPE)
summary(ltest)
ltest = lm(formula = FrT ~ scale(Temperature)*scale(Maturity), data = AGGTEMPE)
summary(ltest)
ltest = lm(formula = FrG ~ scale(Temperature)*scale(Maturity), data = AGGTEMPE)
summary(ltest)
ltest = lm(formula = FrC ~ scale(Temperature)*scale(Maturity), data = AGGTEMPE)
summary(ltest)
