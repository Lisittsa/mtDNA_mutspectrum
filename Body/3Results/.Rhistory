rm(list=ls(all=TRUE))
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip", exdir = "../../Body/3Results/")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.zip", exdir = "../../Body/3Results/")
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.zip")
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.rar")
rm(list=ls(all=TRUE))
############ Syn mut
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
############ Syn mut
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")){file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")}
names(SynNuc)
############ AnAge
AA = read.table("../../Body/1Raw/anage_data.txt", header = TRUE, sep = '\t')
AA$Species = paste(AA$Genus,AA$Species,sep = '_')
Alldata =  merge(SynNuc, AA, by = 'Species')
names(Alldata)
Mammalia = Alldata[Alldata$Class.y == "Mammalia",]
vec_of_Marsupials_orders = c("Dasyuromorphia", 'Didelphimorphia', "Diprotodontia", "Microbiotheria", "Notoryctemorphia", "Paucituberculata", "Peramelemorphia")
Marsupials = Mammalia[Mammalia$Order %in% vec_of_Marsupials_orders,]
table(Marsupials$Order)
Monotremata = Mammalia[Mammalia$Order == "Monotremata",]
Monotremata
table(Monotremata$Order)
for (i in 1:nrows(Mammalia)){
if (Mammalia$Order[i] %in% vec_of_Marsupials_orders){
Mammalia$Subdivision[i] = "Marsupials"
}else{
Mammalia$Subdivision[i] = "nonMarsupials"
}
}
for (i in 1:nrow(Mammalia)){
if (Mammalia$Order[i] %in% vec_of_Marsupials_orders){
Mammalia$Subdivision[i] = "Marsupials"
}else{
Mammalia$Subdivision[i] = "nonMarsupials"
}
}
names(Mammalia)
table(Mammalia$Subdivision)
for (i in 1:nrow(Mammalia)){
if (Mammalia$Subdivision[i] == "nonMarsupials"){
if (Mammalia$Order[i] == "Monotremata"){
Mammalia$Subdivision[i] = "Monotremata"
}else{
Mammalia$Subdivision[i] = "Placentals"
}
}
}
table(Mammalia$Subdivision)
library(ggpubr)
ggboxplot(Mammalia, "Subdivision", "NeutralA",
fill = "Subdivision", palette =c("#00AFBB", "#E7B800", "#FC4E07"))
ggboxplot(Mammalia, "Subdivision", "NeutralC",
fill = "Subdivision", palette =c("#00AFBB", "#E7B800", "#FC4E07"))
ggboxplot(Mammalia, "Subdivision", "NeutralT",
fill = "Subdivision", palette =c("#00AFBB", "#E7B800", "#FC4E07"))
ggboxplot(Mammalia, "Subdivision", "NeutralC",
fill = "Subdivision", palette =c("#00AFBB", "#E7B800", "#FC4E07"))
ggboxplot(Mammalia, "Subdivision", "Maximum.longevity..yrs.",
fill = "Subdivision", palette =c("#00AFBB", "#E7B800", "#FC4E07"))
ggboxplot(Mammalia, "Subdivision", "Maximum.longevity..yrs.",
ggboxplot(Mammalia, "Subdivision", "Maximum.longevity..yrs.",
ggboxplot(Mammalia, "Subdivision", "Maximum.longevity..yrs.",
ggboxplot(Mammalia, "Subdivision", "Maximum.longevity..yrs.",
fill = "Subdivision", palette =c("#e34a33", "#fdbb84", "#fee8c8"))
ggboxplot(Mammalia, "Subdivision", "NeutralT",
fill = "Subdivision", palette =c("#2b8cbe", "#a6bddb", "#ece7f2"))
ggboxplot(Mammalia, "Subdivision", "NeutralC",
ggboxplot(Mammalia, "Subdivision", "NeutralC", fill = "Subdivision", palette =c("#2ca25f", "#99d8c9", "#e5f5f9"))
ggboxplot(Mammalia, "Subdivision", "Maximum.longevity..yrs.", fill = "Subdivision", palette =c("#e34a33", "#fdbb84", "#fee8c8"))
pdf("../../Body/4Figures/WholeGenomeAnalyses.NoOverlap.Placentals_Monotremata_Marsupials_A_G_Longevity.pdf", height = 20, width = 40)
ggboxplot(Mammalia, "Subdivision", "NeutralT",
fill = "Subdivision", palette =c("#2b8cbe", "#a6bddb", "#ece7f2"))
ggboxplot(Mammalia, "Subdivision", "NeutralC", fill = "Subdivision", palette =c("#2ca25f", "#99d8c9", "#e5f5f9"))
ggboxplot(Mammalia, "Subdivision", "Maximum.longevity..yrs.", fill = "Subdivision", palette =c("#e34a33", "#fdbb84", "#fee8c8"))
dev.off()
ggboxplot(Mammalia, "Subdivision", "Maximum.longevity..yrs.", fill = "Subdivision", palette =c("#e34a33", "#fdbb84", "#fee8c8"))
table(Mammalia$Subdivision)
Mammalia$
library(ggpubr)
Mammalia$Maximum.longevity..yrs.
Mammalia= Mammalia[!is.na(Mammalia$Maximum.longevity..yrs.),]
ggboxplot(Mammalia, "Subdivision", "Maximum.longevity..yrs.", fill = "Subdivision", palette =c("#e34a33", "#fdbb84", "#fee8c8"))
rm(list=ls(all=TRUE))
############ list of hibernating animals
Hib = read.table("../../Body/1Raw/HibernatingMammals.txt", sep = '\t')
ListOfHibSpecies = gsub(' ','_',Hib$V1); length(ListOfHibSpecies)
############ Syn mut
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE)
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) {file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")}
### make ND6 complementary:
NotND6 = SynNuc[SynNuc$Gene != 'ND6',]
NotND6$FrA = NotND6$NeutralA / (NotND6$NeutralA + NotND6$NeutralT + NotND6$NeutralG + NotND6$NeutralC)
NotND6$FrT = NotND6$NeutralT / (NotND6$NeutralA + NotND6$NeutralT + NotND6$NeutralG + NotND6$NeutralC)
NotND6$FrG = NotND6$NeutralG / (NotND6$NeutralA + NotND6$NeutralT + NotND6$NeutralG + NotND6$NeutralC)
NotND6$FrC = NotND6$NeutralC / (NotND6$NeutralA + NotND6$NeutralT + NotND6$NeutralG + NotND6$NeutralC)
ND6 = SynNuc[SynNuc$Gene == 'ND6',]
ND6$FrA = ND6$NeutralT / (ND6$NeutralA + ND6$NeutralT + ND6$NeutralG + ND6$NeutralC)
ND6$FrT = ND6$NeutralA / (ND6$NeutralA + ND6$NeutralT + ND6$NeutralG + ND6$NeutralC)
ND6$FrG = ND6$NeutralC / (ND6$NeutralA + ND6$NeutralT + ND6$NeutralG + ND6$NeutralC)
ND6$FrC = ND6$NeutralG / (ND6$NeutralA + ND6$NeutralT + ND6$NeutralG + ND6$NeutralC)
SynNuc = rbind(NotND6,ND6)
VecOfTaxa = unique(SynNuc$Class)
########## compare nucleotide frequencies between hibernating and other mammals
SynNuc = SynNuc[SynNuc$Class == 'Mammalia',]; length(unique(SynNuc$Species))
AGG = aggregate(list(SynNuc$FrA,SynNuc$FrT,SynNuc$FrG,SynNuc$FrC), by = list(SynNuc$Species), FUN = mean)
names(AGG)=c('Species','FrA','FrT','FrG','FrC')
summary(AGG[AGG$Species %in% ListOfHibSpecies,]$FrA)
summary(AGG[!AGG$Species %in% ListOfHibSpecies,]$FrA)
############# Longevity
AA = read.table("../../Body/1Raw/anage_data.txt", header = TRUE, sep = '\t')
AA$Species = paste(AA$Genus,AA$Species,sep = '_')
AGG[AGG$Species %in% ListOfHibSpecies,]$Features = "hib"
AGG$Features = "hib"
View(AGG)
AGG[!AGG$Species %in% ListOfHibSpecies,]$Features = "nonhib"
allparameters = merge(AA, AGG)
summary(allparameters$Features)
table(allparameters$Features)
VecOfTaxa
View(AA)
ltest = lm(formula = FrA ~ scale(Female.maturity..days.)+scale(Features), data = allparameters)
allparameters$
allparametershib=allparameters[allparameters$Features == "hib"]
allparametersnhib=allparameters[allparameters$Features == "nonhib"]
allparameters$Features
allparametershib=allparameters[allparameters$Features == "hib",]
allparametersnhib=allparameters[allparameters$Features == "nonhib",]
ltest = lm(formula = FrA ~ scale(Female.maturity..days.)+scale(Temperature..K.), data = allparametershib)
summary(ltest)
ltest = lm(formula = FrA ~ scale(Female.maturity..days.)*scale(Temperature..K.), data = allparametershib)
summary(ltest)
ltest = lm(formula = FrT ~ scale(Female.maturity..days.)*scale(Temperature..K.), data = allparametershib)
summary(ltest)
ltest = lm(formula = FrG ~ scale(Female.maturity..days.)*scale(Temperature..K.), data = allparametershib)
summary(ltest)
ltest = lm(formula = FrC ~ scale(Female.maturity..days.)*scale(Temperature..K.), data = allparametershib)
summary(ltest)
ltest = lm(formula = FrA ~ scale(Female.maturity..days.)*scale(Temperature..K.), data = allparametersnhib)
summary(ltest)
ltest = lm(formula = FrT ~ scale(Female.maturity..days.)*scale(Temperature..K.), data = allparametersnhib)
summary(ltest)
ltest = lm(formula = FrG ~ scale(Female.maturity..days.)*scale(Temperature..K.), data = allparametersnhib)
summary(ltest)
ltest = lm(formula = FrC ~ scale(Female.maturity..days.)*scale(Temperature..K.), data = allparametersnhib)
summary(ltest)
rm(list=ls(all=TRUE))
MUT = read.table('../../Body/3Results/VertebratePolymorphisms.MutSpecData.OnlyFourFoldDegAllGenes.txt', header = TRUE)
class(MUT$A_T)
class(MUT$Species)
######Temperature
TEMPE = read.table('../../Body/1Raw/FishBaseTemperature.txt', header = TRUE)
class(TEMPE$Temperature)
class(TEMPE$Species)
averageTEMPE = aggregate(Temperature ~ ., median, data = TEMPE)
######MATURITY
MATULM = read.table('../../Body/1Raw/FishBaseMaturity_Lm.txt',  header = TRUE, stringsAsFactors=FALSE)
MATUTM = read.table('../../Body/1Raw/FishBaseMaturity_Tm.txt',  header = TRUE)
class(MATULM$Lm)
MATULM$Lm = as.numeric(MATULM$Lm)
MATUTM = aggregate(Tm ~ ., median, data = MATUTM)
MATULM = aggregate(Lm ~ ., median, data = MATULM)
##multiple reg Tm
TemperMut = merge(MUT,averageTEMPE)
allparameters=merge(TemperMut, MATUTM)
ltest = lm(formula = T_C ~ scale(Temperature)*scale(Tm), data = allparameters)
summary(ltest)
ltest = lm(formula = T_C ~ scale(Temperature) + scale(Tm), data = allparameters)
summary(ltest)
ltest = lm(formula = scale(T_C) ~ scale(Temperature) + scale(Tm), data = allparameters)
summary(ltest)
ltest = lm(formula = scale(T_C) ~ 0 + scale(Temperature) + scale(Tm), data = allparameters)
summary(ltest)
ltest = lm(formula = scale(T_C) ~ 0 + scale(Temperature), data = allparameters)
summary(ltest)
##multiple reg Lm
TemperMut = merge(MUT,averageTEMPE)
allparameters=merge(TemperMut, MATULM)
ltest = lm(formula = A_G ~ scale(Temperature)*scale(Lm), data = allparameters)
summary(ltest)
ltest = lm(formula = G_C ~ scale(Temperature)*scale(Lm), data = allparameters)
summary(ltest)
ltest = lm(formula = A_G ~ scale(Temperature)*scale(Tm), data = allparameters)
summary(ltest)
ltest = lm(formula = A_G ~ scale(Temperature)*scale(Tm), data = allparameters)
summary(ltest)
##multiple reg Tm
TemperMut = merge(MUT,averageTEMPE)
allparameters=merge(TemperMut, MATUTM)
ltest = lm(formula = A_G ~ scale(Temperature)*scale(Tm), data = allparameters)
summary(ltest)
ltest = lm(formula = A_G ~ scale(Temperature)*scale(Tm), data = allparameters)
summary(ltest)
ltest = lm(formula = Temperature ~ scale(T_C)*scale(A_G), data = allparameters)
summary(ltest)
ltest = lm(formula = A_G ~ scale(Temperature)*scale(Tm), data = allparameters)
summary(ltest)
ltest = lm(formula = Temperature ~ scale(T_C)+scale(A_G), data = allparameters)
summary(ltest)
ltest = lm(formula = A_G ~ scale(Temperature)*scale(Tm), data = allparameters)
summary(ltest)
rm(list=ls(all=TRUE))
setwd("../../Body/3Results")
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) {file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")}
# SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE)
names(SynNuc)
### make ND6 complementary:
NotND6 = SynNuc[SynNuc$Gene != 'ND6',]
ND6 = SynNuc[SynNuc$Gene == 'ND6',]
A = ND6$NeutralT
T = ND6$NeutralA
G = ND6$NeutralC
C = ND6$NeutralG
ND6$NeutralA = A
ND6$NeutralT = T
ND6$NeutralG = G
ND6$NeutralC = C
SynNuc = rbind(NotND6,ND6)
### count fraction of nucleotides
SynNuc$FrA = SynNuc$NeutralA / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrT = SynNuc$NeutralT / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrG = SynNuc$NeutralG / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrC = SynNuc$NeutralC / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$TAXON = SynNuc$Class
SynNucAll = SynNuc
VecOfTaxa = unique(SynNuc$TAXON)
VecOfTaxaShort = c('Actinopterygii','Reptilia','Aves','Mammalia','Amphibia')
i = 1
VecOfTaxaShort[i]
SynNuc = SynNucAll
SynNuc = SynNuc[SynNuc$TAXON == VecOfTaxaShort[i],]
###merge with temperature
TEMPE = read.table('../../Body/1Raw/FishBaseTemperature.txt', header = TRUE)
class(TEMPE$Temperature)
class(TEMPE$Species)
TEMPE = aggregate(Temperature ~ ., median, data = TEMPE)
SynNucTEMPE = merge(TEMPE,SynNuc)
class(SynNucTEMPE$Temperature)
AGG = aggregate(list(SynNucTEMPE$FrA,SynNucTEMPE$FrT,SynNucTEMPE$FrG,SynNucTEMPE$FrC), by = list(SynNucTEMPE$Species,SynNucTEMPE$Temperature), FUN = mean)
names(AGG) = c('Species','FemaleMaturityDays','FrA','FrT','FrG','FrC')
nrow(AGG) # 302
AGG = AGG[AGG$FemaleMaturityDays > 0,]
############## T - negative, G - negative
cor.test(log2(AGG$FemaleMaturityDays),AGG$FrA)
cor.test(log2(AGG$FemaleMaturityDays),AGG$FrT)
cor.test(log2(AGG$FemaleMaturityDays),AGG$FrG)
cor.test(log2(AGG$FemaleMaturityDays),AGG$FrC)
######merge with fishbase maturation
MATULM = read.table('../../Body/1Raw/FishBaseMaturity_Lm.txt',  header = TRUE, stringsAsFactors=FALSE)
MATUTM = read.table('../../Body/1Raw/FishBaseMaturity_Tm.txt',  header = TRUE)
class(MATULM$Lm)
MATULM$Lm = as.numeric(MATULM$Lm)
MATUTM = aggregate(Tm ~ ., median, data = MATUTM)
MATULM = aggregate(Lm ~ ., median, data = MATULM)
SynNucTM = merge(MATUTM,SynNuc)
SynNucLM = merge(MATULM,SynNuc)
AGG = aggregate(list(SynNucTM$FrA,SynNucTM$FrT,SynNucTM$FrG,SynNucTM$FrC), by = list(SynNucTM$Species,SynNucTM$Tm), FUN = mean)
names(AGG) = c('Species','FemaleMaturityDays','FrA','FrT','FrG','FrC')
nrow(AGG) # 188
############## T - negative
cor.test(log2(AGG$FemaleMaturityDays),AGG$FrA)
cor.test(log2(AGG$FemaleMaturityDays),AGG$FrT)
cor.test(log2(AGG$FemaleMaturityDays),AGG$FrG)
cor.test(log2(AGG$FemaleMaturityDays),AGG$FrC)
AGG = aggregate(list(SynNucLM$FrA,SynNucLM$FrT,SynNucLM$FrG,SynNucLM$FrC), by = list(SynNucLM$Species,SynNucLM$Lm), FUN = mean)
names(AGG) = c('Species','FemaleMaturityDays','FrA','FrT','FrG','FrC')
nrow(AGG) # 192
############## T - negative, A - positive
cor.test(log2(AGG$FemaleMaturityDays),AGG$FrA)
cor.test(log2(AGG$FemaleMaturityDays),AGG$FrT)
cor.test(log2(AGG$FemaleMaturityDays),AGG$FrG)
cor.test(log2(AGG$FemaleMaturityDays),AGG$FrC)
############# mult reg Tm
AGG = aggregate(list(SynNucTM$FrA,SynNucTM$FrT,SynNucTM$FrG,SynNucTM$FrC), by = list(SynNucTM$Species,SynNucTM$Tm), FUN = mean)
names(AGG) = c('Species','FemaleMaturityDays','FrA','FrT','FrG','FrC')
AGGTEMPE = merge(AGG,TEMPE)
names(AGGTEMPE) = c('Species','Maturity','FrA','FrT','FrG','FrC', "Temperature")
nrow(AGGTEMPE)
AGG = aggregate(list(SynNucTM$FrA,SynNucTM$FrT,SynNucTM$FrG,SynNucTM$FrC), by = list(SynNucTM$Species,SynNucTM$Tm), FUN = mean)
names(AGG) = c('Species','FemaleMaturityDays','FrA','FrT','FrG','FrC')
nrow(AGG) # 188
############# mult reg Tm
AGG = aggregate(list(SynNucTM$FrA,SynNucTM$FrT,SynNucTM$FrG,SynNucTM$FrC), by = list(SynNucTM$Species,SynNucTM$Tm), FUN = mean)
names(AGG) = c('Species','FemaleMaturityDays','FrA','FrT','FrG','FrC')
AGGTEMPE = merge(AGG,TEMPE)
names(AGGTEMPE) = c('Species','Maturity','FrA','FrT','FrG','FrC', "Temperature")
nrow(AGGTEMPE)
ltest = lm(formula = FrT ~ scale(Temperature)*scale(Maturity), data = AGGTEMPE)
summary(ltest)
ltest = lm(formula = FrT ~ scale(Temperature)+scale(Maturity), data = AGGTEMPE)
summary(ltest)
ltest = lm(formula = scale(FrT) ~ scale(Temperature) + scale(Maturity), data = AGGTEMPE)
summary(ltest)
ltest = lm(formula = scale(FrT) ~ 0 + scale(Temperature) + scale(Maturity), data = AGGTEMPE)
summary(ltest)
ltest = lm(formula = scale(FrT) ~ 0 + scale(Temperature), data = AGGTEMPE)
summary(ltest)
############# mult reg Lm
AGG = aggregate(list(SynNucLM$FrA,SynNucLM$FrT,SynNucLM$FrG,SynNucLM$FrC), by = list(SynNucLM$Species,SynNucLM$Lm), FUN = mean)
names(AGG) = c('Species','FemaleMaturityDays','FrA','FrT','FrG','FrC')
AGGTEMPE = merge(AGG,TEMPE)
names(AGGTEMPE) = c('Species','Maturity','FrA','FrT','FrG','FrC', "Temperature")
nrow(AGGTEMPE)
ltest = lm(formula = FrT ~ scale(Temperature)*scale(Maturity), data = AGGTEMPE)
summary(ltest)
ltest = lm(formula = FrT ~ scale(Temperature)+scale(Maturity), data = AGGTEMPE)
summary(ltest)
ltest = lm(formula = scale(FrT) ~ scale(Temperature) + scale(Maturity), data = AGGTEMPE)
summary(ltest)
ltest = lm(formula = scale(FrT) ~ 0 + scale(Temperature) + scale(Maturity), data = AGGTEMPE)
summary(ltest)
ltest = lm(formula = scale(FrT) ~ 0 + scale(Temperature), data = AGGTEMPE)
summary(ltest)
rm(list=ls(all=TRUE))
MUT = read.table('../../Body/3Results/VertebratePolymorphisms.MutSpecData.OnlyFourFoldDegAllGenes.txt', header = TRUE)
class(MUT$A_T)
class(MUT$Species)
######Temperature
TEMPE = read.table('../../Body/1Raw/FishBaseTemperature.txt', header = TRUE)
class(TEMPE$Temperature)
class(TEMPE$Species)
averageTEMPE = aggregate(Temperature ~ ., median, data = TEMPE)
######MATURITY
MATULM = read.table('../../Body/1Raw/FishBaseMaturity_Lm.txt',  header = TRUE, stringsAsFactors=FALSE)
MATUTM = read.table('../../Body/1Raw/FishBaseMaturity_Tm.txt',  header = TRUE)
class(MATULM$Lm)
MATULM$Lm = as.numeric(MATULM$Lm)
MATUTM = aggregate(Tm ~ ., median, data = MATUTM)
MATULM = aggregate(Lm ~ ., median, data = MATULM)
##multiple reg Tm
TemperMut = merge(MUT,averageTEMPE)
allparameters=merge(TemperMut, MATUTM)
ltest = lm(formula = A_G ~ scale(Temperature)*scale(Tm), data = allparameters)
summary(ltest)
ltest = lm(formula = Temperature ~ scale(T_C)*scale(A_G), data = allparameters)
summary(ltest)
ltest = lm(formula = Temperature ~ scale(T_C)+scale(A_G), data = allparameters)
summary(ltest)
rm(list=ls(all=TRUE))
##########POLYMORHIC MUTSPEC
MUT = read.table('../../Body/3Results/VertebratePolymorphisms.MutSpecData.OnlyFourFoldDegAllGenes.txt', header = TRUE)
class(MUT$A_T)
class(MUT$Species)
##########TEMPERATURE
TEMPE = read.table('../../Body/1Raw/FishBaseTemperature.txt', header = TRUE)
class(TEMPE$Temperature)
class(TEMPE$Species)
TEMPE = aggregate(Temperature ~ ., median, data = TEMPE)
TemperMut = merge(MUT, TEMPE)
cor.test(TemperMut$A_T,TemperMut$Temperature, method = 'spearman')   #rho
cor.test(TemperMut$A_G,TemperMut$Temperature, method = 'spearman')   #rho     -0.3581037 p-value = 3.321e-05
cor.test(TemperMut$A_C,TemperMut$Temperature, method = 'spearman')   #rho
cor.test(TemperMut$T_A,TemperMut$Temperature, method = 'spearman')   #rho
cor.test(TemperMut$T_G,TemperMut$Temperature, method = 'spearman')   #rho
cor.test(TemperMut$T_C,TemperMut$Temperature, method = 'spearman')   #rho     0.2648037 p-value = 0.002522
cor.test(TemperMut$G_A,TemperMut$Temperature, method = 'spearman')   #rho
cor.test(TemperMut$G_T,TemperMut$Temperature, method = 'spearman')   #rho
cor.test(TemperMut$G_C,TemperMut$Temperature, method = 'spearman')   #rho
cor.test(TemperMut$C_A,TemperMut$Temperature, method = 'spearman')   #rho
cor.test(TemperMut$C_T,TemperMut$Temperature, method = 'spearman')   #rho
cor.test(TemperMut$C_G,TemperMut$Temperature, method = 'spearman')   #rho
####### after normalization
TemperMut$T_C.NormalOnlyByT = TemperMut$T_C / (TemperMut$T_C  + TemperMut$T_A + TemperMut$T_G )
TemperMut$A_G.NormalOnlyByT = TemperMut$A_G / (TemperMut$A_C  + TemperMut$A_T + TemperMut$A_G )
cor.test(TemperMut$T_C.NormalOnlyByT,TemperMut$Temperature, method = 'spearman')
cor.test(TemperMut$A_G.NormalOnlyByT,TemperMut$Temperature, method = 'spearman')
####### after normalization
TemperMut$T_C.NormalOnlyByT = TemperMut$T_C / (TemperMut$T_C  + TemperMut$T_A + TemperMut$T_G )
TemperMut$A_G.NormalOnlyByA = TemperMut$A_G / (TemperMut$A_C  + TemperMut$A_T + TemperMut$A_G )
cor.test(TemperMut$T_C.NormalOnlyByT,TemperMut$Temperature)
cor.test(TemperMut$A_G.NormalOnlyByA,TemperMut$Temperature)
cor.test(TemperMut$A_G,TemperMut$Temperature)   #rho     -0.3581037 p-value = 3.321e-05
cor.test(TemperMut$T_C,TemperMut$Temperature)   #rho     0.2648037 p-value = 0.002522
ANAGEMATLM = merge(MATULM, AnAge)
rm(list=ls(all=TRUE))
##########POLYMORHIC MUTSPEC
MUT = read.table('../../Body/3Results/VertebratePolymorphisms.MutSpecData.OnlyFourFoldDegAllGenes.txt', header = TRUE)
class(MUT$A_T)
class(MUT$Species)
##########TEMPERATURE
TEMPE = read.table('../../Body/1Raw/FishBaseTemperature.txt', header = TRUE)
class(TEMPE$Temperature)
class(TEMPE$Species)
TEMPE = aggregate(Temperature ~ ., median, data = TEMPE)
TemperMut = merge(MUT, TEMPE)
cor.test(TemperMut$A_T,TemperMut$Temperature, method = 'spearman')   #rho
cor.test(TemperMut$A_G,TemperMut$Temperature)   #rho     -0.3581037 p-value = 3.321e-05
cor.test(TemperMut$A_C,TemperMut$Temperature, method = 'spearman')   #rho
cor.test(TemperMut$T_A,TemperMut$Temperature, method = 'spearman')   #rho
cor.test(TemperMut$T_G,TemperMut$Temperature, method = 'spearman')   #rho
cor.test(TemperMut$T_C,TemperMut$Temperature)   #rho     0.2648037 p-value = 0.002522
cor.test(TemperMut$G_A,TemperMut$Temperature, method = 'spearman')   #rho
cor.test(TemperMut$G_T,TemperMut$Temperature, method = 'spearman')   #rho
cor.test(TemperMut$G_C,TemperMut$Temperature, method = 'spearman')   #rho
cor.test(TemperMut$C_A,TemperMut$Temperature, method = 'spearman')   #rho
cor.test(TemperMut$C_T,TemperMut$Temperature, method = 'spearman')   #rho
cor.test(TemperMut$C_G,TemperMut$Temperature, method = 'spearman')   #rho
####### after normalization
TemperMut$T_C.NormalOnlyByT = TemperMut$T_C / (TemperMut$T_C  + TemperMut$T_A + TemperMut$T_G )
TemperMut$A_G.NormalOnlyByA = TemperMut$A_G / (TemperMut$A_C  + TemperMut$A_T + TemperMut$A_G )
cor.test(TemperMut$T_C.NormalOnlyByT,TemperMut$Temperature)
cor.test(TemperMut$A_G.NormalOnlyByA,TemperMut$Temperature)
library("ggpubr")
ggscatter(TemperMut, x = "Temperature", y = "A_G",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman",
xlab = "Temperature", ylab = "A_G")
##########MATURITY Lm (mean length at first maturity in  )  and Tm (Mean or median age at first maturity)
MATULM = read.table('../../Body/1Raw/FishBaseMaturity_Lm.txt',  header = TRUE, stringsAsFactors=FALSE)
MATUTM = read.table('../../Body/1Raw/FishBaseMaturity_Tm.txt',  header = TRUE)
class(MATULM$Lm)
MATULM$Lm = as.numeric(MATULM$Lm)
MATUTM = aggregate(Tm ~ ., median, data = MATUTM)
MATULM = aggregate(Lm ~ ., median, data = MATULM)
MATULmmut = merge(MUT,MATULM)
MATUTmmut = merge(MUT,MATUTM)
cor.test(MATULmmut$A_T,MATULmmut$Lm, method = 'spearman')   #rho
cor.test(MATULmmut$A_G,MATULmmut$Lm, method = 'spearman')   #rho
cor.test(MATULmmut$A_C,MATULmmut$Lm, method = 'spearman')   #rho
cor.test(MATULmmut$T_A,MATULmmut$Lm, method = 'spearman')   #rho
cor.test(MATULmmut$T_G,MATULmmut$Lm, method = 'spearman')   #rho
cor.test(MATULmmut$T_C,MATULmmut$Lm, method = 'spearman')   #rho
cor.test(MATULmmut$G_A,MATULmmut$Lm, method = 'spearman')   #rho
cor.test(MATULmmut$G_T,MATULmmut$Lm, method = 'spearman')   #rho
cor.test(MATULmmut$G_C,MATULmmut$Lm, method = 'spearman')   #rho  -0.266859         p-value = 0.008235
cor.test(MATULmmut$C_A,MATULmmut$Lm, method = 'spearman')   #rho
cor.test(MATULmmut$C_T,MATULmmut$Lm, method = 'spearman')   #rho
cor.test(MATULmmut$C_G,MATULmmut$Lm, method = 'spearman')   #rho
cor.test(MATUTmmut$A_T,MATUTmmut$Tm, method = 'spearman')   #rho
cor.test(MATUTmmut$A_G,MATUTmmut$Tm, method = 'spearman')   #rho
cor.test(MATUTmmut$A_C,MATUTmmut$Tm, method = 'spearman')   #rho
cor.test(MATUTmmut$T_A,MATUTmmut$Tm, method = 'spearman')   #rho
cor.test(MATUTmmut$T_G,MATUTmmut$Tm, method = 'spearman')   #rho
cor.test(MATUTmmut$T_C,MATUTmmut$Tm, method = 'spearman')   #rho
cor.test(MATUTmmut$G_A,MATUTmmut$Tm, method = 'spearman')   #rho
cor.test(MATUTmmut$G_T,MATUTmmut$Tm, method = 'spearman')   #rho
cor.test(MATUTmmut$G_C,MATUTmmut$Tm, method = 'spearman')   #rho  -0.2219755     p-value = 0.0222
cor.test(MATUTmmut$C_A,MATUTmmut$Tm, method = 'spearman')   #rho
cor.test(MATUTmmut$C_T,MATUTmmut$Tm, method = 'spearman')   #rho
cor.test(MATUTmmut$C_G,MATUTmmut$Tm, method = 'spearman')   #rho
#########ANAGE Maximum.longevity
AnAge = read.table('../../Body/1Raw/anage_data.txt', sep = '\t', header = TRUE)
AnAge$Species = paste(AnAge$Genus,AnAge$Species,sep = '_')
AnAge = AnAge[AnAge$Class == 'Actinopterygii',]
AnAgeMut = merge(MUT,AnAge) # 110
cor.test(AnAgeMut$A_T,AnAgeMut$Maximum.longevity..yrs., method = 'spearman')
cor.test(AnAgeMut$A_G,AnAgeMut$Maximum.longevity..yrs., method = 'spearman')
cor.test(AnAgeMut$A_C,AnAgeMut$Maximum.longevity..yrs., method = 'spearman')
cor.test(AnAgeMut$T_A,AnAgeMut$Maximum.longevity..yrs., method = 'spearman')
cor.test(AnAgeMut$T_G,AnAgeMut$Maximum.longevity..yrs., method = 'spearman')
cor.test(AnAgeMut$T_C,AnAgeMut$Maximum.longevity..yrs., method = 'spearman')
cor.test(AnAgeMut$G_A,AnAgeMut$Maximum.longevity..yrs., method = 'spearman')
cor.test(AnAgeMut$G_T,AnAgeMut$Maximum.longevity..yrs., method = 'spearman')
cor.test(AnAgeMut$G_C,AnAgeMut$Maximum.longevity..yrs., method = 'spearman')
cor.test(AnAgeMut$C_A,AnAgeMut$Maximum.longevity..yrs., method = 'spearman')
cor.test(AnAgeMut$C_T,AnAgeMut$Maximum.longevity..yrs., method = 'spearman')
cor.test(AnAgeMut$C_G,AnAgeMut$Maximum.longevity..yrs., method = 'spearman')
MATULMTM = merge(MATULM, MATUTM)
cor.test(MATULMTM$Lm,MATULMTM$Tm, method = 'spearman')
ggscatter(MATULMTM, x = "Lm", y = "Tm",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman",
xlab = "Lm", ylab = "Tm")
TEMPMATULM = merge(MATULM, TEMPE)
cor.test(TEMPMATULM$Lm,TEMPMATULM$Temperature, method = 'spearman')
ggscatter(TEMPMATULM, x = "Lm", y = "Temperature",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman",
xlab = "Lm", ylab = "Temperature")
TEMPMATUTM = merge(MATUTM, TEMPE)
cor.test(TEMPMATUTM$Tm,TEMPMATUTM$Temperature, method = 'spearman')
ggscatter(TEMPMATUTM, x = "Tm", y = "Temperature",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman",
xlab = "Tm", ylab = "Temperature")
ANAGEMATULM = merge(MATULM, AnAge)
cor.test(ANAGEMATULM$Lm,ANAGEMATULM$Maximum.longevity..yrs., method = 'spearman')
ggscatter(ANAGEMATULM, x = "Lm", y = "Maximum.longevity..yrs.",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman",
xlab = "Lm", ylab = "Maximum.longevity..yrs.")
ANAGETEMP = merge(TEMPE, AnAge)
cor.test(ANAGETEMP$Temperature,ANAGETEMP$Maximum.longevity..yrs., method = 'spearman')
ggscatter(ANAGETEMP, x = "Temperature", y = "Maximum.longevity..yrs.",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman",
xlab = "Temperature", ylab = "Maximum.longevity..yrs.")
ANAGEMATLM = merge(MATULM, AnAge)
cor.test(ANAGEMATLM$Lm,ANAGEMATLM$Maximum.longevity..yrs., method = 'spearman')
ANAGEMATTM = merge(MATUTM, AnAge)
cor.test(ANAGEMATTM$Tm,ANAGEMATTM$Maximum.longevity..yrs., method = 'spearman')
ggscatter(ANAGEMATTM, x = "Tm", y = "Maximum.longevity..yrs.",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman",
xlab = "Tm", ylab = "Maximum.longevity..yrs.")
ggscatter(ANAGEMATLM, x = "Lm", y = "Maximum.longevity..yrs.",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman",
xlab = "Lm", ylab = "Maximum.longevity..yrs.")
ANAGEMATLM = merge(MATULM, AnAge)
