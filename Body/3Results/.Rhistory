###################################
rm(list=ls(all=TRUE))
setwd("../../Body/3Results")
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) {file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")}
# SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE)
names(SynNuc)
SynNuc = SynNuc[SynNuc$Gene != 'ND6',]
SynNuc = aggregate(list(SynNuc$NeutralA,SynNuc$NeutralT,SynNuc$NeutralG,SynNuc$NeutralC), by = list(SynNuc$Species), FUN = sum)
names(SynNuc) = c('Species','NeutralA','NeutralT','NeutralG','NeutralC')
SynNuc$FrA = SynNuc$NeutralA / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrT = SynNuc$NeutralT / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrG = SynNuc$NeutralG / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrC = SynNuc$NeutralC / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
### merge with temperature
TEMPE = read.table('../../Body/1Raw/FishBaseTemperature.txt', header = TRUE)
TEMPE = aggregate(Temperature ~ ., median, data = TEMPE); summary(TEMPE$Temperature)
SynNuc = merge(TEMPE,SynNuc, by = 'Species', all = TRUE); summary(SynNuc$Temperature)
MATUTM = read.table('../../Body/1Raw/FishBaseMaturity_Tm.txt',  header = TRUE)
MATUTM = aggregate(Tm ~ ., median, data = MATUTM)
SynNuc = merge(MATUTM,SynNuc, by = 'Species', all = TRUE); nrow(SynNuc)
SynNuc$CtoTSkew = (SynNuc$FrC-SynNuc$FrT)/(SynNuc$FrC+SynNuc$FrT); summary(SynNuc$CtoTSkew)
SynNuc$GtoASkew = (SynNuc$FrG-SynNuc$FrA)/(SynNuc$FrG+SynNuc$FrA); summary(SynNuc$GtoASkew)
### ANALYSES:
summary(SynNuc$Temperature)
summary(SynNuc$Tm)
summary(lm(FrT ~ scale(Temperature)+scale(Tm), data = SynNuc))
summary(lm(FrT ~ log2(Temperature + 2)*log2(Tm), data = SynNuc))  # keep it for presentation!!!
summary(lm(FrG ~ log2(Temperature + 2)+log2(Tm), data = SynNuc)) # strong
summary(lm(FrA ~ log2(Temperature + 2)+log2(Tm), data = SynNuc)) # strong
summary(lm(GtoASkew ~ log2(Temperature + 2)+log2(Tm), data = SynNuc)) # the highest R^2 = 0.17
summary(lm(CtoTSkew ~ log2(Temperature + 2)+log2(Tm), data = SynNuc))
summary(lm(FrT ~ scale(Temperature)+scale(Tm), data = SynNuc))
summary(lm(FrT ~ log2(Temperature + 2)*log2(Tm), data = SynNuc))  # keep it for presentation!!!
summary(lm(FrG ~ log2(Temperature + 2)+log2(Tm), data = SynNuc)) # strong
summary(lm(FrA ~ log2(Temperature + 2)+log2(Tm), data = SynNuc)) # strong
summary(lm(GtoASkew ~ log2(Temperature + 2)+log2(Tm), data = SynNuc)) # the highest R^2 = 0.17
summary(lm(CtoTSkew ~ log2(Temperature + 2)+log2(Tm), data = SynNuc))
rm(list=ls(all=TRUE))
##########TEMPERATURE
TEMPE = read.table('../../Body/1Raw/FishBaseTemperature.txt', header = TRUE)
class(TEMPE$Temperature)
library("ggpubr")
###########Taxonomy###################################################################
Taxa = read.table("../../Body/1Raw/TaxaFromKostya.Names.stat", sep = '\t',header = FALSE)
Taxa$Species = gsub(";.*",'',Taxa$V1);
for (i in (1:nrow(Taxa)))  {Taxa$Species[i] = paste(unlist(strsplit(as.character(Taxa$Species[i]),split = ' '))[1],unlist(strsplit(as.character(Taxa$Species[i]),split = ' '))[2], sep = '_')}
Taxa$Class = gsub(";Chordata;.*",'',Taxa$V1); Taxa$Class = gsub(".*;",'',Taxa$Class); table(Taxa$Class)
Taxa$Class = gsub('Actinopteri','Actinopterygii',Taxa$Class)
Taxa$Class = gsub("Testudines|Squamata|Crocodylia|Sphenodontia",'Reptilia',Taxa$Class)
length(unique(Taxa$Species)) # 1708
table(Taxa$Class)
Taxa = Taxa[,-1]
TaxaMore = read.table("../../Body/1Raw/TaxaFromKostya.2NeedTaxa.tax.txt", sep = '\t',header = FALSE)
TaxaMore$Species = ''
for (i in (1:nrow(TaxaMore)))
{TaxaMore$Species[i] = paste(unlist(strsplit(as.character(TaxaMore$V1[i]),split = ' '))[1],unlist(strsplit(as.character(TaxaMore$V1[i]),split = ' '))[2], sep = '_')}
TaxaMore$Class = gsub("; Chordata;.*",'',TaxaMore$V2);
TaxaMore$Class = gsub(".*; ",'',TaxaMore$Class);
TaxaMore$Class = gsub('Actinopteri','Actinopterygii',TaxaMore$Class)
TaxaMore$Class = gsub("Testudines|Squamata|Crocodylia",'Reptilia',TaxaMore$Class)
table(TaxaMore$Class)
TaxaMore = TaxaMore[,-c(1,2)]
Taxa = rbind(Taxa,TaxaMore); Taxa = unique(Taxa)
###########################MUT spectrum in Actinoptery##################################
MUT = read.table('../../Body/3Results/VertebratePolymorphisms.MutSpecData.OnlyFourFoldDegAllGenes.txt', header = TRUE)
MUTACTINOPTERITAXAFROMK = merge(MUT, Taxa)
MUTACTINOPTERITAXAFROMK = MUTACTINOPTERITAXAFROMK[MUTACTINOPTERITAXAFROMK$Class == "Actinopterygii",]
MUTACTINOPTERITAXAFROMK=MUTACTINOPTERITAXAFROMK[,-1]
MUTACTINOPTERITAXAFROMK=MUTACTINOPTERITAXAFROMK[,-13]
temp = data.frame(t(MUTACTINOPTERITAXAFROMK))
a=c()
for(i in 1:ncol(temp)){
b = data.frame(temp[i], rownames(temp))
colnames(b)=c("Freq", "Sub")
a = rbind(a, b)
}
ggbarplot(a, x = "Sub", y = "Freq", fill = "Sub", color = "Sub",
palette = c("#bdbdbd", "#876363", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#1b7c98", "#b83e3e", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#2a836f", "#bdbdbd"),
xlab="Substitution types", ylab="Normalised frequencies", add = "mean_se")
ggbarplot(a, x = "Sub", y = "Freq", fill = "Sub", color = "Sub",
palette = c("#bdbdbd", "#805d5d ", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#008c9c", "#853535", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#00cc96", "#bdbdbd"),
xlab="Substitution types", ylab="Normalised frequencies", add = "mean_se")
ggbarplot(a, x = "Sub", y = "Freq", fill = "Sub", color = "Sub",
palette = c("#bdbdbd", "#805d5d", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#008c9c", "#853535", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#00cc96", "#bdbdbd"),
xlab="Substitution types", ylab="Normalised frequencies", add = "mean_se")
ggbarplot(a, x = "Sub", y = "Freq", fill = "Sub", color = "Sub",
palette = c("#bdbdbd", "#805d5d", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#008c9c", "#912727", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#00cc96", "#bdbdbd"),
xlab="Substitution types", ylab="Normalised frequencies", add = "mean_se")
ggbarplot(a, x = "Sub", y = "Freq", fill = "Sub", color = "Sub",
palette = c("#bdbdbd", "#805d5d", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#008c9c", "#912727", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#069972", "#bdbdbd"),
xlab="Substitution types", ylab="Normalised frequencies", add = "mean_se")
ggbarplot(a, x = "Sub", y = "Freq", fill = "Sub", color = "Sub",
palette = c("#bdbdbd", "#73514f", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#008c9c", "#9c3d37", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#069972", "#bdbdbd"),
xlab="Substitution types", ylab="Normalised frequencies", add = "mean_se")
ggbarplot(a, x = "Sub", y = "Freq", fill = "Sub", color = "Sub",
palette = c("#bdbdbd", "#73514f", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#055088", "#9c3d37", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#036a5b", "#bdbdbd"),
xlab="Substitution types", ylab="Normalised frequencies", add = "mean_se")
pdf("../../Body/4Figures/VertebratePolymorphisms.MutSpecComparisons.Analyses.Ecology.Actinopterygii.FishBaseData.FIGURE1A.pdf")
ggbarplot(a, x = "Sub", y = "Freq", fill = "Sub", color = "Sub",
palette = c("#bdbdbd", "#73514f", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#055088", "#9c3d37", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#036a5b", "#bdbdbd"),
xlab="Substitution types", ylab="Normalised frequencies", add = "mean_se")
dev.off()
##########TEMPERATURE
TEMPE = read.table('../../Body/1Raw/FishBaseTemperature.txt', header = TRUE)
class(TEMPE$Temperature)
class(TEMPE$Species)
TEMPE = aggregate(Temperature ~ ., median, data = TEMPE)
TemperMut = merge(MUT, TEMPE)
cor.test(TemperMut$A_T,TemperMut$Temperature, method = 'spearman')   #rho
cor.test(TemperMut$A_G,TemperMut$Temperature, method = 'spearman')   #rho     -0.3581037 p-value = 3.321e-05
cor.test(TemperMut$A_C,TemperMut$Temperature, method = 'spearman')   #rho
cor.test(TemperMut$T_A,TemperMut$Temperature, method = 'spearman')   #rho
cor.test(TemperMut$T_G,TemperMut$Temperature, method = 'spearman')   #rho
cor.test(TemperMut$T_C,TemperMut$Temperature, method = 'spearman')   #rho     0.2648037 p-value = 0.002522
cor.test(TemperMut$G_A,TemperMut$Temperature, method = 'spearman')   #rho
cor.test(TemperMut$G_T,TemperMut$Temperature, method = 'spearman')   #rho
cor.test(TemperMut$G_C,TemperMut$Temperature, method = 'spearman')   #rho
cor.test(TemperMut$C_A,TemperMut$Temperature, method = 'spearman')   #rho
cor.test(TemperMut$C_T,TemperMut$Temperature, method = 'spearman')   #rho
cor.test(TemperMut$C_G,TemperMut$Temperature, method = 'spearman')   #rho
pdf("../../Body/4Figures/VertebratePolymorphisms.MutSpecComparisons.Analyses.Ecology.Actinopterygii.FishBaseData.FIGURE1B.pdf")
ggscatter(TemperMut, x = "Temperature", y = "T_C",
color = "#036a5b", # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
cor.coeff.args = list(method = "spearman", label.x = 3, label.sep = "\n"), xlab="Temperature, C", ylab="AH>GH")
ggscatter(TemperMut, x = "Temperature", y = "A_G",
color = "#73514f", # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
cor.coeff.args = list(method = "spearman", label.x = 3, label.sep = "\n"), xlab="Temperature, C", ylab="TH>CH")
dev.off()
##########MATURITY Lm (mean length at first maturity in  )  and Tm (Mean or median age at first maturity)
MATULM = read.table('../../Body/1Raw/FishBaseMaturity_Lm.txt',  header = TRUE, stringsAsFactors = FALSE)
MATUTM = read.table('../../Body/1Raw/FishBaseMaturity_Tm.txt',  header = TRUE)
class(MATULM$Lm)
class(MATUTM$Tm)
MATULM$Lm = as.numeric(MATULM$Lm)
table(MATULM$Lm)
MATULM = MATULM[!is.na(MATULM$Lm),]
MATUTM = aggregate(Tm ~ ., median, data = MATUTM)
MATULM = aggregate(Lm ~ ., median, data = MATULM)
MATULmmut = merge(MUT,MATULM)
MATUTmmut = merge(MUT,MATUTM)
cor.test(MATULmmut$A_T,MATULmmut$Lm, method = 'spearman')   #rho
cor.test(MATULmmut$A_G,MATULmmut$Lm, method = 'spearman')   #rho
cor.test(MATULmmut$A_C,MATULmmut$Lm, method = 'spearman')   #rho
cor.test(MATULmmut$T_A,MATULmmut$Lm, method = 'spearman')   #rho
cor.test(MATULmmut$T_G,MATULmmut$Lm, method = 'spearman')   #rho
cor.test(MATULmmut$T_C,MATULmmut$Lm, method = 'spearman')   #rho
cor.test(MATULmmut$G_A,MATULmmut$Lm, method = 'spearman')   #rho
cor.test(MATULmmut$G_T,MATULmmut$Lm, method = 'spearman')   #rho
cor.test(MATULmmut$G_C,MATULmmut$Lm, method = 'spearman')   #rho  -0.266859         p-value = 0.008235
cor.test(MATULmmut$C_A,MATULmmut$Lm, method = 'spearman')   #rho
cor.test(MATULmmut$C_T,MATULmmut$Lm, method = 'spearman')   #rho
cor.test(MATULmmut$C_G,MATULmmut$Lm, method = 'spearman')   #rho
cor.test(MATUTmmut$A_T,MATUTmmut$Tm, method = 'spearman')   #rho
cor.test(MATUTmmut$A_G,MATUTmmut$Tm, method = 'spearman')   #rho
cor.test(MATUTmmut$A_C,MATUTmmut$Tm, method = 'spearman')   #rho
cor.test(MATUTmmut$T_A,MATUTmmut$Tm, method = 'spearman')   #rho
cor.test(MATUTmmut$T_G,MATUTmmut$Tm, method = 'spearman')   #rho
cor.test(MATUTmmut$T_C,MATUTmmut$Tm, method = 'spearman')   #rho
cor.test(MATUTmmut$G_A,MATUTmmut$Tm, method = 'spearman')   #rho
cor.test(MATUTmmut$G_T,MATUTmmut$Tm, method = 'spearman')   #rho
cor.test(MATUTmmut$G_C,MATUTmmut$Tm, method = 'spearman')   #rho  -0.2219755     p-value = 0.0222
cor.test(MATUTmmut$C_A,MATUTmmut$Tm, method = 'spearman')   #rho
cor.test(MATUTmmut$C_T,MATUTmmut$Tm, method = 'spearman')   #rho
cor.test(MATUTmmut$C_G,MATUTmmut$Tm, method = 'spearman')   #rho
############Multiple models
allparameters=TemperMut#128 species
ltest = lm(formula = Temperature ~ scale(T_C) + scale(A_G), data = allparameters)
summary(ltest)
allparameters=merge(TemperMut, MATUTM)#65 species
ltest = lm(formula = Temperature ~ scale(T_C) + scale(A_G), data = allparameters)
summary(ltest)
### TC divided by AG rank corr and log2 models
allparameters=allparameters[allparameters$A_G != 0,]
allparameters=allparameters[allparameters$T_C != 0,]
allparameters$TCdivAG=allparameters$T_C/allparameters$A_G
cor.test(allparameters$TCdivAG,allparameters$Temperature, method = 'spearman')
ltest = lm(formula = log2(TCdivAG) ~ scale(Temperature) + scale(Tm), data = allparameters)
summary(ltest)
ltest = lm(formula = Temperature ~ scale(TCdivAG), data = allparameters)
summary(ltest)
### TC divided by AG rank corr and log2 models
allparameters=TemperMut#128 species
allparameters=allparameters[allparameters$A_G != 0,]
allparameters=allparameters[allparameters$T_C != 0,]
allparameters$TCdivAG=allparameters$T_C/allparameters$A_G
cor.test(allparameters$TCdivAG,allparameters$Temperature, method = 'spearman')
ltest = lm(formula = log2(TCdivAG) ~ scale(Temperature) + scale(Tm), data = allparameters)
summary(ltest)
ltest = lm(formula = Temperature ~ scale(TCdivAG), data = allparameters)
summary(ltest)
cor.test(allparameters$TCdivAG,allparameters$Temperature, method = 'spearman')
allparameters=merge(TemperMut, MATUTM)#65 species
allparameters=allparameters[allparameters$A_G != 0,]
allparameters=allparameters[allparameters$T_C != 0,]
allparameters$TCdivAG=allparameters$T_C/allparameters$A_G
cor.test(allparameters$TCdivAG,allparameters$Temperature, method = 'spearman')
############Multiple models
allparameters=TemperMut#128 species
ltest = lm(formula = Temperature ~ scale(T_C) + scale(A_G), data = allparameters)
summary(ltest)
allparameters=merge(TemperMut, MATUTM)#65 species
ltest = lm(formula = Temperature ~ scale(T_C) + scale(A_G), data = allparameters)
summary(ltest)
allparameters=allparameters[allparameters$A_G != 0,]
allparameters=allparameters[allparameters$T_C != 0,]
allparameters$TCdivAG=allparameters$T_C/allparameters$A_G
ltest = lm(formula = Temperature ~ scale(TCdivAG), data = allparameters)
summary(ltest)
### TC divided by AG rank corr and log2 models
allparameters=TemperMut#128 species
allparameters=allparameters[allparameters$A_G != 0,]
allparameters=allparameters[allparameters$T_C != 0,]
allparameters$TCdivAG=allparameters$T_C/allparameters$A_G
ltest = lm(formula = Temperature ~ scale(TCdivAG), data = allparameters)
summary(ltest)
############Multiple models
allparameters=TemperMut#128 species
allparameters=merge(TemperMut, MATUTM)
allparameters=allparameters[allparameters$A_G != 0,]
allparameters=allparameters[allparameters$T_C != 0,]
allparameters$TCdivAG=allparameters$T_C/allparameters$A_G
summary(lm(formula = Temperature ~ scale(TCdivAG), data = allparameters))
cor.test(MATUTmmut$G_C,MATUTmmut$Tm, method = 'spearman')   #rho  -0.2219755     p-value = 0.0222
allparameters=merge(TemperMut, MATUTM)#65 species
### TC divided by AG rank corr and log2 models
allparameters=TemperMut
### TC divided by AG rank corr and log2 models
allparameters=TemperMut
summary(lm(formula = Temperature ~ scale(TCdivAG), data = allparameters))
summary(lm(formula = T_C ~ scale(Temperature) + scale(Tm), data = allparameters))
allparameters=merge(TemperMut, MATUTM)#65 species
summary(lm(formula = T_C ~ scale(Temperature) + scale(Tm), data = allparameters))
allparameters=allparameters[allparameters$A_G != 0,]
allparameters=allparameters[allparameters$T_C != 0,]
summary(lm(formula = T_C ~ scale(Temperature) + scale(Tm), data = allparameters))
allparameters=merge(TemperMut, MATUTM)#65 species
summary(lm(formula = T_C ~ scale(Temperature) + scale(Tm), data = allparameters))
summary(lm(formula = T_C ~ scale(Temperature), data = allparameters))
summary(lm(formula = A_G ~ scale(Temperature), data = allparameters))
### TC divided by AG rank corr and log2 models
allparameters=TemperMut
allparameters=allparameters[allparameters$A_G != 0,]
allparameters=allparameters[allparameters$T_C != 0,]
allparameters$TCdivAG=allparameters$T_C/allparameters$A_G
cor.test(allparameters$TCdivAG,allparameters$Temperature, method = 'spearman')
summary(lm(formula = log2(TCdivAG) ~ scale(Temperature) + scale(Tm), data = allparameters))
summary(lm(formula = Temperature ~ scale(TCdivAG), data = allparameters))
### TC divided by AG rank corr and log2 models
allparameters=TemperMut
allparameters=allparameters[allparameters$A_G != 0,]
allparameters=allparameters[allparameters$T_C != 0,]
allparameters$TCdivAG=allparameters$T_C/allparameters$A_G
summary(lm(formula = log2(TCdivAG) ~ scale(Temperature), data = allparameters))
summary(lm(formula = log2(TCdivAG) ~ scale(Temperature) + scale(Tm), data = allparameters))
summary(lm(formula = Temperature ~ scale(TCdivAG), data = allparameters))
allparameters=merge(TemperMut, MATUTM)
allparameters=allparameters[allparameters$A_G != 0,]
allparameters=allparameters[allparameters$T_C != 0,]
allparameters$TCdivAG=allparameters$T_C/allparameters$A_G
summary(lm(formula = log2(TCdivAG) ~ scale(Temperature), data = allparameters))
allparameters=merge(TemperMut, MATUTM)
allparameters=allparameters[allparameters$A_G != 0,]
allparameters=allparameters[allparameters$T_C != 0,]
allparameters$TCdivAG=allparameters$T_C/allparameters$A_G
summary(lm(formula = log2(TCdivAG) ~ scale(Temperature) + scale(Tm), data = allparameters))
allparameters
### TC divided by AG rank corr and log2 models
allparameters=TemperMut
allparameters=allparameters[allparameters$A_G != 0,]
allparameters=allparameters[allparameters$T_C != 0,]
allparameters$TCdivAG=allparameters$T_C/allparameters$A_G
summary(lm(formula = log2(TCdivAG) ~ scale(Temperature), data = allparameters))
summary(lm(formula = Temperature ~ scale(TCdivAG), data = allparameters))
allparameters=merge(TemperMut, MATUTM)
allparameters=allparameters[allparameters$A_G != 0,]
allparameters=allparameters[allparameters$T_C != 0,]
allparameters$TCdivAG=allparameters$T_C/allparameters$A_G
summary(lm(formula = Temperature ~ scale(TCdivAG), data = allparameters))
summary(lm(formula = log2(TCdivAG) ~ scale(Temperature) + scale(Tm), data = allparameters))
#### Rank corr
cor.test(log2(SynNuc$Temperature),SynNuc$FrA, method = "spearman")
###################################
rm(list=ls(all=TRUE))
setwd("../../Body/3Results")
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) {file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")}
# SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE)
names(SynNuc)
SynNuc = SynNuc[SynNuc$Gene != 'ND6',]
SynNuc = aggregate(list(SynNuc$NeutralA,SynNuc$NeutralT,SynNuc$NeutralG,SynNuc$NeutralC), by = list(SynNuc$Species), FUN = sum)
names(SynNuc) = c('Species','NeutralA','NeutralT','NeutralG','NeutralC')
SynNuc$FrA = SynNuc$NeutralA / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrT = SynNuc$NeutralT / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrG = SynNuc$NeutralG / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrC = SynNuc$NeutralC / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
### merge with temperature
TEMPE = read.table('../../Body/1Raw/FishBaseTemperature.txt', header = TRUE)
TEMPE = aggregate(Temperature ~ ., median, data = TEMPE); summary(TEMPE$Temperature)
SynNuc = merge(TEMPE,SynNuc, by = 'Species', all = TRUE); summary(SynNuc$Temperature)
MATUTM = read.table('../../Body/1Raw/FishBaseMaturity_Tm.txt',  header = TRUE)
MATUTM = aggregate(Tm ~ ., median, data = MATUTM)
SynNuc = merge(MATUTM,SynNuc, by = 'Species', all = TRUE); nrow(SynNuc)
SynNuc$CtoTSkew = (SynNuc$FrC-SynNuc$FrT)/(SynNuc$FrC+SynNuc$FrT); summary(SynNuc$CtoTSkew)
SynNuc$GtoASkew = (SynNuc$FrG-SynNuc$FrA)/(SynNuc$FrG+SynNuc$FrA); summary(SynNuc$GtoASkew)
#### Rank corr
cor.test(log2(SynNuc$Temperature),SynNuc$FrA, method = "spearman")
cor.test(log2(SynNuc$Temperature),SynNuc$FrT, method = "spearman")
cor.test(log2(SynNuc$Temperature),SynNuc$FrG, method = "spearman")
cor.test(log2(SynNuc$Temperature),SynNuc$FrC, method = "spearman")
cor.test(log2(SynNuc$Temperature),SynNuc$FrC, method = "spearman")
library(ggpubr)
pdf("../../Body/4Figures/WholeGenomeAnalyses.NucContent.Analyses.Ecology.Actinopterygii.FishBaseData.FIGURE2A.pdf")
ggscatter(AGG, x = "Temperature", y = "FrT",
color = "#0918e6", # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
cor.coeff.args = list(method = "spearman", label.x = 3, label.sep = "\n"), xlab="Temperature, C", ylab="FrA")
ggscatter(AGG, x = "Temperature", y = "FrG",
color = "#009414", # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
cor.coeff.args = list(method = "spearman", label.x = 3, label.sep = "\n"), xlab="Temperature, C", ylab="FrC")
ggscatter(SynNuc, x = "Temperature", y = "FrT",
color = "#0918e6", # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
cor.coeff.args = list(method = "spearman", label.x = 3, label.sep = "\n"), xlab="Temperature, C", ylab="FrA")
ggscatter(SynNuc, x = "Temperature", y = "FrG",
color = "#009414", # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
cor.coeff.args = list(method = "spearman", label.x = 3, label.sep = "\n"), xlab="Temperature, C", ylab="FrC")
dev.off()
