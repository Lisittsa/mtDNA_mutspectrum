geom_bar(stat="identity", fill = ColA, color = 'white') +
geom_bar(aes(num, cCountlong), fill = ColG, color = 'white', stat = "identity") +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
ylim(-20, 20) +
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank()
# plot.margin = unit(rep(-2,4), "cm")     # This remove unnecessary margin around plot
) +
# This makes the coordinate polar instead of cartesian.
coord_polar(start = 3*pi/4, direction = -1) +
scale_fill_discrete(name = "Nucleotide", labels = c("G", "A"))
p + ggtitle('Balaena mysticetus, 18980 days')
dev.off()
rm(list=ls(all=TRUE))
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip", exdir = "../../Body/3Results/")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")){ file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")}
View(SynNuc)
# SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE)
names(SynNuc)
VecOfTaxa = unique(SynNuc$Class)
VecOfTaxa
table(SynNuc$Class)/13
View(SynNuc)
table(SynNuc$Class)/13
table(SynNuc$Class)
names(SynNuc)
############ AnAge
AA = read.table("../../Body/1Raw/anage_data.txt", header = TRUE, sep = '\t')
AA$Species = paste(AA$Genus,AA$Species,sep = '_')
View(AA)
View(SynNuc)
View(AA)
View(AA)
Alldata =  merge(SynNuc, AA, by = 'Species')
View(Alldata)
View(Alldata)
names(Alldata)
table(Alldata$Class.x)
table(Alldata$Class.y)
Mammalia = Alldata[Alldata$Class.y == "Mammalia",]
table(Mammalia)
table(Mammalia$Order)
names(Alldata)
table(Mammalia$Phylum)
names(Mammalia$Order)
table(Mammalia$Order)
Marsupials = Mammalia[Mammalia$Order %in% vec_of_Marsupials_orders,]
vec_of_Marsupials_orders = c("Dasyuromorphia", 'Didelphimorphia', "Diprotodontia", "Microbiotheria", "Notoryctemorphia", "Paucituberculata", "Peramelemorphia")
Marsupials = Mammalia[Mammalia$Order %in% vec_of_Marsupials_orders,]
table(Marsupials$Order)
Marsupials
View(Marsupials)
names(Marsupials)
table(Marsupials$Order)
rm(list=ls(all=TRUE))
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip", exdir = "../../Body/3Results/")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.zip", exdir = "../../Body/3Results/")
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.zip")
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.rar")
rm(list=ls(all=TRUE))
############ Syn mut
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
############ Syn mut
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")){file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")}
names(SynNuc)
############ AnAge
AA = read.table("../../Body/1Raw/anage_data.txt", header = TRUE, sep = '\t')
AA$Species = paste(AA$Genus,AA$Species,sep = '_')
Alldata =  merge(SynNuc, AA, by = 'Species')
names(Alldata)
Mammalia = Alldata[Alldata$Class.y == "Mammalia",]
vec_of_Marsupials_orders = c("Dasyuromorphia", 'Didelphimorphia', "Diprotodontia", "Microbiotheria", "Notoryctemorphia", "Paucituberculata", "Peramelemorphia")
Marsupials = Mammalia[Mammalia$Order %in% vec_of_Marsupials_orders,]
table(Marsupials$Order)
Monotremata = Mammalia[Mammalia$Order == "Monotremata",]
Monotremata
table(Monotremata$Order)
for (i in 1:nrows(Mammalia)){
if (Mammalia$Order[i] %in% vec_of_Marsupials_orders){
Mammalia$Subdivision[i] = "Marsupials"
}else{
Mammalia$Subdivision[i] = "nonMarsupials"
}
}
for (i in 1:nrow(Mammalia)){
if (Mammalia$Order[i] %in% vec_of_Marsupials_orders){
Mammalia$Subdivision[i] = "Marsupials"
}else{
Mammalia$Subdivision[i] = "nonMarsupials"
}
}
names(Mammalia)
table(Mammalia$Subdivision)
for (i in 1:nrow(Mammalia)){
if (Mammalia$Subdivision[i] == "nonMarsupials"){
if (Mammalia$Order[i] == "Monotremata"){
Mammalia$Subdivision[i] = "Monotremata"
}else{
Mammalia$Subdivision[i] = "Placentals"
}
}
}
table(Mammalia$Subdivision)
library(ggpubr)
ggboxplot(Mammalia, "Subdivision", "NeutralA",
fill = "Subdivision", palette =c("#00AFBB", "#E7B800", "#FC4E07"))
ggboxplot(Mammalia, "Subdivision", "NeutralC",
fill = "Subdivision", palette =c("#00AFBB", "#E7B800", "#FC4E07"))
ggboxplot(Mammalia, "Subdivision", "NeutralT",
fill = "Subdivision", palette =c("#00AFBB", "#E7B800", "#FC4E07"))
ggboxplot(Mammalia, "Subdivision", "NeutralC",
fill = "Subdivision", palette =c("#00AFBB", "#E7B800", "#FC4E07"))
ggboxplot(Mammalia, "Subdivision", "Maximum.longevity..yrs.",
fill = "Subdivision", palette =c("#00AFBB", "#E7B800", "#FC4E07"))
ggboxplot(Mammalia, "Subdivision", "Maximum.longevity..yrs.",
ggboxplot(Mammalia, "Subdivision", "Maximum.longevity..yrs.",
ggboxplot(Mammalia, "Subdivision", "Maximum.longevity..yrs.",
ggboxplot(Mammalia, "Subdivision", "Maximum.longevity..yrs.",
fill = "Subdivision", palette =c("#e34a33", "#fdbb84", "#fee8c8"))
ggboxplot(Mammalia, "Subdivision", "NeutralT",
fill = "Subdivision", palette =c("#2b8cbe", "#a6bddb", "#ece7f2"))
ggboxplot(Mammalia, "Subdivision", "NeutralC",
ggboxplot(Mammalia, "Subdivision", "NeutralC", fill = "Subdivision", palette =c("#2ca25f", "#99d8c9", "#e5f5f9"))
ggboxplot(Mammalia, "Subdivision", "Maximum.longevity..yrs.", fill = "Subdivision", palette =c("#e34a33", "#fdbb84", "#fee8c8"))
pdf("../../Body/4Figures/WholeGenomeAnalyses.NoOverlap.Placentals_Monotremata_Marsupials_A_G_Longevity.pdf", height = 20, width = 40)
ggboxplot(Mammalia, "Subdivision", "NeutralT",
fill = "Subdivision", palette =c("#2b8cbe", "#a6bddb", "#ece7f2"))
ggboxplot(Mammalia, "Subdivision", "NeutralC", fill = "Subdivision", palette =c("#2ca25f", "#99d8c9", "#e5f5f9"))
ggboxplot(Mammalia, "Subdivision", "Maximum.longevity..yrs.", fill = "Subdivision", palette =c("#e34a33", "#fdbb84", "#fee8c8"))
dev.off()
ggboxplot(Mammalia, "Subdivision", "Maximum.longevity..yrs.", fill = "Subdivision", palette =c("#e34a33", "#fdbb84", "#fee8c8"))
table(Mammalia$Subdivision)
Mammalia$
library(ggpubr)
Mammalia$Maximum.longevity..yrs.
Mammalia= Mammalia[!is.na(Mammalia$Maximum.longevity..yrs.),]
ggboxplot(Mammalia, "Subdivision", "Maximum.longevity..yrs.", fill = "Subdivision", palette =c("#e34a33", "#fdbb84", "#fee8c8"))
############ list of hibernating animals
Hib = read.table("../../Body/1Raw/HibernatingMammals.txt", sep = '\t')
ListOfHibSpecies = gsub(' ','_',Hib$V1); length(ListOfHibSpecies)
Eu = read.table("../../Body/1Raw/EdothermicFishes.txt", sep = '\t')
ListOfEuSpecies = gsub(' ','_',Eu$V1); length(ListOfEuSpecies)
View(Eu)
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) {file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")}
### make ND6 complementary:
NotND6 = SynNuc[SynNuc$Gene != 'ND6',]
NotND6$FrA = NotND6$NeutralA / (NotND6$NeutralA + NotND6$NeutralT + NotND6$NeutralG + NotND6$NeutralC)
NotND6$FrT = NotND6$NeutralT / (NotND6$NeutralA + NotND6$NeutralT + NotND6$NeutralG + NotND6$NeutralC)
NotND6$FrG = NotND6$NeutralG / (NotND6$NeutralA + NotND6$NeutralT + NotND6$NeutralG + NotND6$NeutralC)
NotND6$FrC = NotND6$NeutralC / (NotND6$NeutralA + NotND6$NeutralT + NotND6$NeutralG + NotND6$NeutralC)
ND6 = SynNuc[SynNuc$Gene == 'ND6',]
ND6$FrA = ND6$NeutralT / (ND6$NeutralA + ND6$NeutralT + ND6$NeutralG + ND6$NeutralC)
ND6$FrT = ND6$NeutralA / (ND6$NeutralA + ND6$NeutralT + ND6$NeutralG + ND6$NeutralC)
ND6$FrG = ND6$NeutralC / (ND6$NeutralA + ND6$NeutralT + ND6$NeutralG + ND6$NeutralC)
ND6$FrC = ND6$NeutralG / (ND6$NeutralA + ND6$NeutralT + ND6$NeutralG + ND6$NeutralC)
SynNuc = rbind(NotND6,ND6)
VecOfTaxa = unique(SynNuc$Class)
############# Hibernation in different classes
#### who is in our list? only mammals!
for (i in 1:length(VecOfTaxa)){ # i = 1
Species = unique(SynNuc[SynNuc$Class == VecOfTaxa[i],]$Species); length(Species)
L = length(intersect(Species,ListOfHibSpecies))
print(c(as.character(VecOfTaxa[i]), L))
}
########## compare nucleotide frequencies between hibernating and other mammals
SynNuc = SynNuc[SynNuc$Class == 'Mammalia',]; length(unique(SynNuc$Species))
AGG = aggregate(list(SynNuc$FrA,SynNuc$FrT,SynNuc$FrG,SynNuc$FrC), by = list(SynNuc$Species), FUN = mean)
names(AGG)=c('Species','FrA','FrT','FrG','FrC')
############# Longevity
AA = read.table("../../Body/1Raw/anage_data.txt", header = TRUE, sep = '\t')
AA$Species = paste(AA$Genus,AA$Species,sep = '_')
GL=read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", header = TRUE, sep = '\t')
GL$Species = gsub(" ", "_", GL$Scientific_name)
vec_of_Marsupials_orders = c("Dasyuromorphia", 'Didelphimorphia', "Diprotodontia", "Microbiotheria", "Notoryctemorphia", "Paucituberculata", "Peramelemorphia")
Vec_of_Monotremata_genus = c("Tachyglossus","Zaglossus", "Ornithorhynchus") #Ornithorhynchus
Vec_of_Marsupials_genus = AA[AA$Order %in% vec_of_Marsupials_orders,]$Genus
Vec_MonoHib = c(ListOfHibSpecies, GL[GL$Genus %in% Vec_of_Monotremata_genus,]$Species)
Vec_all = c(ListOfHibSpecies, GL[GL$Genus %in% Vec_of_Monotremata_genus,]$Species, GL[GL$Genus %in% Vec_of_Marsupials_genus,]$Species)
vec_of_NonWarm = c(GL[GL$Genus %in% Vec_of_Monotremata_genus,]$Species, GL[GL$Genus %in% Vec_of_Marsupials_genus,]$Species, "Heterocephalus_glaber")
GL$Hib = 1
GL[!GL$Species %in% ListOfHibSpecies,]$Hib = 0
GL$Mono= 1
GL[!GL$Genus %in% Vec_of_Monotremata_genus,]$Mono = 0
GL$Mars = 1
GL[!GL$Genus %in% Vec_of_Marsupials_genus,]$Mars = 0
GL$NonWarm = 1
GL[!GL$Species %in% vec_of_NonWarm,]$NonWarm = 0
vec_of_NonWarm = c(GL[GL$Genus %in% Vec_of_Monotremata_genus,]$Species, GL[GL$Genus %in% Vec_of_Marsupials_genus,]$Species, "Heterocephalus")
GL$NonWarm = 1
GL[!GL$Species %in% vec_of_NonWarm,]$NonWarm = 0
vec_of_NonWarm = c(GL[GL$Genus %in% Vec_of_Monotremata_genus,]$Species, GL[GL$Genus %in% Vec_of_Marsupials_genus,]$Species, "Heterocephalus_glaber")
GL$NonWarm = 1
GL[!GL$Species %in% vec_of_NonWarm,]$NonWarm = 0
GL$EuFish = 1
GL$[!GL$Species %in% ListOfEuSpecies,]$EuFish = 0
GL$EuFish = 1
GL$[!GL$Species %in% ListOfEuSpecies,]$EuFish = 0
GL[!GL$Species %in% ListOfEuSpecies,]$EuFish = 0
allparameters = merge(GL, AGG)
table(allparameters$EuFish)
allparameters = merge(AA, AGG)
allparameters = merge(GL, AGG)
GL$EuFish = NULL
View(GL)
allparameters = merge(allparameters, AA, all.x = TRUE)
table(allparameters$Hib)
table(allparameters$Mono)
table(allparameters$Mars)
table(allparameters$MonoHib)
table(allparameters$AllColder)
table(allparameters$NonPlac)
(allparameters$NonWarm)
table(allparameters$NonWarm)
table(allparameters$Mars)
table(allparameters$Mars)
View(allparameters)
EcologyMammaliaTable= c(allparameters$Kingdom, allparameters$Phylum, allparameters$Class, allparameters$Order, allparameters$Family,allparameters$Genus, allparameters$Species, allparameters$GenerationLength_d, allparameters$FrT, allparameters$Hib, allparameters$Mono, allparameters$Mars)
EcologyMammaliaTable
EcologyMammaliaTable= data.frame(allparameters$Kingdom, allparameters$Phylum, allparameters$Class, allparameters$Order, allparameters$Family,allparameters$Genus, allparameters$Species, allparameters$GenerationLength_d, allparameters$FrT, allparameters$Hib, allparameters$Mono, allparameters$Mars)
View(EcologyMammaliaTable)
EcologyMammaliaTable[is.na(EcologyMammaliaTable)]= "-"
EcologyMammaliaTable= data.frame(allparameters$Kingdom, allparameters$Phylum, allparameters$Class, allparameters$Order, allparameters$Family,allparameters$Genus, allparameters$Species, allparameters$GenerationLength_d, allparameters$FrT, allparameters$Hib, allparameters$Mono, allparameters$Mars)
EcologyMammaliaTable[is.na(EcologyMammaliaTable)]= "-"
EcologyMammaliaTable= data.frame(allparameters$Kingdom, allparameters$Phylum, allparameters$Class, allparameters$Order, allparameters$Family,allparameters$Genus, allparameters$Species, allparameters$GenerationLength_d, allparameters$FrT, allparameters$Hib, allparameters$Mono, allparameters$Mars)
getwd()
write.table(EcologyMammaliaTable, file="../../Body/2Derived/EcologyMammaliaTable.txt", quote = FALSE, row.names = FALSE)
TP=read.table("../../Body/1Raw/FishBaseTemperature.txt", header = TRUE, sep = '\t')
TP=read.table("../../Body/1Raw/FishBaseTemperature.txt", header = TRUE, sep = '\t')
TP = aggregate(Temperature ~ ., mean, data = TP)
View(TP)
TP=read.table("../../Body/1Raw/FishBaseTemperature.txt", header = TRUE, sep = '\t')
TP=read.table("../../Body/1Raw/FishBaseTemperature.txt", header = TRUE)
TP = aggregate(Temperature ~ ., mean, data = TP)
TP$EuFish = 1
TP[!TP$Species %in% ListOfEuSpecies,]$EuFish = 0
table(TP$EuFish)
TP[TP$EuFish == 1,]
allparameters = merge(TP, AGG)
table(allparameters$EuFish)
AGG = aggregate(list(SynNuc$FrA,SynNuc$FrT,SynNuc$FrG,SynNuc$FrC), by = list(SynNuc$Species), FUN = mean)
names(AGG)=c('Species','FrA','FrT','FrG','FrC')
########## compare nucleotide frequencies between hibernating and other mammals
SynNuc = SynNuc[SynNuc$Class == 'Mammalia',]; length(unique(SynNuc$Species))
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) {file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")}
### make ND6 complementary:
NotND6 = SynNuc[SynNuc$Gene != 'ND6',]
NotND6$FrA = NotND6$NeutralA / (NotND6$NeutralA + NotND6$NeutralT + NotND6$NeutralG + NotND6$NeutralC)
NotND6$FrT = NotND6$NeutralT / (NotND6$NeutralA + NotND6$NeutralT + NotND6$NeutralG + NotND6$NeutralC)
NotND6$FrG = NotND6$NeutralG / (NotND6$NeutralA + NotND6$NeutralT + NotND6$NeutralG + NotND6$NeutralC)
NotND6$FrC = NotND6$NeutralC / (NotND6$NeutralA + NotND6$NeutralT + NotND6$NeutralG + NotND6$NeutralC)
ND6 = SynNuc[SynNuc$Gene == 'ND6',]
ND6$FrA = ND6$NeutralT / (ND6$NeutralA + ND6$NeutralT + ND6$NeutralG + ND6$NeutralC)
ND6$FrT = ND6$NeutralA / (ND6$NeutralA + ND6$NeutralT + ND6$NeutralG + ND6$NeutralC)
ND6$FrG = ND6$NeutralC / (ND6$NeutralA + ND6$NeutralT + ND6$NeutralG + ND6$NeutralC)
ND6$FrC = ND6$NeutralG / (ND6$NeutralA + ND6$NeutralT + ND6$NeutralG + ND6$NeutralC)
SynNuc = rbind(NotND6,ND6)
VecOfTaxa = unique(SynNuc$Class)
############# Hibernation in different classes
#### who is in our list? only mammals!
for (i in 1:length(VecOfTaxa)){ # i = 1
Species = unique(SynNuc[SynNuc$Class == VecOfTaxa[i],]$Species); length(Species)
L = length(intersect(Species,ListOfHibSpecies))
print(c(as.character(VecOfTaxa[i]), L))
}
########## compare nucleotide frequencies between hibernating and other mammals
SynNuc = SynNuc[SynNuc$Class == 'Mammalia',]; length(unique(SynNuc$Species))
AGG = aggregate(list(SynNuc$FrA,SynNuc$FrT,SynNuc$FrG,SynNuc$FrC), by = list(SynNuc$Species), FUN = mean)
names(AGG)=c('Species','FrA','FrT','FrG','FrC')
allparameters = merge(TP, AGG)
View(AGG)
SynNuc = rbind(NotND6,ND6)
VecOfTaxa = unique(SynNuc$Class)
VecOfTaxa
########## compare nucleotide frequencies between hibernating and other mammals
#SynNuc = SynNuc[SynNuc$Class == 'Mammalia',]; length(unique(SynNuc$Species))
AGG = aggregate(list(SynNuc$FrA,SynNuc$FrT,SynNuc$FrG,SynNuc$FrC), by = list(SynNuc$Species), FUN = mean)
names(AGG)=c('Species','FrA','FrT','FrG','FrC')
allparameters = merge(TP, AGG)
table(allparameters$EuFish)
allparameters = merge(allparameters, AA, all.x = TRUE)
EcologyFishTable= data.frame(allparameters$Kingdom, allparameters$Phylum, allparameters$Class, allparameters$Order, allparameters$Family,allparameters$Genus, allparameters$Species, allparameters$Temperature, allparameters$FrT, allparameters$EuFish)
View(EcologyFishTable)
write.table(EcologyFishTable, file="../../Body/2Derived/EcologyFishTable.txt", quote = FALSE, row.names = FALSE)
ltest = lm(formula = FrT ~ scale(Temperature)+scale(EuFish), data = allparameters)
summary(ltest)
#############create fishes species table with Temp
TP=read.table("../../Body/1Raw/FishBaseTemperature.txt", header = TRUE)
rm(list=ls(all=TRUE))
Eu = read.table("../../Body/1Raw/EdothermicFishes.txt", sep = '\t')
ListOfEuSpecies = gsub(' ','_',Eu$V1); length(ListOfEuSpecies)
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) {file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")}
### make ND6 complementary:
NotND6 = SynNuc[SynNuc$Gene != 'ND6',]
NotND6$FrA = NotND6$NeutralA / (NotND6$NeutralA + NotND6$NeutralT + NotND6$NeutralG + NotND6$NeutralC)
NotND6$FrT = NotND6$NeutralT / (NotND6$NeutralA + NotND6$NeutralT + NotND6$NeutralG + NotND6$NeutralC)
NotND6$FrG = NotND6$NeutralG / (NotND6$NeutralA + NotND6$NeutralT + NotND6$NeutralG + NotND6$NeutralC)
NotND6$FrC = NotND6$NeutralC / (NotND6$NeutralA + NotND6$NeutralT + NotND6$NeutralG + NotND6$NeutralC)
ND6 = SynNuc[SynNuc$Gene == 'ND6',]
ND6$FrA = ND6$NeutralT / (ND6$NeutralA + ND6$NeutralT + ND6$NeutralG + ND6$NeutralC)
ND6$FrT = ND6$NeutralA / (ND6$NeutralA + ND6$NeutralT + ND6$NeutralG + ND6$NeutralC)
ND6$FrG = ND6$NeutralC / (ND6$NeutralA + ND6$NeutralT + ND6$NeutralG + ND6$NeutralC)
ND6$FrC = ND6$NeutralG / (ND6$NeutralA + ND6$NeutralT + ND6$NeutralG + ND6$NeutralC)
SynNuc = rbind(NotND6,ND6)
VecOfTaxa = unique(SynNuc$Class)
############# Hibernation in different classes
#### who is in our list? only mammals!
for (i in 1:length(VecOfTaxa)){ # i = 1
Species = unique(SynNuc[SynNuc$Class == VecOfTaxa[i],]$Species); length(Species)
L = length(intersect(Species,ListOfHibSpecies))
print(c(as.character(VecOfTaxa[i]), L))
}
########## compare nucleotide frequencies between hibernating and other mammals
#SynNuc = SynNuc[SynNuc$Class == 'Mammalia',]; length(unique(SynNuc$Species))
AGG = aggregate(list(SynNuc$FrA,SynNuc$FrT,SynNuc$FrG,SynNuc$FrC), by = list(SynNuc$Species), FUN = mean)
names(AGG)=c('Species','FrA','FrT','FrG','FrC')
############# Longevity
AA = read.table("../../Body/1Raw/anage_data.txt", header = TRUE, sep = '\t')
AA$Species = paste(AA$Genus,AA$Species,sep = '_')
TP=read.table("../../Body/1Raw/FishBaseTemperature.txt", header = TRUE)
TP = aggregate(Temperature ~ ., mean, data = TP)
TP$EuFish = 1
TP[!TP$Species %in% ListOfEuSpecies,]$EuFish = 0
allparameters = merge(TP, AGG)
table(allparameters$EuFish)
allparameters = merge(allparameters, AA, all.x = TRUE)
EcologyFishTable= data.frame(allparameters$Kingdom, allparameters$Phylum, allparameters$Class, allparameters$Order, allparameters$Family,allparameters$Genus, allparameters$Species, allparameters$Temperature, allparameters$FrT, allparameters$EuFish)
write.table(EcologyFishTable, file="../../Body/2Derived/EcologyFishTable.txt", quote = FALSE, row.names = FALSE)
View(EcologyFishTable)
ltest = lm(formula = FrT ~ scale(Temperature)*scale(EuFish), data = allparameters)
summary(ltest)
ltest = lm(formula = FrT ~ scale(Temperature)+scale(EuFish), data = allparameters)
summary(ltest)
ltest = lm(formula = scale(FrT) ~ 0 + scale(Temperature)+scale(EuFish), data = allparameters)
summary(ltest)
View(Eu)
rm(list=ls(all=TRUE))
############ list of hibernating animals
Hib = read.table("../../Body/1Raw/HibernatingMammals.txt", sep = '\t')
ListOfHibSpecies = gsub(' ','_',Hib$V1); length(ListOfHibSpecies)
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) {file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")}
### make ND6 complementary:
NotND6 = SynNuc[SynNuc$Gene != 'ND6',]
NotND6$FrA = NotND6$NeutralA / (NotND6$NeutralA + NotND6$NeutralT + NotND6$NeutralG + NotND6$NeutralC)
NotND6$FrT = NotND6$NeutralT / (NotND6$NeutralA + NotND6$NeutralT + NotND6$NeutralG + NotND6$NeutralC)
NotND6$FrG = NotND6$NeutralG / (NotND6$NeutralA + NotND6$NeutralT + NotND6$NeutralG + NotND6$NeutralC)
NotND6$FrC = NotND6$NeutralC / (NotND6$NeutralA + NotND6$NeutralT + NotND6$NeutralG + NotND6$NeutralC)
ND6 = SynNuc[SynNuc$Gene == 'ND6',]
ND6$FrA = ND6$NeutralT / (ND6$NeutralA + ND6$NeutralT + ND6$NeutralG + ND6$NeutralC)
ND6$FrT = ND6$NeutralA / (ND6$NeutralA + ND6$NeutralT + ND6$NeutralG + ND6$NeutralC)
ND6$FrG = ND6$NeutralC / (ND6$NeutralA + ND6$NeutralT + ND6$NeutralG + ND6$NeutralC)
ND6$FrC = ND6$NeutralG / (ND6$NeutralA + ND6$NeutralT + ND6$NeutralG + ND6$NeutralC)
SynNuc = rbind(NotND6,ND6)
VecOfTaxa = unique(SynNuc$Class)
############# Hibernation in different classes
#### who is in our list? only mammals!
for (i in 1:length(VecOfTaxa)){ # i = 1
Species = unique(SynNuc[SynNuc$Class == VecOfTaxa[i],]$Species); length(Species)
L = length(intersect(Species,ListOfHibSpecies))
print(c(as.character(VecOfTaxa[i]), L))
}
########## compare nucleotide frequencies between hibernating and other mammals
SynNuc = SynNuc[SynNuc$Class == 'Mammalia',]; length(unique(SynNuc$Species))
AGG = aggregate(list(SynNuc$FrA,SynNuc$FrT,SynNuc$FrG,SynNuc$FrC), by = list(SynNuc$Species), FUN = mean)
names(AGG)=c('Species','FrA','FrT','FrG','FrC')
GL=read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", header = TRUE, sep = '\t')
GL$Species = gsub(" ", "_", GL$Scientific_name)
vec_of_Marsupials_orders = c("Dasyuromorphia", 'Didelphimorphia', "Diprotodontia", "Microbiotheria", "Notoryctemorphia", "Paucituberculata", "Peramelemorphia")
Vec_of_Monotremata_genus = c("Tachyglossus","Zaglossus", "Ornithorhynchus") #Ornithorhynchus
Vec_of_Marsupials_genus = AA[AA$Order %in% vec_of_Marsupials_orders,]$Genus
GL=read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", header = TRUE, sep = '\t')
GL$Species = gsub(" ", "_", GL$Scientific_name)
vec_of_Marsupials_orders = c("Dasyuromorphia", 'Didelphimorphia', "Diprotodontia", "Microbiotheria", "Notoryctemorphia", "Paucituberculata", "Peramelemorphia")
Vec_of_Monotremata_genus = c("Tachyglossus","Zaglossus", "Ornithorhynchus") #Ornithorhynchus
Vec_of_Marsupials_genus = AA[AA$Order %in% vec_of_Marsupials_orders,]$Genus
############# Longevity
AA = read.table("../../Body/1Raw/anage_data.txt", header = TRUE, sep = '\t')
AA$Species = paste(AA$Genus,AA$Species,sep = '_')
Vec_of_Marsupials_genus = AA[AA$Order %in% vec_of_Marsupials_orders,]$Genus
vec_of_NonWarm = c(GL[GL$Genus %in% Vec_of_Monotremata_genus,]$Species, GL[GL$Genus %in% Vec_of_Marsupials_genus,]$Species, "Heterocephalus_glaber")
GL$Hib = 1
GL[!GL$Species %in% ListOfHibSpecies,]$Hib = 0
GL$Mono= 1
GL[!GL$Genus %in% Vec_of_Monotremata_genus,]$Mono = 0
GL$Mars = 1
GL[!GL$Genus %in% Vec_of_Marsupials_genus,]$Mars = 0
GL$NonWarm = 1
GL[!GL$Species %in% vec_of_NonWarm,]$NonWarm = 0
allparameters = merge(GL, AGG)
table(allparameters$Hib)
table(allparameters$Mono)
table(allparameters$Mars)
table(allparameters$NonWarm)
ltest = lm(formula = FrT ~ scale(GenerationLength_d)+scale(NonWarm)+scale(Hib), data = allparameters)
summary(ltest)
rm(list=ls(all=TRUE))
############ list of hibernating animals
Hib = read.table("../../Body/1Raw/HibernatingMammals.txt", sep = '\t')
############ list of hibernating animals
Hib = read.table("../../Body/1Raw/HibernatingDailytorporMammals.txt", sep = '\t')
View(Hib)
############ list of hibernating animals
Hib = read.table("../../Body/1Raw/HibernatingDailytorporMammals.txt")
ListOfHibSpecies = gsub(' ','_',Hib$V1); length(ListOfHibSpecies)
############ list of hibernating animals
Hib = read.table("../../Body/1Raw/HibernatingDailytorporMammals.txt")
ListOfHibSpecies = gsub(' ','_',Hib$V1); length(ListOfHibSpecies)
ListOfHibSpecies$V1 = paste(Hib$V1, Hib$V2, sep="_"); length(ListOfHibSpecies)
Hib$V1 = paste(Hib$V1, Hib$V2, sep="_")
ListOfHibSpecies = Hib[Hib$V3 == "HIB",]$V1; length(ListOfHibSpecies)
ListOfHibSpecies
ListOfNHibSpecies = Hib[!Hib$V3 == "HIB",]$V1; length(ListOfNHibSpecies)
ListOfHibSpecies = Hib[Hib$V3 == "HIB",]$V1; length(ListOfHibSpecies)
ListOfNHibSpecies = Hib[!Hib$V3 == "HIB",]$V1; length(ListOfNHibSpecies)
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) {file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")}
### make ND6 complementary:
NotND6 = SynNuc[SynNuc$Gene != 'ND6',]
NotND6$FrA = NotND6$NeutralA / (NotND6$NeutralA + NotND6$NeutralT + NotND6$NeutralG + NotND6$NeutralC)
NotND6$FrT = NotND6$NeutralT / (NotND6$NeutralA + NotND6$NeutralT + NotND6$NeutralG + NotND6$NeutralC)
NotND6$FrG = NotND6$NeutralG / (NotND6$NeutralA + NotND6$NeutralT + NotND6$NeutralG + NotND6$NeutralC)
NotND6$FrC = NotND6$NeutralC / (NotND6$NeutralA + NotND6$NeutralT + NotND6$NeutralG + NotND6$NeutralC)
ND6 = SynNuc[SynNuc$Gene == 'ND6',]
ND6$FrA = ND6$NeutralT / (ND6$NeutralA + ND6$NeutralT + ND6$NeutralG + ND6$NeutralC)
ND6$FrT = ND6$NeutralA / (ND6$NeutralA + ND6$NeutralT + ND6$NeutralG + ND6$NeutralC)
ND6$FrG = ND6$NeutralC / (ND6$NeutralA + ND6$NeutralT + ND6$NeutralG + ND6$NeutralC)
ND6$FrC = ND6$NeutralG / (ND6$NeutralA + ND6$NeutralT + ND6$NeutralG + ND6$NeutralC)
SynNuc = rbind(NotND6,ND6)
VecOfTaxa = unique(SynNuc$Class)
############# Hibernation in different classes
#### who is in our list? only mammals!
for (i in 1:length(VecOfTaxa)){ # i = 1
Species = unique(SynNuc[SynNuc$Class == VecOfTaxa[i],]$Species); length(Species)
L = length(intersect(Species,ListOfHibSpecies))
print(c(as.character(VecOfTaxa[i]), L))
}
########## compare nucleotide frequencies between hibernating and other mammals
SynNuc = SynNuc[SynNuc$Class == 'Mammalia',]; length(unique(SynNuc$Species))
AGG = aggregate(list(SynNuc$FrA,SynNuc$FrT,SynNuc$FrG,SynNuc$FrC), by = list(SynNuc$Species), FUN = mean)
names(AGG)=c('Species','FrA','FrT','FrG','FrC')
############# Longevity
AA = read.table("../../Body/1Raw/anage_data.txt", header = TRUE, sep = '\t')
AA$Species = paste(AA$Genus,AA$Species,sep = '_')
GL=read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", header = TRUE, sep = '\t')
GL$Species = gsub(" ", "_", GL$Scientific_name)
vec_of_Marsupials_orders = c("Dasyuromorphia", 'Didelphimorphia', "Diprotodontia", "Microbiotheria", "Notoryctemorphia", "Paucituberculata", "Peramelemorphia")
Vec_of_Monotremata_genus = c("Tachyglossus","Zaglossus", "Ornithorhynchus") #Ornithorhynchus
Vec_of_Marsupials_genus = AA[AA$Order %in% vec_of_Marsupials_orders,]$Genus
vec_of_NonWarm = c(GL[GL$Genus %in% Vec_of_Monotremata_genus,]$Species, GL[GL$Genus %in% Vec_of_Marsupials_genus,]$Species, "Heterocephalus_glaber")
GL$Hib = 1
GL[!GL$Species %in% ListOfHibSpecies,]$Hib = 0
GL$Daily = 1
GL[!GL$Species %in% ListOfNHibSpecies,]$Daily = 0
GL$Mono= 1
GL[!GL$Genus %in% Vec_of_Monotremata_genus,]$Mono = 0
GL$Mars = 1
GL[!GL$Genus %in% Vec_of_Marsupials_genus,]$Mars = 0
GL$NonWarm = 1
GL[!GL$Species %in% vec_of_NonWarm,]$NonWarm = 0
allparameters = merge(GL, AGG)
table(allparameters$Hib)
table(allparameters$Daily)
table(allparameters$Mono)
table(allparameters$Mars)
table(allparameters$NonWarm)
ltest = lm(formula = FrT ~ scale(GenerationLength_d)*scale(NonWarm), data = allparameters)
ltest = lm(formula = FrT ~ scale(GenerationLength_d)*scale(Hib), data = allparameters)
summary(ltest)
ltest = lm(formula = FrT ~ scale(GenerationLength_d)+scale(Hib), data = allparameters)
summary(ltest)
ltest = lm(formula = scale(FrT) ~ 0 + scale(GenerationLength_d)+scale(Hib), data = allparameters)
summary(ltest)
ltest = lm(formula = FrT ~ scale(GenerationLength_d)+scale(Hib)+scale(Daily)+scale(NonWarm), data = allparameters)
summary(ltest)
table(allparameters$Hib)
ltest = lm(formula = FrT ~ scale(GenerationLength_d)*scale(Daily), data = allparameters)
summary(ltest)
ltest = lm(formula = FrT ~ scale(GenerationLength_d)+scale(Daily), data = allparameters)
summary(ltest)
ltest = lm(formula = scale(FrT) ~ 0 + scale(GenerationLength_d)+scale(Daily), data = allparameters)
summary(ltest)
table(allparameters$Daily)
ltest = lm(formula = FrT ~ scale(GenerationLength_d)+scale(Hib)+scale(Mars), data = allparameters)
summary(ltest)
ltest = lm(formula = FrT ~ scale(GenerationLength_d)+scale(Hib)+scale(Mono), data = allparameters)
summary(ltest)
