names(gse)
class(gse$GSE26728_series_matrix.txt.gz)
exprs(gse$GSE26728_series_matrix.txt.gz)
data.frame(exprs(gse$GSE26728_series_matrix.txt.gz))
df = data.frame(exprs(gse$GSE26728_series_matrix.txt.gz))
View(df)
View(df)
df = data.frame(exprs(gse$GSE26728_series_matrix.txt.gz), row.names = NULL)
View(df)
df = data.frame(exprs(gse$GSE26728_series_matrix.txt.gz), row.names = FALS)
df = data.frame(exprs(gse$GSE26728_series_matrix.txt.gz), row.names = FALSE)
df = data.frame(exprs(gse$GSE26728_series_matrix.txt.gz), row.names = TRUE)
df = data.frame(exprs(gse$GSE26728_series_matrix.txt.gz))
df_unique_genes = gf$
rawnames(df)
df = data.frame(exprs(gse$GSE26728_series_matrix.txt.gz))
df_unique_genes = gf$
rawnames(df)
rawnames(df)
rownames(df)
df$names = rownames(df)
df_un_n = lenght(unique(df$names))
df_un_n = length(unique(df$names))
length(unique(df$names))
length(nrow(df))
nrow(df)
nrow(df)
unique(df$names)
length(df$names)
length(unique(df$names))
length(unique(df$names)) == length(df$names)
Meta(gse)
ExpressionSet(gse)
e = exprs(gse$GSE26728_series_matrix.txt.gz)
ExpressionSet(e)
ExpressionSet(e, phenoData=annotatedDataFrameFrom(e, byrow=FALSE))
ExpressionSet(e, phenoData=annotatedDataFrameFrom(e, byrow=FALSE), featureData=annotatedDataFrameFrom(e, byrow=TRUE), experimentData=MIAME(), annotation=character(), protocolData=annotatedDataFrameFrom(e, byrow=FALSE))
View(df)
length(df$names)
df = data.frame(exprs(gse$GSE26728_series_matrix.txt.gz))
names = rownames(df)
length(unique(names)) == length(names)
df$Means = rowMeans(df)
rowMeans(df[1])
df[1]
df[1,]
rowMeans(df[1,])
df = data.frame(exprs(gse$GSE26728_series_matrix.txt.gz))
control = c("liver_control_rep1", "liver_control_rep2", "liver_control_rep3", "liver_control_rep4", "iver_control_rep5", "liver_control_rep6")
control
colnames(df) = c(control, low_dose, high_dose)
low_dose = c("liver_BPALowDose_rep1", "liver_BPALowDose_rep2", "liver_BPALowDose_rep3", "liver_BPALowDose_rep4", "liver_BPALowDose_rep5", "liver_BPALowDose_rep6")
high_dose = c("liver_BPAHighDose_rep1", "liver_BPAHighDose_rep2","liver_BPAHighDose_rep3", "liver_BPAHighDose_rep4",	"liver_BPAHighDose_rep5", "liver_BPAHighDose_rep6")
colnames(df) = c(control, low_dose, high_dose)
names = rownames(df)
length(unique(names)) == length(names)
df$control_means <- rowMeans(subset(df, select = control), na.rm = TRUE)
df$low_dose_means <- rowMeans(subset(df, select = low_dose), na.rm = TRUE)
df$high_dose_means <- rowMeans(subset(df, select = high_dose), na.rm = TRUE)
dfm = data.frame()
dfm$control_means <- rowMeans(subset(df, select = control))
dfm$low_dose_means <- rowMeans(subset(df, select = low_dose))
dfm$high_dose_means <- rowMeans(subset(df, select = high_dose))
dfm = data.frame("control_means", "low_dose_means", "high_dose_means")
dfm$control_means <- rowMeans(subset(df, select = control))
dfm = data.frame(df$control_means, df$low_dose_means, df$high_dose_means)
View(dfm)
dfm = data.frame(df$control_means, df$low_dose_means, df$high_dose_means, names)
print(head(dfm))
gse
experimentData(gse)
library(GEOquery)
experimentData(gse)
getGSEDataTables(gse)
getGSEDataTables(gse)
gse <- getGEO("GSE26728", GSEMatrix =TRUE, getGPL=FALSE) #get expression data
getGSEDataTables("GSE26728")
a = getGSEDataTables("GSE26728")
a
a = parseGSE("GSE26728")
ltest$residuals[100]
rm(list=ls(all=TRUE))
############ list of hibernating animals
Hib = read.table("../../Body/1Raw/HibernatingDailytorporMammals.txt")
Hib$V1 = paste(Hib$V1, Hib$V2, sep="_")
ListOfHibSpecies = Hib[Hib$V3 == "HIB",]$V1; length(ListOfHibSpecies)
ListOfNHibSpecies = Hib[!Hib$V3 == "HIB",]$V1; length(ListOfNHibSpecies)
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) {file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")}
### make ND6 complementary:
NotND6 = SynNuc[SynNuc$Gene != 'ND6',]
NotND6$FrA = NotND6$NeutralA / (NotND6$NeutralA + NotND6$NeutralT + NotND6$NeutralG + NotND6$NeutralC)
NotND6$FrT = NotND6$NeutralT / (NotND6$NeutralA + NotND6$NeutralT + NotND6$NeutralG + NotND6$NeutralC)
NotND6$FrG = NotND6$NeutralG / (NotND6$NeutralA + NotND6$NeutralT + NotND6$NeutralG + NotND6$NeutralC)
NotND6$FrC = NotND6$NeutralC / (NotND6$NeutralA + NotND6$NeutralT + NotND6$NeutralG + NotND6$NeutralC)
ND6 = SynNuc[SynNuc$Gene == 'ND6',]
ND6$FrA = ND6$NeutralT / (ND6$NeutralA + ND6$NeutralT + ND6$NeutralG + ND6$NeutralC)
ND6$FrT = ND6$NeutralA / (ND6$NeutralA + ND6$NeutralT + ND6$NeutralG + ND6$NeutralC)
ND6$FrG = ND6$NeutralC / (ND6$NeutralA + ND6$NeutralT + ND6$NeutralG + ND6$NeutralC)
ND6$FrC = ND6$NeutralG / (ND6$NeutralA + ND6$NeutralT + ND6$NeutralG + ND6$NeutralC)
SynNuc = rbind(NotND6,ND6)
VecOfTaxa = unique(SynNuc$Class)
my_vector <- с(21, 18, 21, 19, 25, 20, 17, 17, 18, 22)
my_vector <- с(21, 18, 21, 19, 25, 20, 17, 17, 18, 22)
my_vector <- c(21, 18, 21, 19, 25, 20, 17, 17, 18, 22)
a <- mean(my_vector)
my_vector <- c(21, 18, 21, 19, 25, 20, 17, 17, 18, 22)
a <- mean(my_vector)
b <- sd(my_vector)
a+b
a-b
my_vector_2 <- my_vector[my_vector < a+b & my_vector > a-b]
df = data.frame(name = 1:10, gear=1:10)
df$gear %% 2 == 1
df$even_gear[df$gear %% 2 == 1]
View(df)
df$even_gear=df$gear[df$gear %% 2 == 1]
df$even_gear=df[df$gear %% 2 == 1]
df = data.frame(name = 1:10, gear=1:10)
df$even_gear=df$gear %% 2 == 1
df$even_gear[df$ == TRUE]=1
df$even_gear[df$even_gear == TRUE]=1
df = data.frame(name = 1:10, gear=1:10)
df$even_gear=df$gear %% 2 == 1
df$even_gear[df$even_gear == TRUE]=1
df = data.frame(name = 1:10, gear=1:10)
df$even_gear=df$gear %% 2 == 1
df$even_gear[df$even_gear == TRUE]=0
df = data.frame(name = 1:10, gear=1:10)
df$even_gear=df$gear %% 2 == 1
df$even_gear[df$even_gear != TRUE]=1
df$gear %% 2 == 1
df$even_gear[df$even_gear == FALSE]=1
df$even_gear == FALSE
df = data.frame(name = 1:10, gear=1:10)
df$even_gear=df$gear %% 2 == 1
df$even_gear[df$even_gear == FALSE]=1
df = data.frame(name = 1:10, gear=1:10)
df$even_gear=df$gear %% 2 == 1
df$even_gear == FALSE
df$even_gear[df$even_gear == FALSE]
df = data.frame(name = 1:10, gear=1:10)
df$even_gear=df$gear %% 2 == 1
for (i in nrow(df)){
if (df$even_gear[i] == TRUE){
df$even_gear[i]=0
}else{
df$even_gear[i]=1
}
}
for (i in nrow(df)){
if (df$even_gear[i] == TRUE){
df$even_gear[i]=1
}else{
df$even_gear[i]=0
}
}
df$even_gear=df$gear %% 2 == 1
for (i in nrow(df)){
if (df$even_gear[i] == TRUE){
df$even_gear[i]=1
}else{
df$even_gear[i]=0
}
}
even_gear=df$gear %% 2 == 1
even_gear=df$gear %% 2 == 1
even_gear
df = data.frame(name = 1:10, gear=1:10)
even_gear=df$gear %% 2 == 1
df$even_gear[df$even_gear == even_gear]=1
df$leven_gear=df$gear %% 2 == 1
df = data.frame(name = 1:10, gear=1:10)
df$leven_gear=df$gear %% 2 == 1
df = data.frame(name = 1:10, gear=1:10)
df$leven_gear=df$gear %% 2 == 1
for (i in nrow(df)){
if (df$leven_gear[i] == TRUE){
df$even_gear[i]=1
}else{
df$even_gear[i]=0
}
}
df$leven_gear=df$gear %% 2 == 1
class(df$leven_gear)
df$leven_gear == TRUE
for (i in nrow(df)){
if (df$leven_gear[i] == TRUE){
df$even_gear[i]=1
if (df$leven_gear[i] != TRUE){
df$even_gear[i]=0
}
}
}
df = data.frame(name = 1:10, gear=1:10)
df$leven_gear=df$gear %% 2 == 1
class(df$leven_gear)
for (i in nrow(df)){
if (df$leven_gear[i] == TRUE){
df$even_gear[i]=1
if (df$leven_gear[i] != TRUE){
df$even_gear[i]=0
}
}
}
df$leven_gear=as.character(df$gear %% 2 == 1)
class(df$leven_gear)
df = data.frame(name = 1:10, gear=1:10)
df$leven_gear=as.character(df$gear %% 2 == 1)
df$even_gear[df$even_gear == even_gear]=1
df = data.frame(name = 1:10, gear=1:10)
df$leven_gear=as.character(df$gear %% 2 == 1)
class(df$leven_gear)
df[df$leven_gear == "TRUE"]$even_gear = 1
df$even_gear=0
df[df$leven_gear == "TRUE"]$even_gear = 1
df[df$leven_gear == "TRUE",]$even_gear = 1
df = data.frame(name = 1:10, gear=1:10)
df$leven_gear=as.character(df$gear %% 2 == 1)
df$even_gear=0
class(df$leven_gear)
df[df$leven_gear != "TRUE",]$even_gear = 1
df = data.frame(mpg = 1:10, cyl=1:10)
mtcars$cyl == 4
mtcars$cyl
df = data.frame(mpg = 1:10, cyl=1:10)
mpg_4 <- mtcars$mpg[mtcars$cyl == 4,]
mtcars$cyl
mpg_4 <- mtcars[mtcars$cyl == 4,]
mtcars[mtcars$cyl == 4,]
mpg_4 <- mtcars[mtcars$cyl == 4,]$cyl
mpg_4
source('~/.active-rstudio-document', echo=TRUE)
mpg_4
mtcars
mtcars[1]
nrow(mtcars)
mtcars$carb  >= 4
mtcars$cyl > 6
for (i in 1:nrow(mtcars)){
if (mtcars$carb  >= 4 | mtcars$cyl > 6){
mtcars$new_var[i] = 1
}else{
mtcars$new_var[i] = 0
}
}
mtcars
my_vctor
my_vctor
a = as.vector(AirPassengers)
a
a[1]
df = data.frame(q)
df = c()
df <- a[1]
rm(list=ls(all=TRUE))
### read data
MUT = read.table('../../Body/3Results/VertebratePolymorphisms.MutSpecData.OnlyFourFoldDegAllGenes.txt', header = TRUE)
rm(list=ls(all=TRUE))
setwd("../../Body/3Results/")
getwd()
library(gridExtra) # install.packages("gridExtra")
library(grid)
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")){file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")}
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
rm(list=ls(all=TRUE))
setwd("../../Body/3Results")
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) {file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")}
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
rm(list=ls(all=TRUE))
setwd("../../Body/3Results")
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
getwd()
kuptsovtable = read.table("../../Body/2Derived/EcologyMammalianTable01_KuptsovA_ver2_Full.txt", sep='\t', header=TRUE)
kuptsovtable = read.table("../../Body/2Derived/EcologyMammalianTable01_KuptsovA_ver2_Full.txt", sep='\t', header=TRUE)
HG = MUTFROMK[MUTFROMK$Species == "Heterocephalus_glaber",]
MM = MUTFROMK[MUTFROMK$Species == "Mus_musculus",]
CH = MUTFROMK[MUTFROMK$Species == "Cryptomys_hottentotus",]
ALL = rbind(HG, CH)
###########Taxonomy###################################################################
Taxa = read.table("../../Body/1Raw/TaxaFromKostya.Names.stat", sep = '\t',header = FALSE)
###########Taxonomy###################################################################
Taxa = read.table("../../Body/1Raw/TaxaFromKostya.Names.stat", sep = '\t',header = FALSE)
Taxa$Species = gsub(";.*",'',Taxa$V1);
for (i in (1:nrow(Taxa)))  {Taxa$Species[i] = paste(unlist(strsplit(as.character(Taxa$Species[i]),split = ' '))[1],unlist(strsplit(as.character(Taxa$Species[i]),split = ' '))[2], sep = '_')}
Taxa$Class = gsub(";Chordata;.*",'',Taxa$V1); Taxa$Class = gsub(".*;",'',Taxa$Class); table(Taxa$Class)
Taxa$Class = gsub('Actinopteri','Actinopterygii',Taxa$Class)
Taxa$Class = gsub("Testudines|Squamata|Crocodylia|Sphenodontia",'Reptilia',Taxa$Class)
###########Taxonomy###################################################################
Taxa = read.table("../../Body/1Raw/TaxaFromKostya.Names.stat", sep = '\t',header = FALSE)
Taxa$Species = gsub(";.*",'',Taxa$V1);
for (i in (1:nrow(Taxa)))  {Taxa$Species[i] = paste(unlist(strsplit(as.character(Taxa$Species[i]),split = ' '))[1],unlist(strsplit(as.character(Taxa$Species[i]),split = ' '))[2], sep = '_')}
Taxa$Class = gsub(";Chordata;.*",'',Taxa$V1); Taxa$Class = gsub(".*;",'',Taxa$Class); table(Taxa$Class)
Taxa$Class = gsub('Actinopteri','Actinopterygii',Taxa$Class)
Taxa$Class = gsub("Testudines|Squamata|Crocodylia|Sphenodontia",'Reptilia',Taxa$Class)
length(unique(Taxa$Species)) # 1708
table(Taxa$Class)
Taxa = Taxa[,-1]
TaxaMore = read.table("../../Body/1Raw/TaxaFromKostya.2NeedTaxa.tax.txt", sep = '\t',header = FALSE)
TaxaMore$Species = ''
for (i in (1:nrow(TaxaMore)))
{TaxaMore$Species[i] = paste(unlist(strsplit(as.character(TaxaMore$V1[i]),split = ' '))[1],unlist(strsplit(as.character(TaxaMore$V1[i]),split = ' '))[2], sep = '_')}
rm(list=ls(all=TRUE))
if (!require(ggpubr)) install.packages("ggpubr")
library("ggpubr")
###########Taxonomy###################################################################
Taxa = read.table("../../Body/1Raw/TaxaFromKostya.Names.stat", sep = '\t',header = FALSE)
Taxa$Species = gsub(";.*",'',Taxa$V1);
library(vioplot)
if (!require(vioplot)) install.packages("vioplot")
library(vioplot)
###########Taxonomy###################################################################
Taxa = read.table("../../Body/1Raw/TaxaFromKostya.Names.stat", sep = '\t',header = FALSE)
Taxa$Species = gsub(";.*",'',Taxa$V1);
for (i in (1:nrow(Taxa)))  {Taxa$Species[i] = paste(unlist(strsplit(as.character(Taxa$Species[i]),split = ' '))[1],unlist(strsplit(as.character(Taxa$Species[i]),split = ' '))[2], sep = '_')}
Taxa$Class = gsub(";Chordata;.*",'',Taxa$V1); Taxa$Class = gsub(".*;",'',Taxa$Class); table(Taxa$Class)
Taxa$Class = gsub('Actinopteri','Actinopterygii',Taxa$Class)
Taxa$Class = gsub("Testudines|Squamata|Crocodylia|Sphenodontia",'Reptilia',Taxa$Class)
length(unique(Taxa$Species)) # 1708
table(Taxa$Class)
###########Taxonomy###################################################################
Taxa = read.table("../../Body/1Raw/TaxaFromKostya.Names.stat", sep = '\t',header = FALSE)
setwd("~/GitHub/mtDNA_mutspectrum/Body")
###########Taxonomy###################################################################
Taxa = read.table("../../Body/1Raw/TaxaFromKostya.Names.stat", sep = '\t',header = FALSE)
setwd("~/GitHub/mtDNA_mutspectrum/Head/2Scripts")
###########Taxonomy###################################################################
Taxa = read.table("../../Body/1Raw/TaxaFromKostya.Names.stat", sep = '\t',header = FALSE)
Taxa$Species = gsub(";.*",'',Taxa$V1);
for (i in (1:nrow(Taxa)))  {Taxa$Species[i] = paste(unlist(strsplit(as.character(Taxa$Species[i]),split = ' '))[1],unlist(strsplit(as.character(Taxa$Species[i]),split = ' '))[2], sep = '_')}
Taxa$Class = gsub(";Chordata;.*",'',Taxa$V1); Taxa$Class = gsub(".*;",'',Taxa$Class); table(Taxa$Class)
Taxa$Class = gsub('Actinopteri','Actinopterygii',Taxa$Class)
Taxa$Class = gsub("Testudines|Squamata|Crocodylia|Sphenodontia",'Reptilia',Taxa$Class)
length(unique(Taxa$Species)) # 1708
table(Taxa$Class)
Taxa = Taxa[,-1]
TaxaMore = read.table("../../Body/1Raw/TaxaFromKostya.2NeedTaxa.tax.txt", sep = '\t',header = FALSE)
TaxaMore$Species = ''
for (i in (1:nrow(TaxaMore)))
{TaxaMore$Species[i] = paste(unlist(strsplit(as.character(TaxaMore$V1[i]),split = ' '))[1],unlist(strsplit(as.character(TaxaMore$V1[i]),split = ' '))[2], sep = '_')}
TaxaMore$Class = gsub("; Chordata;.*",'',TaxaMore$V2);
TaxaMore$Class = gsub(".*; ",'',TaxaMore$Class);
TaxaMore$Class = gsub('Actinopteri','Actinopterygii',TaxaMore$Class)
TaxaMore$Class = gsub("Testudines|Squamata|Crocodylia",'Reptilia',TaxaMore$Class)
table(TaxaMore$Class)
TaxaMore = TaxaMore[,-c(1,2)]
Taxa = rbind(Taxa,TaxaMore); Taxa = unique(Taxa)
###########################MUT spectrum in Actinoptery##################################
MUT = read.table('../../Body/3Results/VertebratePolymorphisms.MutSpecData.OnlyFourFoldDegAllGenes.txt', header = TRUE)
MUTFROMK = merge(MUT, Taxa)
MUTFROMK = MUTFROMK[MUTFROMK$T_C > 0,]
MUTFROMK = MUTFROMK[MUTFROMK$A_G > 0,]
MUTFROMK$TCdivAG = MUTFROMK$T_C / MUTFROMK$A_G
MUTFROMK[MUTFROMK$Class == "Actinopterygii",]$TCdivAG
with(MUTFROMK, vioplot(
T_C[Class=="Actinopterygii"], T_C[Class=="Amphibia"], T_C[Class=="Reptilia"],T_C[Class=="Mammalia"],T_C[Class=="Aves"],
names = c(  "Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves")
))
with(MUTFROMK, vioplot(
T_C[Class=="Actinopterygii"], T_C[Class=="Amphibia"], T_C[Class=="Reptilia"],T_C[Class=="Mammalia"],T_C[Class=="Aves"],
names = c(  "Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), col=c("#6760db", "#6760db", "#6760db", "#db84cb", "#c7467e")
))
with(MUTFROMK, vioplot(
T_C[Class=="Actinopterygii"], T_C[Class=="Amphibia"], T_C[Class=="Reptilia"],T_C[Class=="Mammalia"],T_C[Class=="Aves"],
names = c(  "Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), col=c("#6760db", "#7849bf", "#9145c4", "#db84cb", "#c7467e")
))
with(MUTFROMK, vioplot(
T_C[Class=="Actinopterygii"], T_C[Class=="Amphibia"], T_C[Class=="Reptilia"],T_C[Class=="Mammalia"],T_C[Class=="Aves"],
names = c(  "Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), col=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c")
))
with(MUTFROMK, vioplot(
T_C[Class=="Actinopterygii"], T_C[Class=="Amphibia"], T_C[Class=="Reptilia"],T_C[Class=="Mammalia"],T_C[Class=="Aves"],
names = c(  "Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), col=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"),  ylab = "AH>GH"
))
with(MUTFROMK, vioplot(
TCdivAG[Class=="Actinopterygii"], TCdivAG[Class=="Amphibia"], TCdivAG[Class=="Reptilia"],TCdivAG[Class=="Mammalia"],TCdivAG_C[Class=="Aves"],
names = c(  "Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), col=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"),  ylab = "AH>GH"
))
table(MUTFROMK$Class)
MUTFROMK = MUTFROMK[MUTFROMK$T_C > 0,]
MUTFROMK = MUTFROMK[MUTFROMK$A_G > 0,]
MUTFROMK$TCdivAG = MUTFROMK$T_C / MUTFROMK$A_G
with(MUTFROMK, vioplot(
TCdivAG[Class=="Actinopterygii"], TCdivAG[Class=="Amphibia"], TCdivAG[Class=="Reptilia"],TCdivAG[Class=="Mammalia"],TCdivAG_C[Class=="Aves"],
names = c(  "Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), col=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"),  ylab = "AH>GH"
))
MUTFROMK$TCdivAG = MUTFROMK$T_C / MUTFROMK$A_G
with(MUTFROMK, vioplot(
TCdivAG[Class=="Actinopterygii"], TCdivAG[Class=="Amphibia"], TCdivAG[Class=="Reptilia"],TCdivAG[Class=="Mammalia"],TCdivAG_C[Class=="Aves"],
names = c(  "Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), col=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"),  ylab = "AH>GH"
))
with(MUTFROMK, vioplot(
TCdivAG[Class=="Actinopterygii"], TCdivAG[Class=="Amphibia"], TCdivAG[Class=="Reptilia"],TCdivAG[Class=="Mammalia"],TCdivAG[Class=="Aves"],
names = c(  "Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), col=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"),  ylab = "AH>GH"
))
with(MUTFROMK, vioplot(
TCdivAG[Class=="Actinopterygii"], TCdivAG[Class=="Amphibia"], TCdivAG[Class=="Reptilia"],TCdivAG[Class=="Mammalia"],TCdivAG[Class=="Aves"],
names = c(  "Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), col=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"),  ylab = "AH>GH",  outline = FALSE
))
with(MUTFROMK, vioplot(
TCdivAG[Class=="Actinopterygii"], TCdivAG[Class=="Amphibia"], TCdivAG[Class=="Reptilia"],TCdivAG[Class=="Mammalia"],TCdivAG[Class=="Aves"],
names = c(  "Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), col=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"),  ylab = "AH>GH",  outline = FALSE
))
with(MUTFROMK, vioplot(
TCdivAG[Class=="Actinopterygii"], TCdivAG[Class=="Amphibia"], TCdivAG[Class=="Reptilia"],TCdivAG[Class=="Mammalia"],TCdivAG[Class=="Aves"],
names = c(  "Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), col=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"),  ylab = "AH>GH",
))
with(MUTFROMK, vioplot(
TCdivAG[Class=="Actinopterygii"], TCdivAG[Class=="Amphibia"], TCdivAG[Class=="Reptilia"],TCdivAG[Class=="Mammalia"],TCdivAG[Class=="Aves"],
names = c(  "Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), col=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"),  ylab = "AH>GH",
))
with(MUTFROMK, vioplot(
TCdivAG[Class=="Actinopterygii"], TCdivAG[Class=="Amphibia"], TCdivAG[Class=="Reptilia"],TCdivAG[Class=="Mammalia"],TCdivAG[Class=="Aves"],
names = c(  "Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), col=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"),  ylab = "AH>GH"
))
with(MUTFROMK, vioplot(
TCdivAG[Class=="Actinopterygii"], TCdivAG[Class=="Amphibia"], TCdivAG[Class=="Reptilia"],TCdivAG[Class=="Mammalia"],TCdivAG[Class=="Aves"],
names = c(  "Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), col=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"),  ylab = "AH>GH",  outline = FALSE
))
with(MUTFROMK, vioplot(
TCdivAG[Class=="Actinopterygii"], TCdivAG[Class=="Amphibia"], TCdivAG[Class=="Reptilia"],TCdivAG[Class=="Mammalia"],TCdivAG[Class=="Aves"],
names = c(  "Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), col=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"),  ylab = "AH>GH",
))
with(MUTFROMK, vioplot(
TCdivAG[Class=="Actinopterygii"], TCdivAG[Class=="Amphibia"], TCdivAG[Class=="Reptilia"],TCdivAG[Class=="Mammalia"],TCdivAG[Class=="Aves"],
names = c(  "Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), col=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"),  ylab = "AH>GH",
))
with(MUTFROMK, vioplot(
TCdivAG[Class=="Actinopterygii"], TCdivAG[Class=="Amphibia"], TCdivAG[Class=="Reptilia"],TCdivAG[Class=="Mammalia"],TCdivAG[Class=="Aves"],
names = c(  "Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), col=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"),  ylab = "AH>GH"
))
ggviolin(MUTFROMK, x = "T_C", y = "Class", fill=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"), xlab = c(  "Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves") )
ggviolin(MUTFROMK, x = "Class", y = "T_C", fill=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"), xlab = c(  "Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves") )
ggviolin(MUTFROMK, x = "Class", y = "T_C", fill=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"))
ggviolin(MUTFROMK, x = "Class", y = "T_C")
ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"))
ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), col=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"),  ylab = "AH>GH")
ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), col=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"))
ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), fill=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"))
ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), fill=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"))
ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves")
ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"))
ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"))
ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"),  fill=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"))
ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"),  fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"))
ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"),  fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"), ylab = "AH>GH")
ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"),  fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"), ylab = "AH>GH", add="box-plot")
ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"),  fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"), ylab = "AH>GH", order=c(1,5,3,2,4))
ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"),  fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"), ylab = "AH>GH", order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves")
ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"),  fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"), ylab = "AH>GH", order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"))
ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"),  fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"), ylab = "AH>GH", order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), add='mean')
?desc_statby
ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"),  fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"), ylab = "AH>GH", order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"),draw_quantiles = 0.5')
ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"),  fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"), ylab = "AH>GH",\
order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), draw_quantiles = 0.5)
ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"),  fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"), ylab = "AH>GH",
order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), draw_quantiles = 0.5)
ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"),  fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"), ylab = "AH>GH",
order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), add = "boxplot")
p = ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"),  fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"), ylab = "AH>GH",
order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), add = "boxplot")
p + gradient_color(c("blue", "white", "red"))
p = ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), ylab = "AH>GH",
order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), add = "boxplot")
p + gradient_color(c("blue", "white", "red"))
p
gradient_color(c("blue", "white", "red")
gradient_color(c("blue", "white", "red"))
gradient_color(c("blue", "white", "red"))
p = ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), ylab = "AH>GH",
order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), add = "boxplot", fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"))
ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), ylab = "AH>GH",
order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), add = "boxplot", fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"))
ggviolin(MUTFROMK, x = "Class", y = "TCdivAG", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), ylab = "AH>GH div TH>CH",
order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), add = "boxplot", fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"))
ggviolin(MUTFROMK, x = "Class", y = "TCdivAG", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), ylab = "AH>GH div TH>CH",
order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), add = "boxplot", fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"),
outlier.shape = NA)
ggviolin(MUTFROMK, x = "Class", y = "TCdivAG", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), ylab = "AH>GH div TH>CH",
order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), add = "boxplot", fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"),outlier.shape = NA, add = "jitter")
ggviolin(MUTFROMK, x = "Class", y = "TCdivAG", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), ylab = "AH>GH div TH>CH",
order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), add = "boxplot", fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"), add = "jitter")
ggviolin(MUTFROMK, x = "Class", y = "TCdivAG", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), ylab = "AH>GH div TH>CH",
order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), add = "boxplot", fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"))
MUTFROMK = MUTFROMK[MUTFROMK$TCdivAG < 50,]
ggviolin(MUTFROMK, x = "Class", y = "TCdivAG", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), ylab = "AH>GH div TH>CH",
order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), add = "boxplot", fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"))
MUTFROMK = MUTFROMK[MUTFROMK$TCdivAG < 30,]
ggviolin(MUTFROMK, x = "Class", y = "TCdivAG", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), ylab = "AH>GH div TH>CH",
order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), add = "boxplot", fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"))
MUTFROMK = merge(MUT, Taxa)
MUTFROMK = merge(MUT, Taxa)
MUTFROMK = MUTFROMK[MUTFROMK$T_C > 0,]
MUTFROMK = MUTFROMK[MUTFROMK$A_G > 0,]
MUTFROMK$TCdivAG = MUTFROMK$T_C / MUTFROMK$A_G
pdf("../../Body/4Figures/VertebratePolymorphisms.MutSpecComparisons.Ecology.AtoG.DiffClasses.MutSpectrum.VIOLIN.pdf")
ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), ylab = "AH>GH",
order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), add = "boxplot", fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"))
MUTFROMK = MUTFROMK[MUTFROMK$TCdivAG < 30,]
ggviolin(MUTFROMK, x = "Class", y = "TCdivAG", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), ylab = "AH>GH div TH>CH",
order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), add = "boxplot", fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"))
dev.off()
