rm(list=ls(all=TRUE))
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) {file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")}
###################################
######
###################################
rm(list=ls(all=TRUE))
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) {file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")}
kuptsovtable = read.table("../../Body/2Derived/EcologyMammalianTable01_KuptsovA_ver2_Full.txt", sep='\t', header=TRUE)
### make ND6 complementary:
SynNuc = SynNuc[SynNuc$Gene != 'ND6',]
SynNuc = SynNuc[SynNuc$Gene != 'ND6',]
SynNuc$FrA = SynNuc$NeutralA / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrT = SynNuc$NeutralT / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrG = SynNuc$NeutralG / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrC = SynNuc$NeutralC / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
VecOfTaxa = unique(SynNuc$Class)
VecOfTaxa
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) {file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")}
kuptsovtable = read.table("../../Body/2Derived/EcologyMammalianTable01_KuptsovA_ver2_Full.txt", sep='\t', header=TRUE)
SynNuc = SynNuc[SynNuc$Gene != 'ND6',]
SynNuc = aggregate(list(SynNuc$NeutralA,SynNuc$NeutralT,SynNuc$NeutralG,SynNuc$NeutralC), by = list(SynNuc$Species), FUN = sum)
names(SynNuc) = c('Species','NeutralA','NeutralT','NeutralG','NeutralC')
SynNuc$FrA = SynNuc$NeutralA / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrT = SynNuc$NeutralT / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrG = SynNuc$NeutralG / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrC = SynNuc$NeutralC / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
kuptsovtable$FrT= NULL
kuptsovtable$FrA= NULL
kuptsovtable$FrG= NULL
kuptsovtable$FrC= NULL
allparameters = merge(kuptsovtable, SynNuc, by="Species")
allparameters$Temper = as.numeric(gsub(",", ".", allparameters$Temperature.C._White2003.2006.other.close.species))
allparameters$GenerationLength_d = as.numeric(gsub(",", ".", allparameters$GenerationLength_d))
summary(allparameters$Temper)
ltest = lm(formula = FrT.y ~ scale(GenerationLength_d)+scale(Hib.unconfirmedHib), data = allparameters)
summary(lm(formula = FrT ~ scale(GenerationLength_d)+scale(Hib.unconfirmedHib), data = allparameters))
#######Lm ~ Daily
ltest = lm(formula = FrT ~ scale(GenerationLength_d)+scale(Daily.unconfirmedDaily), data = allparameters)
summary(ltest)
allparameters$MarsMono = allparameters$Mars + allparameters$Mono
table(allparameters$MarsMono)
ltest = lm(formula = FrT.y ~ scale(GenerationLength_d)+scale(MarsMono), data = allparameters)
summary(lm(formula = FrT ~ scale(GenerationLength_d)+scale(MarsMono), data = allparameters))
ltest = lm(formula = FrT ~ scale(GenerationLength_d)+scale(Temper), data = allparameters)
summary(lm(formula = FrT ~ scale(GenerationLength_d)+scale(Temper), data = allparameters))
#######Lm ~ cold
summary(allparameters$Temper)
coldspeciesnames = allparameters[allparameters$Temper <= median(allparameters$Temper) & !is.na(allparameters$Temper),]$Species
allparameters$colddummy = 0
allparameters[allparameters$Species %in% coldspeciesnames,]$colddummy = 1
#######Lm ~ cold
summary(allparameters$Temper)
coldspeciesnames = allparameters[allparameters$Temper <= median(allparameters$Temper) & !is.na(allparameters$Temper),]$Species
allparameters$colddummy = 0
allparameters[allparameters$Species %in% coldspeciesnames,]$colddummy = 1
coldspeciesnames
median(allparameters$Temper)
allparameters
allparameters = merge(kuptsovtable, SynNuc, by="Species")
allparameters$Temper = as.numeric(gsub(",", ".", allparameters$Temperature.C._White2003.2006.other.close.species))
allparameters$GenerationLength_d = as.numeric(gsub(",", ".", allparameters$GenerationLength_d))
summary(allparameters$Temper)
allparameters$MarsMono = allparameters$Mars + allparameters$Mono
table(allparameters$MarsMono)
summary(lm(formula = FrT ~ scale(GenerationLength_d)+scale(MarsMono), data = allparameters))
summary(lm(formula = FrT ~ scale(GenerationLength_d)+scale(Temper), data = allparameters))
median(allparameters$Temper)
summary(allparameters$Temper)
median(allparameters$Temper)
mean(allparameters$Temper)
allparameters$Temper
#######Lm ~ cold
meantemp = allparameters[!is.na(allparameters$Temper),]
meantemp
formediantemperature
#######Lm ~ cold
formediantemperature = allparameters[!is.na(allparameters$Temper),]
summary(allparameters$Temper)
median(formediantemperature)
#######Lm ~ cold
formediantemperature = allparameters[!is.na(allparameters$Temper),]$Temper
median(formediantemperature)
coldspeciesnames = allparameters[allparameters$Temper <= median(formediantemperature) & !is.na(allparameters$Temper),]$Species
coldspeciesnames = allparameters[allparameters$Temper <= mean(formediantemperature) & !is.na(allparameters$Temper),]$Species
allparameters$colddummy = 0
allparameters[allparameters$Species %in% coldspeciesnames,]$colddummy = 1
summary(lm(formula = FrT.y ~ scale(GenerationLength_d)+scale(colddummy), data = allparameters))
summary(lm(formula = FrT ~ scale(GenerationLength_d)+scale(colddummy), data = allparameters))
allparameters$allcolddummy = allparameters$Hib.unconfirmedHib + allparameters$Daily.unconfirmedDaily + allparameters$MarsMono + allparameters$colddummy
table(allparameters$allcolddummy)
allparameters[allparameters$allcolddummy > 0,]$allcolddummy = 1
summary(lm(formula = FrT ~ log2(GenerationLength_d)+scale(allcolddummy), data = allparameters))
summary(lm(formula = FrT  ~ log2(GenerationLength_d), data = allparameters))
allparameters$residuals = ltest$residuals
ltest$residuals
summary(lm(formula = FrT  ~ log2(GenerationLength_d), data = allparameters))
ltest = lm(formula = FrT  ~ log2(GenerationLength_d), data = allparameters)
summary(ltest)
allparameters$residuals = ltest$residuals
View(kuptsovtable)
#################Lm ~ Xen
allparameters$Xen = 0
allparameters[allparameters$Superorder == "Xenarthra", ]$Xen = 1
table(allparameters$Xen)
summary(lm(formula = FrT ~ scale(GenerationLength_d)+scale(Xen), data = allparameters))
summary(lm(formula = FrT.y ~ scale(GenerationLength_d)+scale(Xen)+scale(allcolddummy), data = allparameters))
summary(lm(formula = FrT ~ scale(GenerationLength_d)+scale(Xen)+scale(allcolddummy), data = allparameters))
ltest = lm(formula = FrG ~ scale(GenerationLength_d), data = allparameters)
summary(ltest)
ltest = lm(formula = FrG ~ scale(GenerationLength_d)+scale(Hib.unconfirmedHib), data = allparameters)
summary(ltest)
ltest = lm(formula = FrG ~ scale(allcolddummy), data = allparameters)
summary(ltest)
ltest = lm(formula = FrG ~ scale(GenerationLength_d)*scale(allcolddummy), data = allparameters)
summary(ltest)
allparameters[allparameters$Species == "Cryptomys_hottentotus",]$Temper
allparameters[allparameters$Species == "Heterocephalus_glaber",]$Temper
allparameters[allparameters$Species == "Heterocephalus_glaber",]$GenerationLength_d
allparameters[allparameters$Species == "Cryptomys_hottentotus",]$GenerationLength_d
kuptsovtable = read.table("../../Body/2Derived/EcologyMammalianTable01_KuptsovA_ver2_Full.txt", sep='\t', header=TRUE)
SynNuc = SynNuc[SynNuc$Gene != 'ND6',]
SynNuc = aggregate(list(SynNuc$NeutralA,SynNuc$NeutralT,SynNuc$NeutralG,SynNuc$NeutralC), by = list(SynNuc$Species), FUN = sum)
names(SynNuc) = c('Species','NeutralA','NeutralT','NeutralG','NeutralC')
###################################
######
###################################
rm(list=ls(all=TRUE))
library(ggpubr)
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) {file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")}
kuptsovtable = read.table("../../Body/2Derived/EcologyMammalianTable01_KuptsovA_ver2_Full.txt", sep='\t', header=TRUE)
SynNuc = SynNuc[SynNuc$Gene != 'ND6',]
SynNuc = aggregate(list(SynNuc$NeutralA,SynNuc$NeutralT,SynNuc$NeutralG,SynNuc$NeutralC), by = list(SynNuc$Species), FUN = sum)
names(SynNuc) = c('Species','NeutralA','NeutralT','NeutralG','NeutralC')
SynNuc$FrA = SynNuc$NeutralA / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrT = SynNuc$NeutralT / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrG = SynNuc$NeutralG / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrC = SynNuc$NeutralC / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
kuptsovtable$FrT= NULL
allparameters = merge(kuptsovtable, SynNuc, by="Species")
allparameters$Temper = as.numeric(gsub(",", ".", allparameters$Temperature.C._White2003.2006.other.close.species))
allparameters$GenerationLength_d = as.numeric(gsub(",", ".", allparameters$GenerationLength_d))
summary(allparameters$Temper)
summary(lm(formula = FrT ~ scale(GenerationLength_d)+scale(Hib), data = allparameters))
summary(lm(formula = FrT ~ scale(GenerationLength_d)+scale(Hib.unconfirmedHib), data = allparameters))
ltest = lm(formula = FrT ~ scale(GenerationLength_d)+scale(Daily), data = allparameters)
summary(ltest)
#######Lm ~ Daily
summary(lm(formula = FrT ~ scale(GenerationLength_d)+scale(Daily.unconfirmedDaily), data = allparameters))
allparameters$MarsMono = allparameters$Mars + allparameters$Mono
table(allparameters$MarsMono)
summary(lm(formula = FrT ~ scale(GenerationLength_d)+scale(MarsMono), data = allparameters))
summary(lm(formula = FrT ~ scale(GenerationLength_d)+scale(Temper), data = allparameters))
#######Lm ~ cold
formediantemperature = allparameters[!is.na(allparameters$Temper),]$Temper
coldspeciesnames = allparameters[allparameters$Temper <= mean(formediantemperature) & !is.na(allparameters$Temper),]$Species
allparameters$colddummy = 0
allparameters[allparameters$Species %in% coldspeciesnames,]$colddummy = 1
summary(lm(formula = FrT ~ scale(GenerationLength_d)+scale(colddummy), data = allparameters))
allparameters$allcolddummy = allparameters$Hib.unconfirmedHib + allparameters$Daily.unconfirmedDaily + allparameters$MarsMono + allparameters$colddummy
table(allparameters$allcolddummy)
allparameters[allparameters$allcolddummy > 0,]$allcolddummy = 1
summary(lm(formula = FrT ~ log2(GenerationLength_d)+scale(allcolddummy), data = allparameters))
ltest = lm(formula = FrT  ~ log2(GenerationLength_d), data = allparameters)
summary(ltest)
allparameters$residuals = ltest$residuals ## residuals added
#################Lm ~ Xen
allparameters$Xen = 0
allparameters[allparameters$Superorder == "Xenarthra", ]$Xen = 1
summary(lm(formula = FrT ~ scale(GenerationLength_d)+scale(Xen), data = allparameters))
summary(lm(formula = FrT ~ scale(GenerationLength_d)+scale(Xen)+scale(allcolddummy), data = allparameters))
ltest = lm(formula = FrG ~ scale(GenerationLength_d), data = allparameters)
summary(ltest)
ltest = lm(formula = FrG ~ scale(GenerationLength_d)+scale(Hib.unconfirmedHib), data = allparameters)
summary(ltest)
ltest = lm(formula = FrG ~ scale(allcolddummy), data = allparameters)
summary(ltest)
ltest = lm(formula = FrG ~ scale(GenerationLength_d)*scale(allcolddummy), data = allparameters)
summary(ltest)
ggscatter(allparameters, x = "GenerationLength_d", y = "FrT",
color = "allcolddummy", shape = "allcolddummy",
palette = c("#08519c", "#3182bd"),
ellipse = TRUE, mean.point = TRUE, add = "reg.line",  xscale = "log2", xlab="Generation Length, log2", ylab="Fraction of A")
allcolddummy
allparameters
#######Lm ~ cold
formediantemperature = allparameters[!is.na(allparameters$Temper),]$Temper
coldspeciesnames = allparameters[allparameters$Temper <= mean(formediantemperature) & !is.na(allparameters$Temper),]$Species
allparameters$colddummy = 0
allparameters[allparameters$Species %in% coldspeciesnames,]$colddummy = 1
summary(lm(formula = FrT ~ scale(GenerationLength_d)+scale(colddummy), data = allparameters))
allparameters$allcolddummy = allparameters$Hib.unconfirmedHib + allparameters$Daily.unconfirmedDaily + allparameters$MarsMono + allparameters$colddummy
table(allparameters$allcolddummy)
allparameters[allparameters$allcolddummy > 0,]$allcolddummy = 1
summary(lm(formula = FrT ~ log2(GenerationLength_d)+scale(allcolddummy), data = allparameters))
ltest = lm(formula = FrT  ~ log2(GenerationLength_d), data = allparameters)
summary(ltest)
allparameters$residuals = ltest$residuals ## residuals added
#################Lm ~ Xen
allparameters$Xen = 0
allparameters[allparameters$Superorder == "Xenarthra", ]$Xen = 1
summary(lm(formula = FrT ~ scale(GenerationLength_d)+scale(Xen), data = allparameters))
summary(lm(formula = FrT ~ scale(GenerationLength_d)+scale(Xen)+scale(allcolddummy), data = allparameters))
ltest = lm(formula = FrG ~ scale(GenerationLength_d), data = allparameters)
summary(ltest)
ltest = lm(formula = FrG ~ scale(GenerationLength_d)+scale(Hib.unconfirmedHib), data = allparameters)
summary(ltest)
ltest = lm(formula = FrG ~ scale(allcolddummy), data = allparameters)
summary(ltest)
ltest = lm(formula = FrG ~ scale(GenerationLength_d)*scale(allcolddummy), data = allparameters)
summary(ltest)
ggscatter(allparameters, x = "GenerationLength_d", y = "FrT",
color = "allcolddummy", shape = "allcolddummy",
palette = c("#08519c", "#3182bd"),
ellipse = TRUE, mean.point = TRUE, add = "reg.line",  xscale = "log2", xlab="Generation Length, log2", ylab="Fraction of A")
##########mutspec
MUT = read.table('../../Body/3Results/VertebratePolymorphisms.MutSpecData.OnlyFourFoldDegAllGenes.txt', header = TRUE)
ggscatter(allparameters, x = "GenerationLength_d", y = "FrT",
color = "allcolddummy", shape = "allcolddummy",
palette = c("#08519c", "#3182bd"),
ellipse = TRUE, mean.point = TRUE, add = "reg.line",  xscale = "log2", xlab="Generation Length, log2", ylab="Fraction of A")
allparameters$allcolddummyASchar = as.character(allparameters$allcolddummy)
ggscatter(allparameters, x = "GenerationLength_d", y = "FrT",
color = "allcolddummyASchar", shape = "allcolddummyASchar",
palette = c("#08519c", "#3182bd"),
ellipse = TRUE, mean.point = TRUE, add = "reg.line",  xscale = "log2", xlab="Generation Length, log2", ylab="Fraction of A")
allparameters$allcolddummyASchar[1]
for (i in 1:nrow(allparameters)){
if(allparameters$allcolddummyASchar[i] == 0){
allparameters$allcolddummyASchar[i] = "Warmer mammals"
}else{
allparameters$allcolddummyASchar[i] = "Colder mammals"
}
}
ggscatter(allparameters, x = "GenerationLength_d", y = "FrT",
color = "allcolddummyASchar", shape = "allcolddummyASchar",
palette = c("#08519c", "#3182bd"),
ellipse = TRUE, mean.point = TRUE, add = "reg.line",  xscale = "log2", xlab="Generation Length, log2", ylab="Fraction of A")
allparameters$allcolddummyASchar = as.character(allparameters$allcolddummy)
ggscatter(allparameters, x = "GenerationLength_d", y = "FrT",
color = "allcolddummyASchar", shape = "allcolddummyASchar",
palette = c("#08519c", "#3182bd"),
ellipse = TRUE, mean.point = TRUE, add = "reg.line",  xscale = "log2", xlab="Generation Length, log2", ylab="Fraction of A")
for (i in 1:nrow(allparameters)){
if(allparameters$allcolddummyASchar[i] == 0){
allparameters$allcolddummyASchar[i] = "Warmer mammals"
}else{
allparameters$allcolddummyASchar[i] = "Colder mammals"
}
}
ggscatter(allparameters, x = "GenerationLength_d", y = "FrT",
color = "allcolddummyASchar", shape = "allcolddummyASchar",
palette = c("#08519c", "#3182bd"),
ellipse = TRUE, mean.point = TRUE, add = "reg.line",  xscale = "log2", xlab="Generation Length, log2", ylab="Fraction of A")
allparameters$TwoMammaliaGroups = as.character(allparameters$allcolddummy)
ggscatter(allparameters, x = "GenerationLength_d", y = "FrT",
color = "TwoMammaliaGroups", shape = "TwoMammaliaGroups",
palette = c("#08519c", "#3182bd"),
ellipse = TRUE, mean.point = TRUE, add = "reg.line",  xscale = "log2", xlab="Generation Length, log2", ylab="Fraction of A")
for (i in 1:nrow(allparameters)){
if(allparameters$TwoMammaliaGroups[i] == 0){
allparameters$TwoMammaliaGroups[i] = "Warmer mammals"
}else{
allparameters$TwoMammaliaGroups[i] = "Colder mammals"
}
}
ggscatter(allparameters, x = "GenerationLength_d", y = "FrT",
color = "TwoMammaliaGroups", shape = "TwoMammaliaGroups",
palette = c("#08519c", "#3182bd"),
ellipse = TRUE, mean.point = TRUE, add = "reg.line",  xscale = "log2", xlab="Generation Length, log2", ylab="Fraction of A")
ggscatter(allparameters, x = "GenerationLength_d", y = "FrT",
color = "TwoMammaliaGroups", shape = "TwoMammaliaGroups",
palette = c("#08519c", "#de6a85"),
ellipse = TRUE, mean.point = TRUE, add = "reg.line",  xscale = "log2", xlab="Generation Length, log2", ylab="Fraction of A")
pdf("../../Body/4Figures/WholeGenomeAnalyses.EcologyAndMutSpecChordata.Mammals.KuptsovData.FIGURE3.pdf")
ggscatter(allparameters, x = "GenerationLength_d", y = "FrT",
color = "TwoMammaliaGroups", shape = "TwoMammaliaGroups",
palette = c("#08519c", "#de6a85"),
ellipse = TRUE, mean.point = TRUE, add = "reg.line",  xscale = "log2", xlab="Generation Length, log2", ylab="Fraction of A")
dev.off()
pdf("../../Body/4Figures/WholeGenomeAnalyses.EcologyAndMutSpecChordata.Mammals.KuptsovData.FIGURE3.pdf", width = 9, height = 5.5)
ggscatter(allparameters, x = "GenerationLength_d", y = "FrT",
color = "TwoMammaliaGroups", shape = "TwoMammaliaGroups",
palette = c("#08519c", "#de6a85"),
ellipse = TRUE, mean.point = TRUE, add = "reg.line",  xscale = "log2", xlab="Generation Length, log2", ylab="Fraction of A")
dev.off()
rm(list=ls(all=TRUE))
if (!require(ggpubr)) install.packages("ggpubr")
library("ggpubr")
###########Taxonomy###################################################################
Taxa = read.table("../../Body/1Raw/TaxaFromKostya.Names.stat", sep = '\t',header = FALSE)
Taxa$Species = gsub(";.*",'',Taxa$V1);
for (i in (1:nrow(Taxa)))  {Taxa$Species[i] = paste(unlist(strsplit(as.character(Taxa$Species[i]),split = ' '))[1],unlist(strsplit(as.character(Taxa$Species[i]),split = ' '))[2], sep = '_')}
Taxa$Class = gsub(";Chordata;.*",'',Taxa$V1); Taxa$Class = gsub(".*;",'',Taxa$Class); table(Taxa$Class)
Taxa$Class = gsub('Actinopteri','Actinopterygii',Taxa$Class)
Taxa$Class = gsub("Testudines|Squamata|Crocodylia|Sphenodontia",'Reptilia',Taxa$Class)
length(unique(Taxa$Species)) # 1708
table(Taxa$Class)
Taxa = Taxa[,-1]
TaxaMore = read.table("../../Body/1Raw/TaxaFromKostya.2NeedTaxa.tax.txt", sep = '\t',header = FALSE)
TaxaMore$Species = ''
for (i in (1:nrow(TaxaMore)))
{TaxaMore$Species[i] = paste(unlist(strsplit(as.character(TaxaMore$V1[i]),split = ' '))[1],unlist(strsplit(as.character(TaxaMore$V1[i]),split = ' '))[2], sep = '_')}
TaxaMore$Class = gsub("; Chordata;.*",'',TaxaMore$V2);
TaxaMore$Class = gsub(".*; ",'',TaxaMore$Class);
TaxaMore$Class = gsub('Actinopteri','Actinopterygii',TaxaMore$Class)
TaxaMore$Class = gsub("Testudines|Squamata|Crocodylia",'Reptilia',TaxaMore$Class)
table(TaxaMore$Class)
TaxaMore = TaxaMore[,-c(1,2)]
Taxa = rbind(Taxa,TaxaMore); Taxa = unique(Taxa)
###########################MUT spectrum in Actinoptery##################################
MUT = read.table('../../Body/3Results/VertebratePolymorphisms.MutSpecData.OnlyFourFoldDegAllGenes.txt', header = TRUE)
MUTACTINOPTERITAXAFROMK = merge(MUT, Taxa)
View(MUTACTINOPTERITAXAFROMK)
MUTFROMK = merge(MUT, Taxa)
table(MUTFROMK$Class)
boxplot(MUTFROMK[MUTFROMK$Class == "Actinopterygii",]$T_C, MUTFROMK[MUTFROMK$Class == "Amphibia",]$T_C, MUTFROMK[MUTFROMK$Class == "Reptilia",]$T_C, MUTFROMK[MUTFROMK$Class == "Mammalia",]$T_C, MUTFROMK[MUTFROMK$Class == "Aves",]$T_C)
MUTFROMK = MUTFROMK[MUTACTINOPTERITAXAFROMK$T_C > 0,]
boxplot(MUTFROMK[MUTFROMK$Class == "Actinopterygii",]$T_C, MUTFROMK[MUTFROMK$Class == "Amphibia",]$T_C, MUTFROMK[MUTFROMK$Class == "Reptilia",]$T_C, MUTFROMK[MUTFROMK$Class == "Mammalia",]$T_C, MUTFROMK[MUTFROMK$Class == "Aves",]$T_C)
MUTFROMK = merge(MUT, Taxa)
boxplot(MUTFROMK[MUTFROMK$Class == "Actinopterygii",]$T_C, MUTFROMK[MUTFROMK$Class == "Amphibia",]$T_C, MUTFROMK[MUTFROMK$Class == "Reptilia",]$T_C, MUTFROMK[MUTFROMK$Class == "Mammalia",]$T_C, MUTFROMK[MUTFROMK$Class == "Aves",]$T_C)
MUTFROMK = MUTFROMK[MUTACTINOPTERITAXAFROMK$T_C > 0,]
boxplot(MUTFROMK[MUTFROMK$Class == "Actinopterygii",]$T_C, MUTFROMK[MUTFROMK$Class == "Amphibia",]$T_C, MUTFROMK[MUTFROMK$Class == "Reptilia",]$T_C, MUTFROMK[MUTFROMK$Class == "Mammalia",]$T_C, MUTFROMK[MUTFROMK$Class == "Aves",]$T_C)
MUTFROMK = MUTFROMK[MUTACTINOPTERITAXAFROMK$A>G > 0,]
MUTFROMK = MUTFROMK[MUTACTINOPTERITAXAFROMK$T_C > 0,]
MUTFROMK = MUTFROMK[MUTACTINOPTERITAXAFROMK$A>G > 0,]
MUTFROMK = MUTFROMK[MUTFROMK$T_C > 0,]
MUTFROMK = MUTFROMK[MUTFROMK$A>G > 0,]
MUTFROMK = MUTFROMK[MUTFROMK$A_G > 0,]
MUTFROMK$TCdivAG = MUTFROMK$T_C / MUTFROMK$A_G
boxplot(MUTFROMK[MUTFROMK$Class == "Actinopterygii",]$TCdivAG, MUTFROMK[MUTFROMK$Class == "Amphibia",]$TCdivAG, MUTFROMK[MUTFROMK$Class == "Reptilia",]$TCdivAG, MUTFROMK[MUTFROMK$Class == "Mammalia",]$TCdivAG, MUTFROMK[MUTFROMK$Class == "Aves",]$TCdivAG)
boxplot(MUTFROMK[MUTFROMK$Class == "Actinopterygii",]$TCdivAG, MUTFROMK[MUTFROMK$Class == "Amphibia",]$TCdivAG, MUTFROMK[MUTFROMK$Class == "Reptilia",]$TCdivAG, MUTFROMK[MUTFROMK$Class == "Mammalia",]$TCdivAG, MUTFROMK[MUTFROMK$Class == "Aves",]$TCdivAG, outline = FALSE)
pdf("../../Body/4Figures/VertebratePolymorphisms.MutSpecComparisons.Ecology.AtoG.DiffClasses.MutSpectrum.pdf")
boxplot(MUTFROMK[MUTFROMK$Class == "Actinopterygii",]$T_C, MUTFROMK[MUTFROMK$Class == "Amphibia",]$T_C, MUTFROMK[MUTFROMK$Class == "Reptilia",]$T_C, MUTFROMK[MUTFROMK$Class == "Mammalia",]$T_C, MUTFROMK[MUTFROMK$Class == "Aves",]$T_C,
names = c(  "Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"))
boxplot(MUTFROMK[MUTFROMK$Class == "Actinopterygii",]$TCdivAG, MUTFROMK[MUTFROMK$Class == "Amphibia",]$TCdivAG, MUTFROMK[MUTFROMK$Class == "Reptilia",]$TCdivAG, MUTFROMK[MUTFROMK$Class == "Mammalia",]$TCdivAG, MUTFROMK[MUTFROMK$Class == "Aves",]$TCdivAG,
names = c(  "Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), outline = FALSE)
dev.off()
pdf("../../Body/4Figures/VertebratePolymorphisms.MutSpecComparisons.Ecology.AtoG.DiffClasses.MutSpectrum.pdf")
boxplot(MUTFROMK[MUTFROMK$Class == "Actinopterygii",]$T_C, MUTFROMK[MUTFROMK$Class == "Amphibia",]$T_C, MUTFROMK[MUTFROMK$Class == "Reptilia",]$T_C, MUTFROMK[MUTFROMK$Class == "Mammalia",]$T_C, MUTFROMK[MUTFROMK$Class == "Aves",]$T_C,
names = c(  "Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), ylab = "AH>GH")
boxplot(MUTFROMK[MUTFROMK$Class == "Actinopterygii",]$TCdivAG, MUTFROMK[MUTFROMK$Class == "Amphibia",]$TCdivAG, MUTFROMK[MUTFROMK$Class == "Reptilia",]$TCdivAG, MUTFROMK[MUTFROMK$Class == "Mammalia",]$TCdivAG, MUTFROMK[MUTFROMK$Class == "Aves",]$TCdivAG,
names = c(  "Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), ylab = "AH>GH div TH>CH", outline = FALSE)
dev.off()
pdf("../../Body/4Figures/VertebratePolymorphisms.MutSpecComparisons.Ecology.AtoG.DiffClasses.MutSpectrum.pdf")
boxplot(MUTFROMK[MUTFROMK$Class == "Actinopterygii",]$T_C, MUTFROMK[MUTFROMK$Class == "Amphibia",]$T_C, MUTFROMK[MUTFROMK$Class == "Reptilia",]$T_C, MUTFROMK[MUTFROMK$Class == "Mammalia",]$T_C, MUTFROMK[MUTFROMK$Class == "Aves",]$T_C,
names = c(  "Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), ylab = "AH>GH", notch = TRUE)
boxplot(MUTFROMK[MUTFROMK$Class == "Actinopterygii",]$TCdivAG, MUTFROMK[MUTFROMK$Class == "Amphibia",]$TCdivAG, MUTFROMK[MUTFROMK$Class == "Reptilia",]$TCdivAG, MUTFROMK[MUTFROMK$Class == "Mammalia",]$TCdivAG, MUTFROMK[MUTFROMK$Class == "Aves",]$TCdivAG,
names = c(  "Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), ylab = "AH>GH div TH>CH", outline = FALSE, notch = TRUE)
dev.off()
kuptsovtable = read.table("../../Body/2Derived/EcologyMammalianTable01_KuptsovA_ver2_Full.txt", sep='\t', header=TRUE)
allparameters$FrT= NULL
allparameters = merge(kuptsovtable, AGG, by="Species")
allparameters$Temper = as.numeric(gsub(",", ".", allparameters$Temperature.C._White2003.2006.other.close.species))
allparameters$GenerationLength_d = as.numeric(gsub(",", ".", allparameters$GenerationLength_d))
summary(allparameters$Temper)
ltest = lm(formula = FrT.y ~ scale(GenerationLength_d)+scale(Hib), data = allparameters)
summary(ltest)
ltest = lm(formula = FrT.y ~ scale(GenerationLength_d)+scale(Hib.unconfirmedHib), data = allparameters)
summary(ltest)
ltest = lm(formula = FrT.y ~ scale(GenerationLength_d)+scale(Daily), data = allparameters)
summary(ltest)
#######Lm ~ Daily
ltest = lm(formula = FrT.y ~ scale(GenerationLength_d)+scale(Daily.unconfirmedDaily), data = allparameters)
summary(ltest)
allparameters$MarsMono = allparameters$Mars + allparameters$Mono
table(allparameters$MarsMono)
ltest = lm(formula = FrT.y ~ scale(GenerationLength_d)+scale(MarsMono), data = allparameters)
summary(ltest)
ltest = lm(formula = FrT.y ~ scale(GenerationLength_d)+scale(Temper), data = allparameters)
summary(ltest)
coldspeciesnames = allparameters[allparameters$Temper <= 35.90 & !is.na(allparameters$Temper),]$Species; length(coldspecies)
allparameters$colddummy = 0
allparameters[allparameters$Species %in% coldspeciesnames,]$colddummy = 1
ltest = lm(formula = FrT.y ~ scale(GenerationLength_d)+scale(colddummy), data = allparameters)
kuptsovtable = read.table("../../Body/2Derived/EcologyMammalianTable01_KuptsovA_ver2_Full.txt", sep='\t', header=TRUE)
allparameters$FrT= NULL
table(MUTFROMK$Class)
##########mutspec
MUT = read.table('../../Body/3Results/VertebratePolymorphisms.MutSpecData.OnlyFourFoldDegAllGenes.txt', header = TRUE)
HG = MUT[MUT$Species == "Heterocephalus_glaber",]
MM = MUT[MUT$Species == "Mus_musculus",]
CH = MUT[MUT$Species == "Cryptomys_hottentotus",]
ALL = rbind(HG, CH)
ALL = rbind(ALL, MM)
ALL
ALL$TCdivAG = ALL$T_C / ALL$A_G
ALL
ALL$TCdivAG = ALL$T_C / (ALL$A_G + ALL$T_C)
ALL
CLORD = MUTFROMK[order(MUTFROMK$Class, MUTFROMK$T_C),]
View(CLORD)
t
write.table(CLORD, file = "../../Body/3Results/AllmutspecforKuptsov", row.names = FALSE)
write.table(CLORD, file = "../../Body/3Results/AllmutspecforKuptsov.txt", row.names = FALSE)
