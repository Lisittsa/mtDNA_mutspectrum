<<<<<<< Updated upstream
ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), fill=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"))
ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), fill=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"))
ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves")
ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"))
ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"))
ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"),  fill=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"))
ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"),  fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"))
ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"),  fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"), ylab = "AH>GH")
ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"),  fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"), ylab = "AH>GH", add="box-plot")
ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"),  fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"), ylab = "AH>GH", order=c(1,5,3,2,4))
ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"),  fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"), ylab = "AH>GH", order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves")
ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"),  fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"), ylab = "AH>GH", order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"))
ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"),  fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"), ylab = "AH>GH", order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), add='mean')
?desc_statby
ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"),  fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"), ylab = "AH>GH", order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"),draw_quantiles = 0.5')
ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"),  fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"), ylab = "AH>GH",\
order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), draw_quantiles = 0.5)
ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"),  fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"), ylab = "AH>GH",
order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), draw_quantiles = 0.5)
ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"),  fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"), ylab = "AH>GH",
order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), add = "boxplot")
p = ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"),  fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"), ylab = "AH>GH",
order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), add = "boxplot")
p + gradient_color(c("blue", "white", "red"))
p = ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), ylab = "AH>GH",
order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), add = "boxplot")
p + gradient_color(c("blue", "white", "red"))
p
gradient_color(c("blue", "white", "red")
gradient_color(c("blue", "white", "red"))
gradient_color(c("blue", "white", "red"))
p = ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), ylab = "AH>GH",
order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), add = "boxplot", fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"))
ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), ylab = "AH>GH",
order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), add = "boxplot", fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"))
ggviolin(MUTFROMK, x = "Class", y = "TCdivAG", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), ylab = "AH>GH div TH>CH",
order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), add = "boxplot", fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"))
ggviolin(MUTFROMK, x = "Class", y = "TCdivAG", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), ylab = "AH>GH div TH>CH",
order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), add = "boxplot", fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"),
outlier.shape = NA)
ggviolin(MUTFROMK, x = "Class", y = "TCdivAG", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), ylab = "AH>GH div TH>CH",
order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), add = "boxplot", fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"),outlier.shape = NA, add = "jitter")
ggviolin(MUTFROMK, x = "Class", y = "TCdivAG", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), ylab = "AH>GH div TH>CH",
order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), add = "boxplot", fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"), add = "jitter")
ggviolin(MUTFROMK, x = "Class", y = "TCdivAG", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), ylab = "AH>GH div TH>CH",
order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), add = "boxplot", fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"))
MUTFROMK = MUTFROMK[MUTFROMK$TCdivAG < 50,]
ggviolin(MUTFROMK, x = "Class", y = "TCdivAG", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), ylab = "AH>GH div TH>CH",
order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), add = "boxplot", fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"))
MUTFROMK = MUTFROMK[MUTFROMK$TCdivAG < 30,]
ggviolin(MUTFROMK, x = "Class", y = "TCdivAG", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), ylab = "AH>GH div TH>CH",
order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), add = "boxplot", fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"))
MUTFROMK = merge(MUT, Taxa)
MUTFROMK = merge(MUT, Taxa)
MUTFROMK = MUTFROMK[MUTFROMK$T_C > 0,]
MUTFROMK = MUTFROMK[MUTFROMK$A_G > 0,]
MUTFROMK$TCdivAG = MUTFROMK$T_C / MUTFROMK$A_G
pdf("../../Body/4Figures/VertebratePolymorphisms.MutSpecComparisons.Ecology.AtoG.DiffClasses.MutSpectrum.VIOLIN.pdf")
ggviolin(MUTFROMK, x = "Class", y = "T_C", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), ylab = "AH>GH",
order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), add = "boxplot", fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"))
MUTFROMK = MUTFROMK[MUTFROMK$TCdivAG < 30,]
ggviolin(MUTFROMK, x = "Class", y = "TCdivAG", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), ylab = "AH>GH div TH>CH",
order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), add = "boxplot", fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"))
dev.off()
rm(list=ls(all=TRUE))
if (!require(ggpubr)) install.packages("ggpubr")
library("ggpubr")
###########Taxonomy###################################################################
Taxa = read.table("../../Body/1Raw/TaxaFromKostya.Names.stat", sep = '\t',header = FALSE)
Taxa$Species = gsub(";.*",'',Taxa$V1);
for (i in (1:nrow(Taxa)))  {Taxa$Species[i] = paste(unlist(strsplit(as.character(Taxa$Species[i]),split = ' '))[1],unlist(strsplit(as.character(Taxa$Species[i]),split = ' '))[2], sep = '_')}
Taxa$Class = gsub(";Chordata;.*",'',Taxa$V1); Taxa$Class = gsub(".*;",'',Taxa$Class); table(Taxa$Class)
Taxa$Class = gsub('Actinopteri','Actinopterygii',Taxa$Class)
Taxa$Class = gsub("Testudines|Squamata|Crocodylia|Sphenodontia",'Reptilia',Taxa$Class)
length(unique(Taxa$Species)) # 1708
table(Taxa$Class)
Taxa = Taxa[,-1]
TaxaMore = read.table("../../Body/1Raw/TaxaFromKostya.2NeedTaxa.tax.txt", sep = '\t',header = FALSE)
TaxaMore$Species = ''
for (i in (1:nrow(TaxaMore)))
{TaxaMore$Species[i] = paste(unlist(strsplit(as.character(TaxaMore$V1[i]),split = ' '))[1],unlist(strsplit(as.character(TaxaMore$V1[i]),split = ' '))[2], sep = '_')}
TaxaMore$Class = gsub("; Chordata;.*",'',TaxaMore$V2);
TaxaMore$Class = gsub(".*; ",'',TaxaMore$Class);
TaxaMore$Class = gsub('Actinopteri','Actinopterygii',TaxaMore$Class)
TaxaMore$Class = gsub("Testudines|Squamata|Crocodylia",'Reptilia',TaxaMore$Class)
table(TaxaMore$Class)
TaxaMore = TaxaMore[,-c(1,2)]
Taxa = rbind(Taxa,TaxaMore); Taxa = unique(Taxa)
###########################MUT spectrum in Actinoptery##################################
MUT = read.table('../../Body/3Results/VertebratePolymorphisms.MutSpecData.OnlyFourFoldDegAllGenes.txt', header = TRUE)
MUTACTINOPTERITAXAFROMK = merge(MUT, Taxa)
MUTACTINOPTERITAXAFROMK = MUTACTINOPTERITAXAFROMK[MUTACTINOPTERITAXAFROMK$Class == "Actinopterygii",]
names(MUTACTINOPTERITAXAFROMK) = as.character(c("TH_GH", "TH_CH", "TH_AH", "GH_TH", "GH_CH", "GH_AH", "CH_TH", "CH_GH", "CH_AH", "AH_TH", "AH_GH", "AH_CH"))
MUTACTINOPTERITAXAFROMK=MUTACTINOPTERITAXAFROMK[,-1]
MUTACTINOPTERITAXAFROMK=MUTACTINOPTERITAXAFROMK[,-13]
temp = data.frame(t(MUTACTINOPTERITAXAFROMK))
a=c()
View(MUTACTINOPTERITAXAFROMK)
names(MUTACTINOPTERITAXAFROMK) = c("TH_GH", "TH_CH", "TH_AH", "GH_TH", "GH_CH", "GH_AH", "CH_TH", "CH_GH", "CH_AH", "AH_TH", "AH_GH", "AH_CH")
View(MUTACTINOPTERITAXAFROMK)
###########################MUT spectrum in Actinoptery##################################
MUT = read.table('../../Body/3Results/VertebratePolymorphisms.MutSpecData.OnlyFourFoldDegAllGenes.txt', header = TRUE)
MUTACTINOPTERITAXAFROMK = merge(MUT, Taxa)
MUTACTINOPTERITAXAFROMK = MUTACTINOPTERITAXAFROMK[MUTACTINOPTERITAXAFROMK$Class == "Actinopterygii",]
names(MUTACTINOPTERITAXAFROMK) = c("TH_GH", "TH_CH", "TH_AH", "GH_TH", "GH_CH", "GH_AH", "CH_TH", "CH_GH", "CH_AH", "AH_TH", "AH_GH", "AH_CH")
MUTACTINOPTERITAXAFROMK=MUTACTINOPTERITAXAFROMK[,-1]
MUTACTINOPTERITAXAFROMK=MUTACTINOPTERITAXAFROMK[,-13]
temp = data.frame(t(MUTACTINOPTERITAXAFROMK))
View(temp)
rm(list=ls(all=TRUE))
if (!require(ggpubr)) install.packages("ggpubr")
library("ggpubr")
###########Taxonomy###################################################################
Taxa = read.table("../../Body/1Raw/TaxaFromKostya.Names.stat", sep = '\t',header = FALSE)
Taxa$Species = gsub(";.*",'',Taxa$V1);
for (i in (1:nrow(Taxa)))  {Taxa$Species[i] = paste(unlist(strsplit(as.character(Taxa$Species[i]),split = ' '))[1],unlist(strsplit(as.character(Taxa$Species[i]),split = ' '))[2], sep = '_')}
Taxa$Class = gsub(";Chordata;.*",'',Taxa$V1); Taxa$Class = gsub(".*;",'',Taxa$Class); table(Taxa$Class)
Taxa$Class = gsub('Actinopteri','Actinopterygii',Taxa$Class)
Taxa$Class = gsub("Testudines|Squamata|Crocodylia|Sphenodontia",'Reptilia',Taxa$Class)
length(unique(Taxa$Species)) # 1708
table(Taxa$Class)
Taxa = Taxa[,-1]
TaxaMore = read.table("../../Body/1Raw/TaxaFromKostya.2NeedTaxa.tax.txt", sep = '\t',header = FALSE)
TaxaMore$Species = ''
for (i in (1:nrow(TaxaMore)))
{TaxaMore$Species[i] = paste(unlist(strsplit(as.character(TaxaMore$V1[i]),split = ' '))[1],unlist(strsplit(as.character(TaxaMore$V1[i]),split = ' '))[2], sep = '_')}
TaxaMore$Class = gsub("; Chordata;.*",'',TaxaMore$V2);
TaxaMore$Class = gsub(".*; ",'',TaxaMore$Class);
TaxaMore$Class = gsub('Actinopteri','Actinopterygii',TaxaMore$Class)
TaxaMore$Class = gsub("Testudines|Squamata|Crocodylia",'Reptilia',TaxaMore$Class)
table(TaxaMore$Class)
TaxaMore = TaxaMore[,-c(1,2)]
Taxa = rbind(Taxa,TaxaMore); Taxa = unique(Taxa)
###########################MUT spectrum in Actinoptery##################################
MUT = read.table('../../Body/3Results/VertebratePolymorphisms.MutSpecData.OnlyFourFoldDegAllGenes.txt', header = TRUE)
MUTACTINOPTERITAXAFROMK = merge(MUT, Taxa)
MUTACTINOPTERITAXAFROMK = MUTACTINOPTERITAXAFROMK[MUTACTINOPTERITAXAFROMK$Class == "Actinopterygii",]
MUTACTINOPTERITAXAFROMK=MUTACTINOPTERITAXAFROMK[,-1]
MUTACTINOPTERITAXAFROMK=MUTACTINOPTERITAXAFROMK[,-13]
temp = data.frame(t(MUTACTINOPTERITAXAFROMK))
a=c()
View(temp)
###########################MUT spectrum in Actinoptery##################################
MUT = read.table('../../Body/3Results/VertebratePolymorphisms.MutSpecData.OnlyFourFoldDegAllGenes.txt', header = TRUE)
MUTACTINOPTERITAXAFROMK = merge(MUT, Taxa)
MUTACTINOPTERITAXAFROMK = MUTACTINOPTERITAXAFROMK[MUTACTINOPTERITAXAFROMK$Class == "Actinopterygii",]
names(MUTACTINOPTERITAXAFROMK) = c("T_G", "T_C", "T_A", "G_T", "G_C", "G_A", "C_T", "C_G", "C_A", "A_T", "A_G", "A_C")
MUTACTINOPTERITAXAFROMK=MUTACTINOPTERITAXAFROMK[,-1]
MUTACTINOPTERITAXAFROMK=MUTACTINOPTERITAXAFROMK[,-13]
temp = data.frame(t(MUTACTINOPTERITAXAFROMK))
a=c()
View(temp)
###########################MUT spectrum in Actinoptery##################################
MUT = read.table('../../Body/3Results/VertebratePolymorphisms.MutSpecData.OnlyFourFoldDegAllGenes.txt', header = TRUE)
MUTACTINOPTERITAXAFROMK = merge(MUT, Taxa)
MUTACTINOPTERITAXAFROMK = MUTACTINOPTERITAXAFROMK[MUTACTINOPTERITAXAFROMK$Class == "Actinopterygii",]
MUTACTINOPTERITAXAFROMK=MUTACTINOPTERITAXAFROMK[,-1]
MUTACTINOPTERITAXAFROMK=MUTACTINOPTERITAXAFROMK[,-13]
temp = data.frame(t(MUTACTINOPTERITAXAFROMK))
a=c()
View(TaxaMore)
View(temp)
for(i in 1:ncol(temp)){
b = data.frame(temp[i], rownames(temp))
colnames(b)=c("Freq", "Sub")
a = rbind(a, b)
}
#c("TH>GH", "TH>CH", "TH>AH", "GH>TH", "GH>CH", "GH>AH", "CH>TH", "CH>GH", "CH>AH", "AH>TH", "AH>GH", "AH>CH")
pdf("../../Body/4Figures/VertebratePolymorphisms.MutSpecComparisons.Analyses.Ecology.Actinopterygii.FishBaseData.FIGURE1A.pdf")
ggbarplot(a, x = "Sub", y = "Freq", fill = "Sub", color = "Sub",
palette = c("#bdbdbd", "#73514f", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#055088", "#9c3d37", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#036a5b", "#bdbdbd"),
xlab="Substitution types", ylab="Normalised frequencies", add = "mean_se")
dev.off()
svg("../../Body/4Figures/VertebratePolymorphisms.MutSpecComparisons.Analyses.Ecology.Actinopterygii.FishBaseData.FIGURE1A.svg")
ggbarplot(a, x = "Sub", y = "Freq", fill = "Sub", color = "Sub",
palette = c("#bdbdbd", "#73514f", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#055088", "#9c3d37", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#036a5b", "#bdbdbd"),
xlab="Substitution types", ylab="Normalised frequencies", add = "mean_se", legend = "none")
dev.off()
#c("TH>GH", "TH>CH", "TH>AH", "GH>TH", "GH>CH", "GH>AH", "CH>TH", "CH>GH", "CH>AH", "AH>TH", "AH>GH", "AH>CH")
pdf("../../Body/4Figures/VertebratePolymorphisms.MutSpecComparisons.Analyses.Ecology.Actinopterygii.FishBaseData.FIGURE1A.pdf")
ggbarplot(a, x = "Sub", y = "Freq", fill = "Sub", color = "Sub",
palette = c("#bdbdbd", "#73514f", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#055088", "#9c3d37", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#036a5b", "#bdbdbd"),
xlab="Substitution types", ylab="Normalised frequencies", add = "mean_se", legend = "none")
dev.off()
svg("../../Body/4Figures/VertebratePolymorphisms.MutSpecComparisons.Analyses.Ecology.Actinopterygii.FishBaseData.FIGURE1A.svg")
ggbarplot(a, x = "Sub", y = "Freq", fill = "Sub", color = "Sub",
palette = c("#bdbdbd", "#73514f", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#055088", "#9c3d37", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#036a5b", "#bdbdbd"),
xlab="Substitution types", ylab="Normalised frequencies", add = "mean_se")
dev.off()
rm(list=ls(all=TRUE))
if (!require(caper)) install.packages("caper")
if (!require(geiger)) install.packages("geiger")
library(caper)
library(geiger)
library("ggpubr")
MUT = read.table('../../Body/3Results/VertebratePolymorphisms.MutSpecData.OnlyFourFoldDegAllGenes.txt', header = TRUE)
##########TEMPERATURE
TEMPE = read.table('../../Body/1Raw/FishBaseTemperature.txt', header = TRUE)
class(TEMPE$Temperature)
class(TEMPE$Species)
TEMPE = aggregate(Temperature ~ ., median, data = TEMPE)
TemperMut = merge(MUT, TEMPE)
cor.test(TemperMut$A_T,TemperMut$Temperature, method = 'spearman')   #rho
cor.test(TemperMut$A_G,TemperMut$Temperature, method = 'spearman')   #rho     -0.3581037 p-value = 3.321e-05
cor.test(TemperMut$A_C,TemperMut$Temperature, method = 'spearman')   #rho
cor.test(TemperMut$T_A,TemperMut$Temperature, method = 'spearman')   #rho
cor.test(TemperMut$T_G,TemperMut$Temperature, method = 'spearman')   #rho
cor.test(TemperMut$T_C,TemperMut$Temperature, method = 'spearman')   #rho     0.2648037 p-value = 0.002522
cor.test(TemperMut$G_A,TemperMut$Temperature, method = 'spearman')   #rho
cor.test(TemperMut$G_T,TemperMut$Temperature, method = 'spearman')   #rho
cor.test(TemperMut$G_C,TemperMut$Temperature, method = 'spearman')   #rho
cor.test(TemperMut$C_A,TemperMut$Temperature, method = 'spearman')   #rho
cor.test(TemperMut$C_T,TemperMut$Temperature, method = 'spearman')   #rho
cor.test(TemperMut$C_G,TemperMut$Temperature, method = 'spearman')   #rho
samplesize = paste("N==", as.character(nrow(TemperMut)), sep="")
##########MATURITY Lm (mean length at first maturity in  )  and Tm (Mean or median age at first maturity)
MATULM = read.table('../../Body/1Raw/FishBaseMaturity_Lm.txt',  header = TRUE, stringsAsFactors = FALSE)
MATUTM = read.table('../../Body/1Raw/FishBaseMaturity_Tm.txt',  header = TRUE)
class(MATULM$Lm)
class(MATUTM$Tm)
MATULM$Lm = as.numeric(MATULM$Lm)
table(MATULM$Lm)
MATULM = MATULM[!is.na(MATULM$Lm),]
MATUTM = aggregate(Tm ~ ., median, data = MATUTM)
MATULM = aggregate(Lm ~ ., median, data = MATULM)
MATULmmut = merge(MUT,MATULM)
MATUTmmut = merge(MUT,MATUTM)
cor.test(MATULmmut$A_T,MATULmmut$Lm, method = 'spearman')   #rho
cor.test(MATULmmut$A_G,MATULmmut$Lm, method = 'spearman')   #rho
cor.test(MATULmmut$A_C,MATULmmut$Lm, method = 'spearman')   #rho
cor.test(MATULmmut$T_A,MATULmmut$Lm, method = 'spearman')   #rho
cor.test(MATULmmut$T_G,MATULmmut$Lm, method = 'spearman')   #rho
cor.test(MATULmmut$T_C,MATULmmut$Lm, method = 'spearman')   #rho
cor.test(MATULmmut$G_A,MATULmmut$Lm, method = 'spearman')   #rho
cor.test(MATULmmut$G_T,MATULmmut$Lm, method = 'spearman')   #rho
cor.test(MATULmmut$G_C,MATULmmut$Lm, method = 'spearman')   #rho  -0.266859         p-value = 0.008235
cor.test(MATULmmut$C_A,MATULmmut$Lm, method = 'spearman')   #rho
cor.test(MATULmmut$C_T,MATULmmut$Lm, method = 'spearman')   #rho
cor.test(MATULmmut$C_G,MATULmmut$Lm, method = 'spearman')   #rho
cor.test(MATUTmmut$A_T,MATUTmmut$Tm, method = 'spearman')   #rho
cor.test(MATUTmmut$A_G,MATUTmmut$Tm, method = 'spearman')   #rho
cor.test(MATUTmmut$A_C,MATUTmmut$Tm, method = 'spearman')   #rho
cor.test(MATUTmmut$T_A,MATUTmmut$Tm, method = 'spearman')   #rho
cor.test(MATUTmmut$T_G,MATUTmmut$Tm, method = 'spearman')   #rho
cor.test(MATUTmmut$T_C,MATUTmmut$Tm, method = 'spearman')   #rho
cor.test(MATUTmmut$G_A,MATUTmmut$Tm, method = 'spearman')   #rho
cor.test(MATUTmmut$G_T,MATUTmmut$Tm, method = 'spearman')   #rho
cor.test(MATUTmmut$G_C,MATUTmmut$Tm, method = 'spearman')   #rho  -0.2219755     p-value = 0.0222
cor.test(MATUTmmut$C_A,MATUTmmut$Tm, method = 'spearman')   #rho
cor.test(MATUTmmut$C_T,MATUTmmut$Tm, method = 'spearman')   #rho
cor.test(MATUTmmut$C_G,MATUTmmut$Tm, method = 'spearman')   #rho
############Multiple models
allparameters=TemperMut#128 species
summary(lm(formula = Temperature ~ scale(T_C) + scale(A_G), data = allparameters))
allparameters=merge(TemperMut, MATUTM)#65 species
summary(lm(formula = Temperature ~ scale(T_C) + scale(A_G), data = allparameters))
summary(lm(formula = T_C ~ scale(Temperature) + scale(Tm), data = allparameters))
summary(lm(formula = A_G ~ scale(Temperature) + scale(Tm), data = allparameters))
summary(lm(formula = T_C ~ scale(Temperature), data = allparameters))
summary(lm(formula = A_G ~ scale(Temperature), data = allparameters))
### TC divided by AG rank corr and log2 models
allparameters=TemperMut
allparameters=allparameters[allparameters$A_G != 0,]
allparameters=allparameters[allparameters$T_C != 0,]
allparameters$TCdivAG=allparameters$T_C/allparameters$A_G
summary(lm(formula = log2(TCdivAG) ~ scale(Temperature), data = allparameters))
summary(lm(formula = Temperature ~ scale(TCdivAG), data = allparameters))
allparameters=merge(TemperMut, MATUTM)
allparameters=allparameters[allparameters$A_G != 0,]
allparameters=allparameters[allparameters$T_C != 0,]
allparameters$TCdivAG=allparameters$T_C/allparameters$A_G
summary(lm(formula = Temperature ~ scale(TCdivAG), data = allparameters))
summary(lm(formula = log2(TCdivAG) ~ scale(Temperature) + scale(Tm), data = allparameters))
samplesize = paste("N==", as.character(nrow(allparameters)), sep="")
#################################metabolic rate approximation
allparameters = merge (TemperMut, MATUTM)
allparameters$MR=(allparameters$Tm+1)^0.75
allparameters$TemperatureK = 273.15 + allparameters$Temperature
allparameters$B=allparameters$MR * exp(-1.2/((8.617*10^-5)*allparameters$TemperatureK))
allparameters$B
###################################
######
###################################
rm(list=ls(all=TRUE))
library(ggpubr)
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) {file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")}
kuptsovtable = read.table("../../Body/2Derived/EcologyMammalianTable01_KuptsovA_ver2_Full.txt", sep='\t', header=TRUE)
SynNuc = SynNuc[SynNuc$Gene != 'ND6',]
SynNuc = aggregate(list(SynNuc$NeutralA,SynNuc$NeutralT,SynNuc$NeutralG,SynNuc$NeutralC), by = list(SynNuc$Species), FUN = sum)
names(SynNuc) = c('Species','NeutralA','NeutralT','NeutralG','NeutralC')
SynNuc$FrA = SynNuc$NeutralA / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrT = SynNuc$NeutralT / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrG = SynNuc$NeutralG / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrC = SynNuc$NeutralC / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
kuptsovtable$FrT= NULL
allparameters = merge(kuptsovtable, SynNuc, by="Species")
allparameters$Temper = as.numeric(gsub(",", ".", allparameters$Temperature.C._White2003.2006.other.close.species))
allparameters$GenerationLength_d = as.numeric(gsub(",", ".", allparameters$GenerationLength_d))
allparameters$TG = allparameters$FrT+allparameters$FrG
allparameters$AC = allparameters$FrA+allparameters$FrC
allparameters$TG_ACSkew = (allparameters$TG-allparameters$AC)/(allparameters$TG+allparameters$AC); summary(allparameters$TG_ACSkew)
allparameters$TtoCSkew = (allparameters$FrT-allparameters$FrC)/(allparameters$FrT+allparameters$FrC); summary(allparameters$TtoCSkew)
summary(lm(TG_ACSkew ~ scale(Temper)+scale(GenerationLength_d), data = allparameters))
summary(lm(TG_ACSkew ~ log2(Temper)+log2(GenerationLength_d), data = allparameters))
summary(lm(TtoCSkew ~ scale(Temper)+scale(GenerationLength_d), data = allparameters))
summary(allparameters$Temper)
summary(lm(formula = FrT ~ scale(GenerationLength_d)+scale(Hib), data = allparameters))
summary(lm(formula = FrT ~ scale(GenerationLength_d)+scale(Hib.unconfirmedHib), data = allparameters))
allparameters$TtoCSkew = (allparameters$FrT-allparameters$FrC)/(allparameters$FrT+allparameters$FrC); summary(allparameters$TtoCSkew)
allparameters$MR=(allparameters$GenerationLength_d+1)^0.75
allparameters$TemperatureK = 273.15 + allparameters$Temper
allparameters$B=allparameters$MR * exp(-1.2/((8.617*10^-5)*allparameters$TemperatureK))
cor.test(allparameters$B, allparameters$TtoCSkew, method="spearman") #rho  -0.4568971
allparameters$B
form=allparameters[!is.na(allparameters$GenerationLength_d),]
form=form[!is.na(form$TG_ACSkew),]
form=form[!is.na(form$TemperatureK),]
form$TG_ACSkew=form$TG_ACSkew * (-1)
form$x = (1/log(form$GenerationLength_d))*(log(form$TG_ACSkew)+0.2/((8.617*10^-5)*form$TemperatureK))
form$x = (1/log(form$GenerationLength_d))*(log(form$TG_ACSkew)+0.2/((8.617*10^-5)*form$TemperatureK))
form$x
summary(form$x)
form$x = log(form$TG_ACSkew * exp(0.62/((8.617*10^-5)*form$TemperatureK))) / log(bodymassgenlpred)
bodymassgenlpred=((form$GenerationLength_d/365)/(6.10*10^6))^(1/0.2)
form$x = log(form$TG_ACSkew * exp(0.62/((8.617*10^-5)*form$TemperatureK))) / log(bodymassgenlpred)
summary(form$x)
form$x
###################################
######
###################################
rm(list=ls(all=TRUE))
library(ggpubr)
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) {file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")}
kuptsovtable = read.table("../../Body/2Derived/EcologyMammalianTable01_KuptsovA_ver2_Full.txt", sep='\t', header=TRUE)
SynNuc = SynNuc[SynNuc$Gene != 'ND6',]
SynNuc = aggregate(list(SynNuc$NeutralA,SynNuc$NeutralT,SynNuc$NeutralG,SynNuc$NeutralC), by = list(SynNuc$Species), FUN = sum)
names(SynNuc) = c('Species','NeutralA','NeutralT','NeutralG','NeutralC')
SynNuc$FrA = SynNuc$NeutralA / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrT = SynNuc$NeutralT / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrG = SynNuc$NeutralG / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrC = SynNuc$NeutralC / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
kuptsovtable$FrT= NULL
allparameters = merge(kuptsovtable, SynNuc, by="Species")
allparameters$Temper = as.numeric(gsub(",", ".", allparameters$Temperature.C._White2003.2006.other.close.species))
allparameters$GenerationLength_d = as.numeric(gsub(",", ".", allparameters$GenerationLength_d))
allparameters$TG = allparameters$FrT+allparameters$FrG
allparameters$AC = allparameters$FrA+allparameters$FrC
allparameters$TG_ACSkew = (allparameters$TG-allparameters$AC)/(allparameters$TG+allparameters$AC); summary(allparameters$TG_ACSkew)
allparameters$TtoCSkew = (allparameters$FrT-allparameters$FrC)/(allparameters$FrT+allparameters$FrC); summary(allparameters$TtoCSkew)
summary(lm(TG_ACSkew ~ scale(Temper)+scale(GenerationLength_d), data = allparameters))
summary(lm(TG_ACSkew ~ log2(Temper)+log2(GenerationLength_d), data = allparameters))
summary(lm(TtoCSkew ~ scale(Temper)+scale(GenerationLength_d), data = allparameters))
summary(allparameters$Temper)
summary(lm(formula = FrT ~ scale(GenerationLength_d)+scale(Hib), data = allparameters))
summary(lm(formula = FrT ~ scale(GenerationLength_d)+scale(Hib.unconfirmedHib), data = allparameters))
ltest = lm(formula = FrT ~ scale(GenerationLength_d)+scale(Daily), data = allparameters)
summary(ltest)
#######Lm ~ Daily
summary(lm(formula = FrT ~ scale(GenerationLength_d)+scale(Daily.unconfirmedDaily), data = allparameters))
allparameters$MarsMono = allparameters$Mars + allparameters$Mono
table(allparameters$MarsMono)
summary(lm(formula = FrT ~ scale(GenerationLength_d)+scale(MarsMono), data = allparameters))
summary(lm(formula = FrT ~ scale(GenerationLength_d)+scale(Temper), data = allparameters))
#######Lm ~ cold
formediantemperature = allparameters[!is.na(allparameters$Temper),]$Temper
coldspeciesnames = allparameters[allparameters$Temper <= mean(formediantemperature) & !is.na(allparameters$Temper),]$Species
allparameters$colddummy = 0
allparameters[allparameters$Species %in% coldspeciesnames,]$colddummy = 1
summary(lm(formula = FrT ~ scale(GenerationLength_d)+scale(colddummy), data = allparameters))
allparameters$allcolddummy = allparameters$Hib.unconfirmedHib + allparameters$Daily.unconfirmedDaily + allparameters$MarsMono + allparameters$colddummy
table(allparameters$allcolddummy)
allparameters[allparameters$allcolddummy > 0,]$allcolddummy = 1
summary(lm(formula = FrT ~ log2(GenerationLength_d)+scale(allcolddummy), data = allparameters))
summary(lm(formula = FrT ~ scale(GenerationLength_d)+scale(allcolddummy), data = allparameters))
ltest = lm(formula = FrT  ~ log2(GenerationLength_d), data = allparameters)
summary(ltest)
allparameters$residuals = ltest$residuals ## residuals added
summary(lm(formula = TG_ACSkew ~ log2(GenerationLength_d)+scale(allcolddummy), data = allparameters))
summary(lm(formula = TG_ACSkew ~ scale(GenerationLength_d)+scale(allcolddummy), data = allparameters))
nrow(allparameters[!is.na(allparameters$Temper),]) #224
#################Lm ~ Xen
allparameters$Xen = 0
allparameters[allparameters$Superorder == "Xenarthra", ]$Xen = 1
summary(lm(formula = FrT ~ scale(GenerationLength_d)+scale(Xen), data = allparameters))
summary(lm(formula = FrT ~ scale(GenerationLength_d)+scale(Xen)+scale(allcolddummy), data = allparameters))
ltest = lm(formula = FrG ~ scale(GenerationLength_d), data = allparameters)
summary(ltest)
ltest = lm(formula = FrG ~ scale(GenerationLength_d)+scale(Hib.unconfirmedHib), data = allparameters)
summary(ltest)
ltest = lm(formula = FrG ~ scale(allcolddummy), data = allparameters)
summary(ltest)
ltest = lm(formula = FrG ~ scale(GenerationLength_d)*scale(allcolddummy), data = allparameters)
summary(ltest)
allparameters$TwoMammaliaGroups = as.character(allparameters$allcolddummy)
for (i in 1:nrow(allparameters)){
if(allparameters$TwoMammaliaGroups[i] == 0){
allparameters$TwoMammaliaGroups[i] = "Warmer mammals"
}else{
allparameters$TwoMammaliaGroups[i] = "Colder mammals"
}
}
pdf("../../Body/4Figures/WholeGenomeAnalyses.EcologyAndMutSpecChordata.Mammals.KuptsovData.TemperatureHist.pdf", width = 9, height = 5.5)
gghistogram(allparameters, x = "Temper", fill = "red", ylab = " ", xlab = "Body temperature, °C",
add = "mean", rug = TRUE)
dev.off()
ggscatter(allparameters, x = "GenerationLength_d", y = "TG_ACSkew",
color = "TwoMammaliaGroups", shape = "TwoMammaliaGroups",
palette = c("#08519c", "#de6a85"),
ellipse = TRUE,  add = "reg.line", xscale = "log2", xlab="Generation Length, log2", ylab="Fraction of AC_TCSkew", )
plot(log2(allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$GenerationLength_d), allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$TG_ACSkew, col="#08519c")
plot(log2(allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$GenerationLength_d), allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$TG_ACSkew, col="#08519c", xlab="Generation Length, log2", ylab="Fraction of A")
plot(log2(allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$GenerationLength_d), allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$TG_ACSkew, col="#08519c", xlab="Generation Length, log2", ylab="Fraction of AC_TCSkew")
plot(log2(allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$GenerationLength_d), allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$TG_ACSkew, col="#08519c", xlab="Generation Length, log2", ylab="Fraction of AC_TCSkew", xlim = c(8, 13.5))
plot(log2(allparameters[allparameters$TwoMammaliaGroups == "Warmer mammals",]$GenerationLength_d), allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$TG_ACSkew, col="#08519c", xlab="Generation Length, log2", ylab="Fraction of AC_TCSkew", xlim = c(8, 13.5))
plot(log2(allparameters[allparameters$TwoMammaliaGroups == "Warmer mammals",]$GenerationLength_d), allparameters[allparameters$TwoMammaliaGroups == "Warmer mammals",]$TG_ACSkew, col="#de6a85", xlab="Generation Length, log2", ylab="Fraction of AC_TCSkew", xlim = c(8, 13.5))
plot(log2(allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$GenerationLength_d), allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$TG_ACSkew, col="#08519c", xlab="Generation Length, log2", ylab="Fraction of AC_TCSkew", xlim = c(8, 14))
plot(log2(allparameters[allparameters$TwoMammaliaGroups == "Warmer mammals",]$GenerationLength_d), allparameters[allparameters$TwoMammaliaGroups == "Warmer mammals",]$TG_ACSkew, col="#de6a85", xlab="Generation Length, log2", ylab="Fraction of AC_TCSkew", xlim = c(8, 14))
plot(log2(allparameters[allparameters$TwoMammaliaGroups == "Warmer mammals",]$GenerationLength_d), allparameters[allparameters$TwoMammaliaGroups == "Warmer mammals",]$TG_ACSkew, col="#de6a85", xlab="Generation Length, log2", ylab="Fraction of AC_TCSkew")
plot(log2(allparameters[allparameters$TwoMammaliaGroups == "Warmer mammals",]$GenerationLength_d), allparameters[allparameters$TwoMammaliaGroups == "Warmer mammals",]$TG_ACSkew, col="#de6a85", xlab="Generation Length, log2", ylab="Fraction of AC_TCSkew", xlim = c(8, 14.5))
plot(log2(allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$GenerationLength_d), allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$TG_ACSkew, col="#08519c", xlab="Generation Length, log2", ylab="Fraction of AC_TCSkew", xlim = c(8, 14.5))
plot(log2(allparameters[allparameters$TwoMammaliaGroups == "Warmer mammals",]$GenerationLength_d), allparameters[allparameters$TwoMammaliaGroups == "Warmer mammals",]$TG_ACSkew, col="#de6a85", xlab="Generation Length, log2", ylab="Fraction of AC_TCSkew", xlim = c(8, 14.5))
plot(log2(allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$GenerationLength_d), allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$TG_ACSkew, col="#08519c", xlab="Generation Length, log2", ylab="Fraction of AC_TCSkew", xlim = c(8, 14.5))
plot(log2(allparameters[allparameters$TwoMammaliaGroups == "Warmer mammals",]$GenerationLength_d), allparameters[allparameters$TwoMammaliaGroups == "Warmer mammals",]$TG_ACSkew, col="#de6a85", xlab="Generation Length, log2", ylab="Fraction of AC_TCSkew", xlim = c(8, 14.5), ylim = c(-0.75, -0.25))
plot(log2(allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$GenerationLength_d), allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$TG_ACSkew, col="#08519c", xlab="Generation Length, log2", ylab="Fraction of AC_TCSkew", xlim = c(8, 14.5), ylim = c(-0.75, -0.25))
plot(log2(allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$GenerationLength_d), allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$TG_ACSkew, col="#08519c", xlab="Generation Length, log2", ylab="Fraction of AC_TCSkew", xlim = c(8, 14.5), ylim = c(-0.75, -0.25))
plot(log2(allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$GenerationLength_d), allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$TG_ACSkew, col="#08519c", xlab="Generation Length, log2", ylab="Fraction of AC_TCSkew", xlim = c(8, 14.5), ylim = c(-0.75, -0.25))
par(new=TRUE)
plot(log2(allparameters[allparameters$TwoMammaliaGroups == "Warmer mammals",]$GenerationLength_d), allparameters[allparameters$TwoMammaliaGroups == "Warmer mammals",]$TG_ACSkew, col="#de6a85", xlab="Generation Length, log2", ylab="Fraction of AC_TCSkew", xlim = c(8, 14.5), ylim = c(-0.75, -0.25))
summary(lm(formula = TG_ACSkew ~ scale(GenerationLength_d)+scale(allcolddummy), data = allparameters))
summary(lm(formula = TG_ACSkew ~ log2(GenerationLength_d)+scale(allcolddummy), data = allparameters))
summary(lm(formula = TG_ACSkew ~ log2(GenerationLength_d)+allcolddummy, data = allparameters))
plot(log2(allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$GenerationLength_d), allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$TG_ACSkew, col="#08519c", xlab="Generation Length, log2", ylab="Fraction of AC_TCSkew", xlim = c(8, 14.5), ylim = c(-0.75, -0.25))
par(new=TRUE)
plot(log2(allparameters[allparameters$TwoMammaliaGroups == "Warmer mammals",]$GenerationLength_d), allparameters[allparameters$TwoMammaliaGroups == "Warmer mammals",]$TG_ACSkew, col="#de6a85", xlab="Generation Length, log2", ylab="Fraction of AC_TCSkew", xlim = c(8, 14.5), ylim = c(-0.75, -0.25))
abline(-0.323919, -0.018255, col="#de6a85")
abline(-0.323919, -0.018255, col="#de6a85", lwd = 2)
plot(log2(allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$GenerationLength_d), allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$TG_ACSkew, col="#08519c", xlab="Generation Length, log2", ylab="Fraction of AC_TCSkew", xlim = c(8, 14.5), ylim = c(-0.75, -0.25))
abline((-0.323919+0.043515), -0.018255, col="#de6a85", lwd = 2)
plot(log2(allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$GenerationLength_d), allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$TG_ACSkew, col="#08519c", xlab="Generation Length, log2", ylab="Fraction of AC_TCSkew", xlim = c(8, 14.5), ylim = c(-0.75, -0.25))
abline((-0.323919+0.043515), -0.018255, col="#08519c", lwd = 2)
par(new=TRUE)
plot(log2(allparameters[allparameters$TwoMammaliaGroups == "Warmer mammals",]$GenerationLength_d), allparameters[allparameters$TwoMammaliaGroups == "Warmer mammals",]$TG_ACSkew, col="#de6a85", xlab="Generation Length, log2", ylab="Fraction of AC_TCSkew", xlim = c(8, 14.5), ylim = c(-0.75, -0.25))
abline(-0.323919, -0.018255, col="#de6a85", lwd = 2)
pdf("../../Body/4Figures/WholeGenomeAnalyses.EcologyAndMutSpecChordata.Mammals.KuptsovData.FIGURE2B.withoutEllipse.pdf", width = 9, height = 5.5)
plot(log2(allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$GenerationLength_d), allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$TG_ACSkew, col="#08519c", xlab="Generation Length, log2", ylab="Fraction of AC_TCSkew", xlim = c(8, 14.5), ylim = c(-0.75, -0.25))
abline((-0.323919+0.043515), -0.018255, col="#08519c", lwd = 2)
par(new=TRUE)
plot(log2(allparameters[allparameters$TwoMammaliaGroups == "Warmer mammals",]$GenerationLength_d), allparameters[allparameters$TwoMammaliaGroups == "Warmer mammals",]$TG_ACSkew, col="#de6a85", xlab="Generation Length, log2", ylab="Fraction of AC_TCSkew", xlim = c(8, 14.5), ylim = c(-0.75, -0.25))
abline(-0.323919, -0.018255, col="#de6a85", lwd = 2)
dev.off()
hist(allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$TG_ACSkew)
hist(allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$TG_ACSkew, "#08519c")
hist(allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$TG_ACSkew, col="#08519c")
hist(allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$TG_ACSkew, col="#08519c", breakes=100)
hist(allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$TG_ACSkew, col="#08519c", breaks=100)
hist(allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$TG_ACSkew, col="#08519c", breaks=70)
hist(allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$TG_ACSkew, col="#08519c", breaks=70)
hist(allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$TG_ACSkew, col="#08519c", breaks = 100)
hist(allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$TG_ACSkew, col="#08519c", breaks = 50)
hist(allparameters[allparameters$TwoMammaliaGroups == "Warmer mammals",]$TG_ACSkew, col="#08519c", breaks = 50)
par(mfrow = c(2,1))
hist(allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$TG_ACSkew, col="#08519c", breaks = 50)
par(mfrow = c(2,1))
hist(allparameters[allparameters$TwoMammaliaGroups == "Warmer mammals",]$TG_ACSkew, col="#de6a85", breaks = 50)
par(mfrow = c(2,1))
hist(allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$TG_ACSkew, col="#08519c", breaks = 50)
hist(allparameters[allparameters$TwoMammaliaGroups == "Warmer mammals",]$TG_ACSkew, col="#de6a85", breaks = 50)
par(mfrow = c(2,1))
hist(allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$TG_ACSkew, col="#08519c", breaks = 50, xlim = c(-0.75, -0.25))
hist(allparameters[allparameters$TwoMammaliaGroups == "Warmer mammals",]$TG_ACSkew, col="#de6a85", breaks = 50, xlim = c(-0.75, -0.25))
par(mfrow = c(2,1))
hist(allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$TG_ACSkew, col="#08519c", breaks = 30, xlim = c(-0.75, -0.25))
hist(allparameters[allparameters$TwoMammaliaGroups == "Warmer mammals",]$TG_ACSkew, col="#de6a85", breaks = 30, xlim = c(-0.75, -0.25))
breaks = seq(-0.75, -0.25, 0.02)
breaks
par(mfrow = c(2,1))
hist(allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$TG_ACSkew, col="#08519c", breaks = breaks, xlim = c(-0.75, -0.25), ylim = c(0, 30))
hist(allparameters[allparameters$TwoMammaliaGroups == "Warmer mammals",]$TG_ACSkew, col="#de6a85", breaks = breaks, xlim = c(-0.75, -0.25), ylim = c(0, 30))
breaks = seq(-0.75, -0.25, 0.01)
par(mfrow = c(2,1))
hist(allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$TG_ACSkew, col="#08519c", breaks = breaks, xlim = c(-0.75, -0.25), ylim = c(0, 30))
hist(allparameters[allparameters$TwoMammaliaGroups == "Warmer mammals",]$TG_ACSkew, col="#de6a85", breaks = breaks, xlim = c(-0.75, -0.25), ylim = c(0, 30))
#par(mfrow = c(2,1))
hist(allparameters[allparameters$TwoMammaliaGroups == "Warmer mammals",]$TG_ACSkew, col="#de6a85", breaks = breaks, xlim = c(-0.75, -0.25), ylim = c(0, 30))
par(new=TRUE)
hist(allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$TG_ACSkew, col="#08519c", breaks = breaks, xlim = c(-0.75, -0.25), ylim = c(0, 30))
density(allparameters[allparameters$TwoMammaliaGroups == "Warmer mammals",]$TG_ACSkew, col="#de6a85", breaks = breaks, xlim = c(-0.75, -0.25), ylim = c(0, 30))
density(allparameters[allparameters$TwoMammaliaGroups == "Warmer mammals",]$TG_ACSkew)
plot(density(allparameters[allparameters$TwoMammaliaGroups == "Warmer mammals",]$TG_ACSkew))
plot(density(allparameters[allparameters$TwoMammaliaGroups == "Warmer mammals",]$TG_ACSkew), col="#de6a85")
plot(density(allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$TG_ACSkew), col="#08519c")
plot(density(allparameters[allparameters$TwoMammaliaGroups == "Warmer mammals",]$TG_ACSkew), col="#de6a85")
par(new=TRUE)
plot(density(allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$TG_ACSkew), col="#08519c")
plot(density(allparameters[allparameters$TwoMammaliaGroups == "Warmer mammals",]$TG_ACSkew), col="#de6a85")
plot(density(allparameters[allparameters$TwoMammaliaGroups == "Warmer mammals",]$TG_ACSkew), col="#de6a85", xlim = c(-0.75, -0.25), ylim = c(0, 4))
par(new=TRUE)
plot(density(allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$TG_ACSkew), col="#08519c", xlim = c(-0.75, -0.25), ylim = c(0, 4))
plot(density(allparameters[allparameters$TwoMammaliaGroups == "Warmer mammals",]$TG_ACSkew), col="#de6a85", xlim = c(-0.75, -0.25), ylim = c(0, 6))
par(new=TRUE)
plot(density(allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$TG_ACSkew), col="#08519c", xlim = c(-0.75, -0.25), ylim = c(0, 6))
pdf("../../Body/4Figures/WholeGenomeAnalyses.EcologyAndMutSpecChordata.Mammals.KuptsovData.FIGURE2C.pdf", width = 9, height = 5.5)
plot(density(allparameters[allparameters$TwoMammaliaGroups == "Warmer mammals",]$TG_ACSkew), col="#de6a85", xlim = c(-0.75, -0.25), ylim = c(0, 6))
par(new=TRUE)
plot(density(allparameters[allparameters$TwoMammaliaGroups == "Colder mammals",]$TG_ACSkew), col="#08519c", xlim = c(-0.75, -0.25), ylim = c(0, 6))
dev.off()
=======
summary(Mut$MotherMinusKid)
# Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's
# 21.00   26.70   32.40   31.13   34.00   39.00       3
table(Mut$FromTo)
# A_C A_G A_T C_T G_A T_C
#  1  34   1  14  19  31
table(Mut[Mut$FromTo == 'T_C',]$Category)
Child = Mut[Mut$Category == 'child',]
# Child = Child[Child$Annotation == 'synonymous_variant',] # !!!!!
# Child = Child[Child$Mitomap == 'annotated',] # !!!!!
table(Child$FromTo)
# A_G A_T C_T G_A T_C
# 6   1   1   4   4
## compare reproduction age for different mutation types: We can just report this result, no more!!!! Do it.
## Cite the main conclusion of the paper (reread it and say that T_C might be the strongest driver, because the maximal mean age)
## report the trend, not statistical result - it is difficult to get significant result with so low numbers.
mean(Child[Child$FromTo == 'T_C',]$MotherMinusKid); nrow(Child[Child$FromTo == 'T_C',]) # 34.075
mean(Child[Child$FromTo != 'T_C',]$MotherMinusKid); nrow(Child[Child$FromTo != 'T_C',])  # 32.066
mean(Child[Child$FromTo == 'A_G',]$MotherMinusKid) # 33.7
mean(Child[Child$FromTo == 'G_A',]$MotherMinusKid); nrow(Child[Child$FromTo == 'G_A',]) # 29.9
mean(Child[Child$FromTo == 'A_T',]$MotherMinusKid) # 37.9 - just one
mean(Child[Child$FromTo == 'C_T',]$MotherMinusKid) # 25.1 - just one
wilcox.test(Child[Child$FromTo == 'T_C',]$MotherMinusKid,Child[Child$FromTo == 'G_A',]$MotherMinusKid, alternative = 'greater')  # p = 0.0956
wilcox.test(Child[Child$FromTo == 'T_C',]$MotherMinusKid, Child[Child$FromTo != 'T_C',]$MotherMinusKid, alternative = 'greater') # p = 0.19
wilcox.test(Child[Child$FromTo == 'T_C' | Child$FromTo == 'A_G',]$MotherMinusKid, Child[Child$FromTo != 'T_C' || Child$FromTo != 'A_G',]$MotherMinusKid, alternative = 'greater') # p = 0.19
TCGA = Child[Child$FromTo == 'T_C' | Child$FromTo == 'G_A',]
summary(Child$MotherMinusKid) # 33.55
nrow(Child[Child$FromTo == 'T_C' & Child$MotherMinusKid < median(Child$MotherMinusKid),])/nrow(Child[Child$FromTo == 'G_A' & Child$MotherMinusKid < median(Child$MotherMinusKid),])   # 1 to 3
nrow(Child[Child$FromTo == 'T_C' & Child$MotherMinusKid >= median(Child$MotherMinusKid),])/nrow(Child[Child$FromTo == 'G_A' & Child$MotherMinusKid >= median(Child$MotherMinusKid),]) # 3 vs 1
## Take a subset of kids with several de novo mtDNA mutations and compare them according to their VAFs:
## somatic mutations in mothers versus their age - no difference:
SomGain = Mut[Mut$Category == 'somatic-gain' & !is.na(Mut$AgeOfMothers),]
mean(SomGain[SomGain$FromTo == 'T_C',]$AgeOfMothers); nrow(SomGain[SomGain$FromTo == 'T_C',]);
mean(SomGain[SomGain$FromTo != 'T_C',]$AgeOfMothers); nrow(SomGain[SomGain$FromTo != 'T_C',]);
#######two groups to compare
young=Child[Child$MotherMinusKid < median(Child$MotherMinusKid),] # under 33
old=Child[Child$MotherMinusKid >= median(Child$MotherMinusKid),]  # over 34
propTCy = nrow(young[young$FromTo == "T_C",])/(nrow(young[young$FromTo == "T_C",])+nrow(young[young$FromTo == "G_A",]))
propGAy = nrow(young[young$FromTo == "G_A",])/(nrow(young[young$FromTo == "T_C",])+nrow(young[young$FromTo == "G_A",]))
propTCo = nrow(old[old$FromTo == "T_C",])/(nrow(old[old$FromTo == "T_C",])+nrow(old[old$FromTo == "G_A",]))
propGAo = nrow(old[old$FromTo == "G_A",])/(nrow(old[old$FromTo == "T_C",])+nrow(old[old$FromTo == "G_A",]))
subs = c("A>G","C>T","A>G","C>T")
age = c("<33", ">34", ">34","<33")
pr = c(propTCy, propGAo, propTCo, propGAy)
ploot = data.frame(subs, age, pr, row.names = NULL)
class(ploot$subs)
#need barplot! x="Age of mothers" y="Proportion of Ts types"
ggbarplot(ploot, "age", "pr", xlab="Age of mothers", ylab = "Proportion of Ts types",
fill = "subs", color = "subs", palette = "Paired",
label = TRUE, lab.col = "white", lab.pos = "in")
library(ggpubr)
rm(list=ls(all=TRUE))
Mut = read.table("../../Body/1Raw/Rebolledo2014/S3.txt", header = TRUE)
Mut$FromTo = paste(Mut$MajorAllele,"_",Mut$MinorAllele,sep = '')
Mut$PosFromTo = paste(Mut$Position,Mut$MajorAllele,">",Mut$MinorAllele,sep = '')
write.table(Mut$PosFromTo,"../../Body/2Derived/Humans.RebolledoAnalyses.ForAnnotation.txt", quote = FALSE, row.names = FALSE, col.names = FALSE)
### write the file in order to annotate manually: go to https://mseqdr.org/mvtool.php, paste my variants and save file: "../../Body/1Raw/Rebolledo2014/mseqdr_mvTool_annotation_vep_2019_2_5_15_25.csv"
Ann = read.table("../../Body/1Raw/Rebolledo2014/mseqdr_mvTool_annotation_vep_2019_2_5_15_25.csv", sep = ',', header = TRUE)
table(Ann$consequence_terms)
#    -                   missense_variant non_coding_transcript_exon_variant                 synonymous_variant              upstream_gene_variant
#   47                                 27                                 15                                 19                                108
Ann = unique(Ann[,grep("Input|consequence_terms",colnames(Ann))]); names(Ann)=c('PosFromTo','Annotation')
Mut = merge(Mut,Ann, all.x = TRUE)
Age = read.table("../../Body/1Raw/Rebolledo2014/S1.txt", sep = '\t', header = TRUE)
Age$Sample = gsub("-bl",'',Age$BloodId)
Age$length = 0;
for (i in 1:nrow(Age)){
Age$length[i] = length(unlist(strsplit(Age$Sample[i],split='')))
}
AgeOfMothers = Age[Age$length <= 4,];  AgeOfMothers$AgeOfMothers = AgeOfMothers$AgeAtCollection; AgeOfMothers=AgeOfMothers[,c(4,6)]
AgeOfKids = Age[Age$length > 4,]; AgeOfKids$Sample = gsub("C1$|C2$|C3$|C4$|C5$",'',AgeOfKids$Sample)
AgeOfKids = AgeOfKids[AgeOfKids$Sample != 'M502G',]
AgeOfKids$AgeOfKids = AgeOfKids$AgeAtCollection; AgeOfKids=AgeOfKids[,c(4,6)]
Mut = merge(Mut,AgeOfMothers, by = 'Sample', all.x = TRUE)
Mut = merge(Mut,AgeOfKids, by = 'Sample', all.x = TRUE)
Mut$MotherMinusKid = Mut$AgeOfMothers - Mut$AgeOfKids
summary(Mut$MotherMinusKid)
# Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's
# 21.00   26.70   32.40   31.13   34.00   39.00       3
table(Mut$FromTo)
# A_C A_G A_T C_T G_A T_C
#  1  34   1  14  19  31
table(Mut[Mut$FromTo == 'T_C',]$Category)
Child = Mut[Mut$Category == 'child',]
# Child = Child[Child$Annotation == 'synonymous_variant',] # !!!!!
# Child = Child[Child$Mitomap == 'annotated',] # !!!!!
table(Child$FromTo)
# A_G A_T C_T G_A T_C
# 6   1   1   4   4
## compare reproduction age for different mutation types: We can just report this result, no more!!!! Do it.
## Cite the main conclusion of the paper (reread it and say that T_C might be the strongest driver, because the maximal mean age)
## report the trend, not statistical result - it is difficult to get significant result with so low numbers.
mean(Child[Child$FromTo == 'T_C',]$MotherMinusKid); nrow(Child[Child$FromTo == 'T_C',]) # 34.075
mean(Child[Child$FromTo != 'T_C',]$MotherMinusKid); nrow(Child[Child$FromTo != 'T_C',])  # 32.066
mean(Child[Child$FromTo == 'A_G',]$MotherMinusKid) # 33.7
mean(Child[Child$FromTo == 'G_A',]$MotherMinusKid); nrow(Child[Child$FromTo == 'G_A',]) # 29.9
mean(Child[Child$FromTo == 'A_T',]$MotherMinusKid) # 37.9 - just one
mean(Child[Child$FromTo == 'C_T',]$MotherMinusKid) # 25.1 - just one
wilcox.test(Child[Child$FromTo == 'T_C',]$MotherMinusKid,Child[Child$FromTo == 'G_A',]$MotherMinusKid, alternative = 'greater')  # p = 0.0956
wilcox.test(Child[Child$FromTo == 'T_C',]$MotherMinusKid, Child[Child$FromTo != 'T_C',]$MotherMinusKid, alternative = 'greater') # p = 0.19
wilcox.test(Child[Child$FromTo == 'T_C' | Child$FromTo == 'A_G',]$MotherMinusKid, Child[Child$FromTo != 'T_C' || Child$FromTo != 'A_G',]$MotherMinusKid, alternative = 'greater') # p = 0.19
TCGA = Child[Child$FromTo == 'T_C' | Child$FromTo == 'G_A',]
summary(Child$MotherMinusKid) # 33.55
nrow(Child[Child$FromTo == 'T_C' & Child$MotherMinusKid < median(Child$MotherMinusKid),])/nrow(Child[Child$FromTo == 'G_A' & Child$MotherMinusKid < median(Child$MotherMinusKid),])   # 1 to 3
nrow(Child[Child$FromTo == 'T_C' & Child$MotherMinusKid >= median(Child$MotherMinusKid),])/nrow(Child[Child$FromTo == 'G_A' & Child$MotherMinusKid >= median(Child$MotherMinusKid),]) # 3 vs 1
## Take a subset of kids with several de novo mtDNA mutations and compare them according to their VAFs:
## somatic mutations in mothers versus their age - no difference:
SomGain = Mut[Mut$Category == 'somatic-gain' & !is.na(Mut$AgeOfMothers),]
mean(SomGain[SomGain$FromTo == 'T_C',]$AgeOfMothers); nrow(SomGain[SomGain$FromTo == 'T_C',]);
mean(SomGain[SomGain$FromTo != 'T_C',]$AgeOfMothers); nrow(SomGain[SomGain$FromTo != 'T_C',]);
#######two groups to compare
young=Child[Child$MotherMinusKid < median(Child$MotherMinusKid),] # under 33
old=Child[Child$MotherMinusKid >= median(Child$MotherMinusKid),]  # over 34
propTCy = nrow(young[young$FromTo == "T_C",])/(nrow(young[young$FromTo == "T_C",])+nrow(young[young$FromTo == "G_A",]))
propGAy = nrow(young[young$FromTo == "G_A",])/(nrow(young[young$FromTo == "T_C",])+nrow(young[young$FromTo == "G_A",]))
propTCo = nrow(old[old$FromTo == "T_C",])/(nrow(old[old$FromTo == "T_C",])+nrow(old[old$FromTo == "G_A",]))
propGAo = nrow(old[old$FromTo == "G_A",])/(nrow(old[old$FromTo == "T_C",])+nrow(old[old$FromTo == "G_A",]))
subs = c("A>G","C>T","A>G","C>T")
age = c("<33", ">34", ">34","<33")
pr = c(propTCy, propGAo, propTCo, propGAy)
ploot = data.frame(subs, age, pr, row.names = NULL)
class(ploot$subs)
#need barplot! x="Age of mothers" y="Proportion of Ts types"
ggbarplot(ploot, "age", "pr", xlab="Age of mothers", ylab = "Proportion of Ts types",
fill = "subs", color = "subs", palette = "Paired",
label = TRUE, lab.col = "white", lab.pos = "in")
rm(list=ls())
data = read.table("../../Body/1Raw/Wei2019HumanDuos.txt", sep='\t', header = TRUE)
str(data)
str(data)
View(data)
View(data)
length(unique(data$PairID))
View(data)
table(unique(data$MotherOffspring)) # 928
table(data$MotherOffspring) # 928
table(data$HeteroplasmiCategory)
data$Allele = as.character(data$Allele)
data$Allele = as.character(data$Allele)
data$mutType = paste(substr(data$Allele, 1, 1), substr(data$Allele, nchar(data$Allele), nchar(data$Allele)), sep="")
offspring = data[which(data$MotherOffspring == 'Offspring'),]
# check frequencies => indeed this is light chain notation
TotalMutSpec = as.data.frame(table(offspring$mutType)); TotalMutSpec = TotalMutSpec[order(-TotalMutSpec$Freq),]
table(offspring$mutType)
table(offspring$HeteroplasmiCategory)
offspring = data[which(data$MotherOffspring == 'Offspring'),]
table(offspring$HeteroplasmiCategory) # de novo: 477; inherited: 416
Off = data[which(data$MotherOffspring == 'Offspring'),]
table(Off$HeteroplasmiCategory) # de novo: 477; inherited: 416
OffDeNovo = Off[Off$HeteroplasmiCategory == 'de novo',]
TotalMutSpec = as.data.frame(table(OffDeNovo$mutType)); TotalMutSpec = TotalMutSpec[order(-TotalMutSpec$Freq),]
TotalMutSpec
rm(list=ls())
data = read.table("../../Body/1Raw/Wei2019HumanDuos.txt", sep='\t', header = TRUE)
str(data)
length(unique(data$PairID)) # 928
table(data$MotherOffspring) # Mother: 1043 Offspring: 893
table(data$HeteroplasmiCategory) # de novo: 477; inherited: 416; lost: 614; tansmitted: 429
### Add mutation type column
data$Allele = as.character(data$Allele)
data$mutType = paste(substr(data$Allele, 1, 1), substr(data$Allele, nchar(data$Allele), nchar(data$Allele)), sep="")
### we need to work with offspring who has several de novo variants (to compare their VAFs)
Off = data[which(data$MotherOffspring == 'Offspring'),]
table(Off$HeteroplasmiCategory) # de novo: 477; inherited: 416
OffDeNovo = Off[Off$HeteroplasmiCategory == 'de novo',]  # 477
### check frequencies => indeed this is light chain notation
TotalMutSpec = as.data.frame(table(OffDeNovo$mutType)); TotalMutSpec = TotalMutSpec[order(-TotalMutSpec$Freq),]
TotalMutSpec
OffDeNovo$mutType = gsub('TC','A>G',OffDeNovo$mutType);  OffDeNovo$mutType = gsub('GA','C>T',OffDeNovo$mutType); OffDeNovo$mutType = gsub('AG','T>C',OffDeNovo$mutType); OffDeNovo$mutType = gsub('CT','G>A',OffDeNovo$mutType);
OffDeNovo$mutType = gsub("AC|CA|GT|TG|AT|TA|CG|GC", 'Tv',OffDeNovo$mutType);
TotalMutSpec = as.data.frame(table(OffDeNovo$mutType)); TotalMutSpec = TotalMutSpec[order(-TotalMutSpec$Freq),]
TotalMutSpec
View(data)
rm(list=ls())
data = read.table("../../Body/1Raw/Wei2019HumanDuos.txt", sep='\t', header = TRUE)
str(data)
length(unique(data$PairID)) # 928
table(data$MotherOffspring) # Mother: 1043 Offspring: 893
table(data$HeteroplasmiCategory) # de novo: 477; inherited: 416; lost: 614; tansmitted: 429  # inherited - transmitted&&&
### Add mutation type column
data$Allele = as.character(data$Allele)
data$mutType = paste(substr(data$Allele, 1, 1), substr(data$Allele, nchar(data$Allele), nchar(data$Allele)), sep="")
### we need to work with offspring who has several de novo variants (to compare their VAFs)
Off = data[which(data$MotherOffspring == 'Offspring'),]
table(Off$HeteroplasmiCategory) # de novo: 477; inherited: 416
OffDeNovo = Off[Off$HeteroplasmiCategory == 'de novo',]  # 477
### check that this is indeed light chain notation (default as expected) and check - how reasonable the MutSpec in general
TotalMutSpecLightChain = as.data.frame(table(OffDeNovo$mutType)); TotalMutSpecLightChain = TotalMutSpecLightChain[order(-TotalMutSpecLightChain$Freq),]
TotalMutSpecLightChain
TotalMutSpecHeavyChain
OffDeNovo$mutType = gsub('TC','A>G',OffDeNovo$mutType);  OffDeNovo$mutType = gsub('GA','C>T',OffDeNovo$mutType); OffDeNovo$mutType = gsub('AG','T>C',OffDeNovo$mutType); OffDeNovo$mutType = gsub('CT','G>A',OffDeNovo$mutType);
OffDeNovo$mutType = gsub("AC|CA|GT|TG|AT|TA|CG|GC", 'Tv',OffDeNovo$mutType);
TotalMutSpecHeavyChain = as.data.frame(table(OffDeNovo$mutType)); TotalMutSpecHeavyChain = TotalMutSpecHeavyChain[order(-TotalMutSpecHeavyChain$Freq),]
TotalMutSpecHeavyChain
Agg1 = aggregate(OffDeNovo$HeteroplasmicFraction, by = list(OffDeNovo$mutType), FUN = mean)
Agg1
Agg1 = aggregate(OffDeNovo$HeteroplasmicFraction, by = list(OffDeNovo$mutType), FUN = mean)
Agg1
boxplot(OffDeNovo$HeteroplasmicFraction ~ OffDeNovo$mutType, varwidth = TRUE, notch = TRUE)
library(gdata)
suppl = read.xls('../../Body/1Raw/Zaidi2019/pnas.1906331116.sd02.xlsx')
suppl = read.csv('../../Body/1Raw/Zaidi2019/pnas.1906331116.sd02.csv')
View(suppl)
de_novo = read.csv('../../Body/1Raw/Zaidi2019/MakovaDeNovoMutations.csv')
View(de_novo)
View(suppl)
names(de_novo)
names(de_novo)[2]
names(suppl)
names(de_novo)[2] = 'mother_id'
a = merge(de_novo, suppl, by='mother_id', all.x = TRUE)
View(a)
View(de_novo)
View(suppl)
suppl = read.csv('../../Body/1Raw/Zaidi2019/pnas.1906331116.sd01.csv')
de_novo = read.csv('../../Body/1Raw/Zaidi2019/MakovaDeNovoMutations.csv')
View(suppl)
names(de_novo)[2] = 'mother_id'
a = merge(de_novo, suppl, by='mother_id', all.x = TRUE)
View(a)
library(dplyr)
a = left_join(de_novo, suppl)
View(a)
View(de_novo)
table(de_novo$mother_id)
table(suppl$mother_id)
?left_join
names(de_novo)[1] = 'family_id'
a = left_join(de_novo, suppl, by = 'family_id')
View(a)
a = left_join(de_novo, suppl, by = c('family_id', 'position'))
names(suppl)[2] = 'position'
a = left_join(de_novo, suppl, by = c('family_id', 'position'))
View(a)
a$mother_id.x == a$mother_id.y
a$mother_id.x
a[a$mother_id.x == a$mother_id.y,]
a[as.character(a$mother_id.x) != as.character(a$mother_id.y),]
View(a)
View(de_novo)
View(a)
mut = left_join(de_novo, suppl, by = c('family_id', 'position'))
table(mut$mutation)
summary(mut$mutation)
hist(mut$age_birth..days.)
mut$age_birth..yrs. = mut$age_birth..days. / 365
hist(mut$age_birth..days.)
hist(mut$age_birth..yrs.)
summary(mut$age_birth..yrs.)
table(mut$Individual.id)
View(mut)
group_by(Individual.id)
a = mut %>%
group_by(Individual.id)
View(a)
sum(mut$mutation == 'T>C')
length(mut$mutation)
a = mut %>%
group_by(Individual.id) %>%
mutate(T_C_fr = sum(.$mutation == 'T>C') / length(.$mutation)
)
View(a)
a = mut %>%
group_by(.$Individual.id) %>%
mutate(T_C_fr = sum(.$mutation == 'T>C') / length(.$mutation)
)
View(a)
a = mut %>%
group_by(.$Individual.id) %>%
mutate(T_C_fr = sum(.$mutation == 'T>C') / length(.$mutation)
)
a = mut %>%
group_by(Individual.id) %>%
mutate(T_C_fr = sum(mutation == 'T>C') / length(mutation)
)
View(de_novo)
View(a)
mut_fr = mut %>%
group_by(Individual.id) %>%
mutate(T_C_fr = sum(mutation == 'T>C') / length(mutation)
)
cor.test(mut_fr$T_C_fr, mut_fr$age_birth..yrs.)
cor.test(mut_fr$T_C_fr, mut_fr$age_birth..yrs., method = 'spearman')
cor.test(mut_fr$T_C_fr, mut_fr$age_birth..days., method = 'spearman')
View(mut_fr)
cor.test(unique(mut_fr$T_C_fr), unique(mut_fr$age_birth..days.), method = 'spearman')
summary(mut_fr$T_C_fr)
mut_fr %>%
group_by(Individual.id) %>%
cor.test(T_C_fr, age_birth..yrs.)
mut_fr %>%
group_by(Individual.id) %>%
cor.test(T_C_fr, age_birth..days.)
mut_fr = mut %>%
group_by(Individual.id) %>%
mutate(T_C_fr = sum(mutation == 'T>C') / length(mutation)
) %>%
select(Individual.id, age_birth..days., age_birth..yrs., T_C_fr) %>%
summarise(mean)
?summarise
mut_fr = mut %>%
group_by(Individual.id) %>%
mutate(T_C_fr = sum(mutation == 'T>C') / length(mutation)
) %>%
select(Individual.id, age_birth..days., age_birth..yrs., T_C_fr)
View(mut_fr)
mut_fr = mut %>%
group_by(Individual.id) %>%
mutate(T_C_fr = sum(mutation == 'T>C') / length(mutation)
) %>%
select(Individual.id, age_birth..days., age_birth..yrs., T_C_fr) %>%
summarise(T_C = mean(T_C_fr), age = mean(age_birth..days.))
View(mut_fr)
mut_fr = mut %>%
group_by(Individual.id) %>%
mutate(T_C_fr = sum(mutation == 'T>C') / length(mutation)
) %>%
select(Individual.id, age_birth..days., age_birth..yrs., T_C_fr) %>%
summarise(T_C = mean(T_C_fr), age = mean(age_birth..yrs.))
cor.test(mut_fr$T_C, mut_fr$age, method = 'spearman')
cor.test(mut_fr$T_C, log2(mut_fr$age), method = 'spearman')
plot(mut_fr$T_C, log2(mut_fr$age))
mut_fr = mut %>%
group_by(Individual.id) %>%
mutate(T_C_fr = sum(ancestral_allele == 'T' & mutant_allele == 'C') / length(mutation)
) %>%
select(Individual.id, age_birth..days., age_birth..yrs., T_C_fr) %>%
summarise(T_C = mean(T_C_fr), age = mean(age_birth..yrs.))
View(mut_fr)
mut_fr = mut %>%
group_by(Individual.id) %>%
mutate(T_C_fr = length(ancestral_allele == 'T' & mutant_allele == 'C') / length(mutation)
) %>%
select(Individual.id, age_birth..days., age_birth..yrs., T_C_fr) %>%
summarise(T_C = mean(T_C_fr), age = mean(age_birth..yrs.))
mut_fr = mut %>%
group_by(Individual.id) %>%
mutate(T_C_fr = nrow(ancestral_allele == 'T' & mutant_allele == 'C') / length(mutation)
) %>%
select(Individual.id, age_birth..days., age_birth..yrs., T_C_fr) %>%
summarise(T_C = mean(T_C_fr), age = mean(age_birth..yrs.))
mut[mut$ancestral_allele == 'T',]$mutant_allele
mut_fr = mut %>%
group_by(Individual.id) %>%
mutate(T_C_fr = sum(ancestral_allele == 'T') / length(mutation)
) %>%
select(Individual.id, age_birth..days., age_birth..yrs., T_C_fr) %>%
summarise(T_C = mean(T_C_fr), age = mean(age_birth..yrs.))
mut_fr = mut %>%
group_by(Individual.id) %>%
mutate(T_C_fr = sum(mutation == 'T>C') / length(mutation)
) %>%
select(Individual.id, age_birth..days., age_birth..yrs., T_C_fr) %>%
summarise(T_C = mean(T_C_fr), age = mean(age_birth..yrs.))
plot(mut_fr$T_C, log2(mut_fr$age))
cor.test(mut_fr$T_C, log2(mut_fr$age), method = 'spearman')
mut_fr = mut %>%
group_by(Individual.id) %>%
mutate(T_C_fr = sum(ancestral_allele == 'T') / length(mutation)
) %>%
select(Individual.id, age_birth..days., age_birth..yrs., T_C_fr) %>%
summarise(T_C = mean(T_C_fr), age = mean(age_birth..yrs.))
plot(mut_fr$T_C, log2(mut_fr$age))
cor.test(mut_fr$T_C, log2(mut_fr$age), method = 'spearman')
rm(list=ls(all=TRUE))
library(dplyr)
suppl = read.csv('../../Body/1Raw/Zaidi2019/pnas.1906331116.sd01.csv')
de_novo = read.csv('../../Body/1Raw/Zaidi2019/MakovaDeNovoMutations.csv')
names(de_novo)[2] = 'mother_id'
names(de_novo)[1] = 'family_id'
names(suppl)[2] = 'position'
mut = left_join(de_novo, suppl, by = c('family_id', 'position'))
View(de_novo)
View(mut)
table(mut$mutation)
setdiff(unique(mut$Individual.id), unique(de_novo$Individual.id))
setdiff(unique(mut$Individual.id), unique(de_novo$Individual.id))
mut$age_birth..yrs. = mut$age_birth..days. / 365
# hist(mut$age_birth..days.)
hist(mut$age_birth..yrs.)
table(mut$Individual.id)
mut_fr = mut %>%
group_by(Individual.id) %>%
mutate(T_C_fr = sum(mutation == 'T>C') / length(mutation)
) %>%
select(Individual.id, age_birth..days., age_birth..yrs., T_C_fr) %>%
summarise(T_C = mean(T_C_fr), age = mean(age_birth..yrs.))
plot(mut_fr$T_C, log2(mut_fr$age))
cor.test(mut_fr$T_C, log2(mut_fr$age), method = 'spearman')
mut_fr = mut %>%
group_by(Individual.id) %>%
mutate(T_C_fr = sum(ancestral_allele == 'T') / length(mutation)
) %>%
select(Individual.id, age_birth..days., age_birth..yrs., T_C_fr) %>%
summarise(T_C = mean(T_C_fr), age = mean(age_birth..yrs.))
plot(mut_fr$T_C, log2(mut_fr$age))
cor.test(mut_fr$T_C, log2(mut_fr$age), method = 'spearman')
View(mut)
View(mut)
summary(mut_fr$T_C)
View(mut)
mut[mut$ancestral_allele == 'C',]$mutant_allele
mut_fr = mut %>%
group_by(Individual.id) %>%
mutate(T_C_fr = sum(ancestral_allele == 'T') / length(mutation),
C_T_fr = sum(ancestral_allele == 'C') / length(mutation)
) %>%
select(Individual.id, age_birth..days., age_birth..yrs., T_C_fr) %>%
summarise(T_C = mean(T_C_fr), C_T = mean(C_T_fr), age = mean(age_birth..yrs.))
mut_fr = mut %>%
group_by(Individual.id) %>%
mutate(T_C_fr = sum(ancestral_allele == 'T') / length(mutation),
C_T_fr = sum(ancestral_allele == 'C') / length(mutation)
)
View(mut)
View(mut_fr)
table(mut$ancestral_allele)
mut_fr = mut %>%
group_by(Individual.id) %>%
mutate(T_C_fr = sum(ancestral_allele == 'T') / length(mutation),
C_T_fr = sum(ancestral_allele == 'C') / length(mutation)
) %>%
select(Individual.id, age_birth..days., age_birth..yrs., T_C_fr, C_T_fr) %>%
summarise(T_C = mean(T_C_fr), C_T = mean(C_T_fr), age = mean(age_birth..yrs.))
View(mut_fr)
hist(mut_fr[mut_fr$T_C > 0,]$age)
hist(mut_fr[mut_fr$T_C > 0,]$age, breaks = 20)
hist(mut_fr[mut_fr$C_T > 0,]$age, breaks = 20)
View(mut_fr)
function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE,
pattern, sorted = TRUE)
rm(list=ls(all=TRUE))
library(dplyr)
suppl = read.csv('../../Body/1Raw/Zaidi2019/pnas.1906331116.sd01.csv')
de_novo = read.csv('../../Body/1Raw/Zaidi2019/MakovaDeNovoMutations.csv')
names(de_novo)[2] = 'mother_id'
names(de_novo)[1] = 'family_id'
names(suppl)[2] = 'position'
mut = left_join(de_novo, suppl, by = c('family_id', 'position'))
table(mut$mutation)
mut$age_birth..yrs. = mut$age_birth..days. / 365
mut$age_birth..yrs. = mut$age_birth..days. / 365
mut_fr = mut %>%
group_by(Individual.id) %>%
mutate(T_C_fr = sum(mutation == 'T>C') / length(mutation)
) %>%
select(Individual.id, age_birth..days., age_birth..yrs., T_C_fr) %>%
summarise(T_C = mean(T_C_fr), age = mean(age_birth..yrs.))
mut_fr = mut %>%
group_by(Individual.id) %>%
mutate(T_C_fr = sum(ancestral_allele == 'T') / length(mutation),
C_T_fr = sum(ancestral_allele == 'C') / length(mutation)
) %>%
select(Individual.id, age_birth..days., age_birth..yrs., T_C_fr, C_T_fr) %>%
summarise(T_C = mean(T_C_fr), C_T = mean(C_T_fr), age = mean(age_birth..yrs.))
View(mut_fr)
View(mut)
mut_fr = mut %>%
group_by(Individual.id) %>%
mutate(T_C_fr = sum(ancestral_allele == 'T') / length(mutation),
notT_C = sum(ancestral_allele != 'T') / length(mutation)
) %>%
select(Individual.id, age_birth..days., age_birth..yrs., T_C_fr, notT_C) %>%
summarise(T_C = mean(T_C_fr), notT_C = mean(notT_C), age = mean(age_birth..yrs.))
View(mut_fr)
hist(mut_fr[mut_fr$T_C > 0,]$age, breaks = 20)
hist(mut_fr[mut_fr$notT_C > 0,]$age, breaks = 20)
summary(mut_fr[mut_fr$T_C > 0,]$age)
summary(mut_fr[mut_fr$notT_C > 0,]$age)
mut_fr = mut %>%
group_by(Individual.id) %>%
mutate(T_C_fr = sum(ancestral_allele == 'T') / length(mutation),
notT_C = sum(ancestral_allele != 'T') / length(mutation),
C_T_fr = sum(ancestral_allele == 'C') / length(mutation)
) %>%
select(Individual.id, age_birth..days., age_birth..yrs., T_C_fr, notT_C, C_T_fr) %>%
summarise(T_C = mean(T_C_fr), notT_C = mean(notT_C), C_T = mean(C_T_fr),
age = mean(age_birth..yrs.))
summary(mut_fr[mut_fr$C_T > 0,]$age)
summary(mut_fr[mut_fr$T_C > 0,]$age)
summary(mut_fr[mut_fr$notT_C > 0,]$age)
summary(mut_fr[mut_fr$C_T > 0,]$age)
View(mut)
length(unique(mut$mother_id.x))
length(unique(paste(mut$mother_id.x, mut$Individual.id)))
for(i in unique(mut$mother_id.x)){
if(length(unique(mut[mut$mother_id.x == i,])) > 1){
print(i)
}
}
if(length(unique(mut[mut$mother_id.x == i,]$Individual.id)) > 1){
print(i)
}
for(i in unique(mut$mother_id.x)){
if(length(unique(mut[mut$mother_id.x == i,]$Individual.id)) > 1){
print(i)
}
}
View(mut)
i = "F342m1"
# i = "F342m1"
if(length(unique(mut[mut$mother_id.x == i,]$Individual.id)) > 1){
temp = mut[mut$mother_id.x == i,]
}
View(temp)
i = "F253m1"
# i = "F253m1"
if(length(unique(mut[mut$mother_id.x == i,]$Individual.id)) > 1){
temp = mut[mut$mother_id.x == i,]
}
View(temp)
View(suppl)
>>>>>>> Stashed changes
